{"version":3,"sources":["history.tsx","components/Header/Header.tsx","components/Header/HeaderLink.tsx","containers/Assessment/Chatbot/ProgressBar.tsx","data/data.tsx","containers/Assessment/Chatbot/ChatbotMessage.tsx","containers/Assessment/Chatbot/UserMessage.tsx","containers/Assessment/Chatbot/Chat.tsx","containers/Assessment/Chatbot/ToDoSection.tsx","data/context.tsx","containers/Assessment/Chatbot/ChatbotPage.tsx","components/TabNav/TabNav.tsx","containers/Assessment/Result/Detail/Overview.tsx","containers/Assessment/Result/Detail/QuestionRepo.tsx","containers/Assessment/Result/Detail/ResultDetail.tsx","containers/Assessment/Result/ResultPage.tsx","App.tsx","serviceWorker.ts","index.tsx","Assets/img/botavator.svg"],"names":["createHistory","Header","props","React","useState","mobileOpen","setMobileOpen","rightLinks","leftLinks","brand","toolTitle","brandName","brandComponent","className","src","alt","AppBar","Toolbar","undefined","Hidden","smDown","implementation","mdUp","IconButton","color","aria-label","onClick","defaultProp","HeaderLinks","List","ListItem","Button","ProgressBar","NodeTypes","TriggerType","ChatbotMessage","botAvator","content","UserMessage","options","message","questionId","id","extraOption","extraInfo","optionItems","map","option","key","selectedOptionId","handleSelectOptions","label","extraOptionItem","showExtraInfo","handleShowExtraInfo","title","Chat","messageOptions","messages","length","response","res","ToDoSection","todoList","reminderList","item","createNode","_node","newNode","type","triggers","getSurvey_part1","survey","single","next","answers","optionId","result","repo","nextQuestionId","skip","todos","nextModuleId","reminders","getSurvey_part2","multi","default","getSurvey_part3","getSurvey_part4","getSurvey_part5","getSurvey_part6","exit","getModules","modules","name","nodes","context","ResultContext","createContext","updateContext","contextItm","ResultContextProvider","contextItem","state","concat","results","push","path","setState","Provider","value","this","children","Component","ResultContextConsumer","Consumer","ChatbotPage","getSurvey","currentMessage","currentModuleId","questionPath","messageList","bind","displayNextMsg","chatbotScorller","document","getElementById","scrollTop","scrollHeight","qId","nextMessage","scrollToBottom","checkModule","isInactiveQuestion","resultItem","forEach","trigger","answer","index","pathLength","isCorrectTrigger","history","newTodoList","newReminderList","repeatMessage","cloneDeep","moduleId","currentQuestionId","currentOptionId","console","log","JSON","stringify","banrdIcon","fixed","absolute","contextType","TabNav","tabList","setValue","tabs","tab","i","Tab","Tabs","onChange","event","newValue","variant","prop","tabContent","TodoList","ListItemSecondaryAction","ReminderList","Overview","Typography","component","QuestionRepo","resultList","questionList","gutterBottom","find","opt","Link","ResultDetail","Object","keys","getTabList","ResultPage","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8190c8a1.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory';\n\nexport default createHistory();","import React from \"react\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\n// @material-ui/icons\nimport Menu from \"@material-ui/icons/Menu\";\n\nimport './HeaderStyle.css'\nimport '../common.css'\n\n\nexport default function Header(props: { color: any; rightLinks: any; leftLinks: any; brand: string; brandName:string; toolTitle: string; fixed: boolean; absolute: boolean; }) {\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n  const { rightLinks, leftLinks, brand, toolTitle, brandName } = props;\n\nconst brandComponent = <div><img className=\"navBrand\" src={brand} alt=\"brand icon\" /><span className=\"brandTitle\">{brandName}</span><span className=\"navTitle\">{toolTitle}</span></div>;\n  return (\n    <AppBar className=\"appBar white\">\n      <Toolbar className=\"navContainer\">\n        {leftLinks !== undefined ? { brandComponent } : null}\n        <div className=\"flex\">\n          {leftLinks !== undefined ? (\n            <Hidden smDown implementation=\"css\">\n              {leftLinks}\n            </Hidden>\n          ) : (\n              brandComponent\n            )}\n        </div>\n        <Hidden smDown implementation=\"css\">\n          {rightLinks}\n        </Hidden>\n        <Hidden mdUp>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerToggle}\n          >\n            <Menu />\n          </IconButton>\n        </Hidden>\n      </Toolbar>\n      {/* <Hidden mdUp implementation=\"js\">\n        <Drawer\n          variant=\"temporary\"\n          anchor={\"right\"}\n          open={mobileOpen}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          onClose={handleDrawerToggle}\n        >\n          <div className={classes.appResponsive}>\n            {leftLinks}\n            {rightLinks}\n          </div>\n        </Drawer>\n      </Hidden> */}\n    </AppBar>\n  );\n}\n\nHeader.defaultProp = {\n  color: \"white\"\n};\n\nHeader.propTypes = {\n  color: PropTypes.oneOf([\n    \"primary\",\n    \"info\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"transparent\",\n    \"white\",\n    \"rose\",\n    \"dark\"\n  ]),\n  rightLinks: PropTypes.node,\n  leftLinks: PropTypes.node,\n  brand: PropTypes.string,\n  toolTitle: PropTypes.string,\n  fixed: PropTypes.bool,\n  absolute: PropTypes.bool,\n  // this will cause the sidebar to change the color from\n  // props.color (see above) to changeColorOnScroll.color\n  // when the window.pageYOffset is heigher or equal to\n  // changeColorOnScroll.height and then when it is smaller than\n  // changeColorOnScroll.height change it back to\n  // props.color (see above)\n  changeColorOnScroll: PropTypes.shape({\n    height: PropTypes.number.isRequired,\n    color: PropTypes.oneOf([\n      \"primary\",\n      \"info\",\n      \"success\",\n      \"warning\",\n      \"danger\",\n      \"transparent\",\n      \"white\",\n      \"rose\",\n      \"dark\"\n    ]).isRequired\n  })\n};\n","import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Button from '@material-ui/core/Button';\nimport \"./HeaderStyle.css\";\n\nexport default function HeaderLinks() {\n  return (\n    <List className=\"navList\">\n      {/* <ListItem className=\"navListItem\">\n        <Button className = \"navLink\">Help</Button>\n      </ListItem>\n      <ListItem className=\"navListItem\">\n        <Button className = \"navLink\">Login</Button>\n      </ListItem> */}\n      <ListItem className=\"navListItem\">\n        <Button className = \"navLink\">Contact</Button>\n      </ListItem>\n    </List>\n  );\n}\n","import React from \"react\";\n\nexport default function ProgressBar() {\n    return (\n\n        <div className=\"progress-container\">\n        </div>\n    );\n}\n","import { Item, Result } from './context';\nexport enum NodeTypes {\n    single,\n    multi,\n    message\n}\n\nexport enum TriggerType {\n    next, // next message\n    default, // default triggre without condition, should always be the last trigger\n    skip, // skip to next sub-module\n    exit // exit survey\n}\nexport interface Option {\n    id: number;\n    label: string;\n}\nexport interface Answer {\n    questionId: number;\n    optionId: number;\n}\nexport interface Trigger {\n    type: TriggerType,\n    answers: Array<Answer>;\n    response?: Array<string>;\n    result?: Result;\n    todos?: Array<Item>;\n    reminders?: Array<Item>;\n    nextQuestionId: number;\n    nextModuleId?: number;\n}\nexport interface ExtraInfo {\n    title: string,\n    content: string\n}\nexport interface Node {\n    id: number;\n    type: NodeTypes;\n    content: string;\n    options: Array<Option>;\n    triggers: Array<Trigger>;\n    extraInfo?: ExtraInfo;\n}\n\nexport interface NodeDictionary {\n    [key: number]: Node;\n}\n\nexport interface Module {\n    name: string,\n    modules?: { [key: number]: Module },\n    nodes?: NodeDictionary\n}\n\nfunction createNode(_node: Node): { id: number, type: NodeTypes, content: string, options: Array<Option>, triggers: Array<Trigger>, extraInfo?: ExtraInfo } {\n    let newNode: Node;\n    newNode = {\n        id: _node.id,\n        type: _node.type,\n        content: _node.content,\n        options: _node.options,\n        triggers: _node.triggers\n    }\n    if (_node.extraInfo) {\n        newNode.extraInfo = _node.extraInfo;\n    }\n    return newNode;\n}\n\n// function createOption(_option: Option): { id: number, label: string } {\n//     let newOption: Option;\n//     newOption = {\n//         id: _option.id,\n//         label: _option.label\n//     }\n//     return newOption;\n// }\n// function createAnswer(_answer: Answer): { questionId: number, optionId: number } {\n//     let newAnswer: Answer;\n//     newAnswer = {\n//         questionId: _answer.questionId,\n//         optionId: _answer.optionId\n//     }\n//     return newAnswer;\n// }\n// function createTrigger(_trigger: Trigger): { type: TriggerType, answers: Array<Answer>, nextQuestionId: number, result?: Result, response?: Array<string>, todos?: Array<Item>, nextModuleId?: number } {\n//     let newTrigger: Trigger;\n//     newTrigger = {\n//         type: _trigger.type,\n//         answers: _trigger.answers,\n//         result: _trigger.result,\n//         nextQuestionId: _trigger.nextQuestionId\n//     }\n//     if (_trigger.response) {\n//         newTrigger.response = _trigger.response;\n//     }\n//     if (_trigger.nextModuleId) {\n//         newTrigger.nextModuleId = _trigger.nextModuleId;\n//     }\n//     return newTrigger;\n// }\n\n// function testing() {\n//     let survey: NodeDictionary = {};\n//     let options: Array<Option> = [];\n//     options.push(createOption({id:100, label: \"Yes\"}));\n//     options.push(createOption({id:101, label: \"No\"}));\n//     let triggers: Array<Trigger> = [];\n//     let answers: Array<Answer> = [];\n//     answers = [{questionId: 1, optionId: 100}];\n//     triggers.push(createTrigger({answers: answers, results: [\"some repo on quetion1 Yes\"], nextQuestionId: 2}));\n//     answers = [{questionId: 1, optionId: 101}];\n//     triggers.push(createTrigger({answers: answers, results: [\"some repo on question1 No\"], nextQuestionId: 3}));\n//     let extraInfo = [ \"What is privacy?\",\"Do I need a privacy policy?\",\"What should a privacy policy contain?\"];\n//     survey[1] = createNode({id: 1, type: NodeTypes.single, content: \"Does your org have a privacy policy?\", options: options, triggers: triggers, extraInfo: extraInfo});\n//     console.log(survey);\n// }\nfunction getSurvey() {\n    let survey: NodeDictionary = {};\n    survey[1] = createNode(\n        {\n            id: 1,\n            type: NodeTypes.single,\n            content: \"Does your org have a privacy policy?\",\n            options: [\n                {\n                    id: 101,\n                    label: \"Yes\"\n                },\n                {\n                    id: 100,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 1, optionId: 101 }\n                    ],\n                    result: { questionId: 1, optionId: 101, repo: \"some repo on quetion 1 Yes\" },\n                    nextQuestionId: 3\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 1, optionId: 100 }\n                    ],\n                    result: { questionId: 1, optionId: 100, repo: \"some repo on quetion 1 No\" },\n                    todos: [{ title: \"Todo Item 1\" }],\n                    nextQuestionId: 2,\n                    nextModuleId: 2\n                }\n            ],\n            extraInfo: {\n                title: \"What is a privacy policy?\",\n                content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\n                    \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\n            }\n        }\n    );\n    // questionId = 2 belongs to another submodule, so it's not included in here\n    survey[3] = createNode(\n        {\n            id: 3,\n            type: NodeTypes.single,\n            content: \"Who is covered in your privacy policy?\",\n            options: [\n                {\n                    id: 300,\n                    label: \"All\"\n                },\n                {\n                    id: 301,\n                    label: \"Not All\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 3, optionId: 300 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 3, optionId: 300, repo: \"some repo on quetion 3 No\" },\n                    nextQuestionId: 4\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 3, optionId: 301 }\n                    ],\n                    result: { questionId: 3, optionId: 301, repo: \"some repo on quetion 3 Yes\" },\n                    todos: [{ title: \"Todo Item 2\" }],\n                    nextQuestionId: 4\n                }\n            ]\n        }\n    );\n    survey[4] = createNode(\n        {\n            id: 4,\n            type: NodeTypes.single,\n            content: \"Org operates website?\",\n            options: [\n                {\n                    id: 401,\n                    label: \"Yes\"\n                },\n                {\n                    id: 400,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 4, optionId: 401 }\n                    ],\n                    result: { questionId: 4, optionId: 401, repo: \"some repo on quetion 4 Yes\" },\n                    nextQuestionId: 6\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 4, optionId: 400 }\n                    ],\n                    result: { questionId: 4, optionId: 400, repo: \"some repo on quetion 4 No\" },\n                    nextQuestionId: 5\n                }\n            ]\n        }\n    );\n    survey[5] = createNode(\n        {\n            id: 5,\n            type: NodeTypes.single,\n            content: \"Org uses social media?\",\n            options: [\n                {\n                    id: 501,\n                    label: \"Yes\"\n                },\n                {\n                    id: 500,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 5, optionId: 501 }\n                    ],\n                    result: { questionId: 5, optionId: 501, repo: \"some repo on quetion 5 Yes\" },\n                    nextQuestionId: 8\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 5, optionId: 500 }\n                    ],\n                    result: { questionId: 5, optionId: 500, repo: \"some repo on quetion 5 No\" },\n                    nextQuestionId: 7\n                }\n            ]\n        }\n    );\n    survey[6] = createNode(\n        {\n            id: 6,\n            type: NodeTypes.single,\n            content: \"Collect data for analytics?\",\n            options: [\n                {\n                    id: 601,\n                    label: \"Yes\"\n                },\n                {\n                    id: 600,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 6, optionId: 601 }\n                    ],\n                    result: { questionId: 6, optionId: 601, repo: \"some repo on quetion 6 Yes\" },\n                    nextQuestionId: 9\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 6, optionId: 600 }\n                    ],\n                    result: { questionId: 6, optionId: 600, repo: \"some repo on quetion 6 No\" },\n                    nextQuestionId: 5\n                }\n            ],\n            extraInfo: {\n                title: \"WHAT ARE DATA ANALYTICS?\",\n                content: \"Data analytics refers to tracking website usage for reporting and evaluating purposes. \" +\n                    \"Google Analytics is a common example of a data analytics service.\"\n            }\n        }\n    );\n    survey[7] = createNode(\n        {\n            id: 7,\n            type: NodeTypes.single,\n            content: \"List of people trained on privacy policy?\",\n            options: [\n                {\n                    id: 701,\n                    label: \"Yes\"\n                },\n                {\n                    id: 700,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 7, optionId: 701 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 7, optionId: 701, repo: \"some repo on quetion 7 Yes\" },\n                    nextQuestionId: 2\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 7, optionId: 700 }\n                    ],\n                    result: { questionId: 7, optionId: 700, repo: \"some repo on quetion 7 No\" },\n                    todos: [{ title: \"Todo Item 5\" }],\n                    nextQuestionId: 2\n                }\n            ]\n        }\n    );\n    survey[8] = createNode(\n        {\n            id: 8,\n            type: NodeTypes.single,\n            content: \"Reviewed social media terms?\",\n            options: [\n                {\n                    id: 801,\n                    label: \"Yes\"\n                },\n                {\n                    id: 800,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 8, optionId: 801 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 8, optionId: 801, repo: \"some repo on quetion 8 Yes\" },\n                    nextQuestionId: 7\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 8, optionId: 800 }\n                    ],\n                    result: { questionId: 8, optionId: 800, repo: \"some repo on quetion 8 No\" },\n                    todos: [{ title: \"Todo Item 4\" }],\n                    nextQuestionId: 7\n                }\n            ],\n            extraInfo: {\n                title: \"WHAT IS THIS?\",\n                content: \"Terms and conditions are the agreement between a service and the service user. \" +\n                    \"This is the legal text that we agree to before using a service and it can often be \" +\n                    \"accessed by a link on the bottom of a website or within the settings.\"\n            }\n        }\n    );\n    survey[9] = createNode(\n        {\n            id: 9,\n            type: NodeTypes.single,\n            content: \"Does your privacy policy describe the collection of analytics?\",\n            options: [\n                {\n                    id: 901,\n                    label: \"Yes\"\n                },\n                {\n                    id: 900,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 9, optionId: 901 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 9, optionId: 901, repo: \"some repo on quetion 9 Yes\" },\n                    nextQuestionId: 5\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 9, optionId: 900 }\n                    ],\n                    result: { questionId: 9, optionId: 900, repo: \"some repo on quetion 9 No\" },\n                    todos: [{ title: \"Todo Item 3\" }],\n                    nextQuestionId: 5\n                }\n            ]\n        }\n    );\n\n\n\n    return survey;\n}\n\nfunction getSurvey_part1() {\n    let survey: NodeDictionary = {};\n    survey[1] = createNode(\n        {\n            id: 1,\n            type: NodeTypes.single,\n            content: \"Does your org have a privacy policy?\",\n            options: [\n                {\n                    id: 101,\n                    label: \"Yes\"\n                },\n                {\n                    id: 100,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 1, optionId: 101 }\n                    ],\n                    result: { questionId: 1, optionId: 101, repo: \"some repo on quetion 1 Yes\" },\n                    nextQuestionId: 3\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 1, optionId: 100 }\n                    ],\n                    result: { questionId: 1, optionId: 100, repo: \"some repo on quetion 1 No\" },\n                    todos: [{ title: \"Todo Item 1\" }],\n                    nextQuestionId: 2,\n                    nextModuleId: 2\n                }\n            ],\n            extraInfo: {\n                title: \"What is a privacy policy?\",\n                content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\n                    \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\n            }\n        }\n    );\n    // questionId = 2 belongs to another submodule, so it's not included in here\n    survey[3] = createNode(\n        {\n            id: 3,\n            type: NodeTypes.single,\n            content: \"Who is covered in your privacy policy?\",\n            options: [\n                {\n                    id: 300,\n                    label: \"All\"\n                },\n                {\n                    id: 301,\n                    label: \"Not All\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 3, optionId: 300 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 3, optionId: 300, repo: \"some repo on quetion 3 No\" },\n                    nextQuestionId: 4\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 3, optionId: 301 }\n                    ],\n                    result: { questionId: 3, optionId: 301, repo: \"some repo on quetion 3 Yes\" },\n                    reminders: [{ title: \"Todo Item 2\" }],\n                    nextQuestionId: 4\n                }\n            ]\n        }\n    );\n    survey[4] = createNode(\n        {\n            id: 4,\n            type: NodeTypes.single,\n            content: \"Org operates website?\",\n            options: [\n                {\n                    id: 401,\n                    label: \"Yes\"\n                },\n                {\n                    id: 400,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 4, optionId: 401 }\n                    ],\n                    result: { questionId: 4, optionId: 401, repo: \"some repo on quetion 4 Yes\" },\n                    nextQuestionId: 6\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 4, optionId: 400 }\n                    ],\n                    result: { questionId: 4, optionId: 400, repo: \"some repo on quetion 4 No\" },\n                    nextQuestionId: 5\n                }\n            ]\n        }\n    );\n    survey[5] = createNode(\n        {\n            id: 5,\n            type: NodeTypes.single,\n            content: \"Org uses social media?\",\n            options: [\n                {\n                    id: 501,\n                    label: \"Yes\"\n                },\n                {\n                    id: 500,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 5, optionId: 501 }\n                    ],\n                    result: { questionId: 5, optionId: 501, repo: \"some repo on quetion 5 Yes\" },\n                    nextQuestionId: 8\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 5, optionId: 500 }\n                    ],\n                    result: { questionId: 5, optionId: 500, repo: \"some repo on quetion 5 No\" },\n                    nextQuestionId: 7\n                }\n            ]\n        }\n    );\n    survey[6] = createNode(\n        {\n            id: 6,\n            type: NodeTypes.single,\n            content: \"Collect data for analytics?\",\n            options: [\n                {\n                    id: 601,\n                    label: \"Yes\"\n                },\n                {\n                    id: 600,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 6, optionId: 601 }\n                    ],\n                    result: { questionId: 6, optionId: 601, repo: \"some repo on quetion 6 Yes\" },\n                    nextQuestionId: 9\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 6, optionId: 600 }\n                    ],\n                    result: { questionId: 6, optionId: 600, repo: \"some repo on quetion 6 No\" },\n                    nextQuestionId: 5\n                }\n            ],\n            extraInfo: {\n                title: \"WHAT ARE DATA ANALYTICS?\",\n                content: \"Data analytics refers to tracking website usage for reporting and evaluating purposes. \" +\n                    \"Google Analytics is a common example of a data analytics service.\"\n            }\n        }\n    );\n    survey[7] = createNode(\n        {\n            id: 7,\n            type: NodeTypes.single,\n            content: \"List of people trained on privacy policy?\",\n            options: [\n                {\n                    id: 701,\n                    label: \"Yes\"\n                },\n                {\n                    id: 700,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 7, optionId: 701 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 7, optionId: 701, repo: \"some repo on quetion 7 Yes\" },\n                    nextQuestionId: 2,\n                    nextModuleId: 2\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 7, optionId: 700 }\n                    ],\n                    result: { questionId: 7, optionId: 700, repo: \"some repo on quetion 7 No\" },\n                    reminders: [{ title: \"Todo Item 5\" }],\n                    nextQuestionId: 2,\n                    nextModuleId: 2\n                }\n            ]\n        }\n    );\n    survey[8] = createNode(\n        {\n            id: 8,\n            type: NodeTypes.single,\n            content: \"Reviewed social media terms?\",\n            options: [\n                {\n                    id: 801,\n                    label: \"Yes\"\n                },\n                {\n                    id: 800,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 8, optionId: 801 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 8, optionId: 801, repo: \"some repo on quetion 8 Yes\" },\n                    nextQuestionId: 7\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 8, optionId: 800 }\n                    ],\n                    result: { questionId: 8, optionId: 800, repo: \"some repo on quetion 8 No\" },\n                    reminders: [{ title: \"Todo Item 4\" }],\n                    nextQuestionId: 7\n                }\n            ],\n            extraInfo: {\n                title: \"WHAT IS THIS?\",\n                content: \"Terms and conditions are the agreement between a service and the service user. \" +\n                    \"This is the legal text that we agree to before using a service and it can often be \" +\n                    \"accessed by a link on the bottom of a website or within the settings.\"\n            }\n        }\n    );\n    survey[9] = createNode(\n        {\n            id: 9,\n            type: NodeTypes.single,\n            content: \"Does your privacy policy describe the collection of analytics?\",\n            options: [\n                {\n                    id: 901,\n                    label: \"Yes\"\n                },\n                {\n                    id: 900,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 9, optionId: 901 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 9, optionId: 901, repo: \"some repo on quetion 9 Yes\" },\n                    nextQuestionId: 5\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 9, optionId: 900 }\n                    ],\n                    result: { questionId: 9, optionId: 900, repo: \"some repo on quetion 9 No\" },\n                    reminders: [{ title: \"Todo Item 3\" }],\n                    nextQuestionId: 5\n                }\n            ]\n        }\n    );\n\n\n\n    return survey;\n}\n\nfunction getSurvey_part2() {\n    let survey: NodeDictionary = {};\n    survey[2] = createNode(\n        {\n            id: 2,\n            type: NodeTypes.message,\n            content: \"Explain what is personal info and what isn’t\",\n            options: [],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [],\n                    nextQuestionId: 10\n                }\n            ]\n        }\n    );\n    survey[10] = createNode(\n        {\n            id: 10,\n            type: NodeTypes.single,\n            content: \"Does your org collect personal information?\",\n            options: [\n                {\n                    id: 1001,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1000,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 10, optionId: 1001 }\n                    ],\n                    result: { questionId: 10, optionId: 1001, repo: \"some repo on question 10 Yes\" },\n                    nextQuestionId: 12\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 10, optionId: 1000 }\n                    ],\n                    result: { questionId: 10, optionId: 1000, repo: \"some repo on question 10 No\" },\n                    nextQuestionId: 11,\n                    nextModuleId: 3\n                }\n            ]\n        }\n    )\n    survey[12] = createNode(\n        {\n            id: 12,\n            type: NodeTypes.single,\n            content: \"Do you explain what the P.I. will be used for?\",\n            options: [\n                {\n                    id: 1201,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1200,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 12, optionId: 1201 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 12, optionId: 1201, repo: \"some repo on question 12 Yes\" },\n                    nextQuestionId: 13\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 12, optionId: 1200 }\n                    ],\n                    todos: [{ title: \"Todo Item 6\" }],\n                    result: { questionId: 12, optionId: 1200, repo: \"some repo on question 12 No\" },\n                    nextQuestionId: 13\n                }\n            ]\n        }\n    )\n    survey[13] = createNode(\n        {\n            id: 13,\n            type: NodeTypes.single,\n            content: \"Do you obtain consent from the person?\",\n            options: [\n                {\n                    id: 1301,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1300,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 13, optionId: 1301 }\n                    ],\n                    result: { questionId: 13, optionId: 1301, repo: \"some repo on question 13 Yes\" },\n                    nextQuestionId: 15\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 13, optionId: 1300 }\n                    ],\n                    result: { questionId: 13, optionId: 1300, repo: \"some repo on question 13 No\" },\n                    nextQuestionId: 14\n                }\n            ]\n        }\n    )\n    survey[14] = createNode(\n        {\n            id: 14,\n            type: NodeTypes.multi,\n            content: \"Our information is collected .. Select all that apply.\",\n            options: [\n                {\n                    id: 1401,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1400,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 14, optionId: 1401 }\n                    ],\n                    result: { questionId: 14, optionId: 1401, repo: \"some repo on question 14 Yes\" },\n                    nextQuestionId: 17\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 14, optionId: 1400 }\n                    ],\n                    result: { questionId: 14, optionId: 1400, repo: \"some repo on question 14 No\" },\n                    nextQuestionId: 16\n                }\n            ]\n        }\n    )\n    survey[15] = createNode(\n        {\n            id: 15,\n            type: NodeTypes.multi,\n            content: \"Do you use a consent form?\",\n            options: [\n                {\n                    id: 1501,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1500,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 15, optionId: 1501 }\n                    ],\n                    response: [\"Good Job.\"],\n                    result: { questionId: 15, optionId: 1501, repo: \"some repo on question 15 Yes\" },\n                    nextQuestionId: 14\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 15, optionId: 1500 }\n                    ],\n                    reminders: [{ title: \"Todo Item 7\" }],\n                    result: { questionId: 15, optionId: 1500, repo: \"some repo on question 15 No\" },\n                    nextQuestionId: 16\n                }\n            ]\n        }\n    )\n    survey[16] = createNode(\n        {\n            id: 16,\n            type: NodeTypes.single,\n            content: \"Is the person an employee of the org?\",\n            options: [\n                {\n                    id: 1601,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1600,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 16, optionId: 1601 }\n                    ],\n                    result: { questionId: 16, optionId: 1601, repo: \"some repo on question 16 Yes\" },\n                    nextQuestionId: 18\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 16, optionId: 1600 }\n                    ],\n                    result: { questionId: 16, optionId: 1600, repo: \"some repo on question 16 No\" },\n                    todos: [{ title: \"Todo Item 8\" }],\n                    nextQuestionId: 17\n                }\n            ]\n        }\n    )\n    survey[17] = createNode(\n        {\n            id: 17,\n            type: NodeTypes.single,\n            content: \"Does the P.I you collect help fufill the orgs mission/purpose?\",\n            options: [\n                {\n                    id: 1701,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1700,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 17, optionId: 1701 }\n                    ],\n                    result: { questionId: 17, optionId: 1701, repo: \"some repo on question 17 Yes\" },\n                    nextQuestionId: 20\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 17, optionId: 1700 }\n                    ],\n                    result: { questionId: 17, optionId: 1700, repo: \"some repo on question 17 No\" },\n                    nextQuestionId: 20\n                }\n            ],\n            extraInfo: {\n                title: \"I NEED MORE INFORMATION\",\n                content: \"Information collected should be related to the society’s purpose/goals. \" +\n                    \"For example, “we are a theatre company and collect information from our subscribers to sell tickets.”\"\n            },\n        }\n    )\n    survey[18] = createNode(\n        {\n            id: 18,\n            type: NodeTypes.single,\n            content: \"Select reasons for collecting employee information. Select one.\",\n            options: [\n                {\n                    id: 1800,\n                    label: \"Establish employment\"\n                },\n                {\n                    id: 1801,\n                    label: \"Manage employment\"\n                },\n                {\n                    id: 1802,\n                    label: \"Terminate employment\"\n                },\n                {\n                    id: 1803,\n                    label: \"Other reasons\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 18, optionId: 1803 }\n                    ],\n                    result: { questionId: 18, optionId: 1803, repo: \"some repo on question 18 other reasons\" },\n                    todos: [{ title: \"Todo Item 8\" }],\n                    nextQuestionId: 17\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    result: { questionId: 18, optionId: 1800, repo: \"some repo on question 18\" },\n                    nextQuestionId: 19\n                }\n            ]\n        }\n    )\n    survey[19] = createNode(\n        {\n            id: 19,\n            type: NodeTypes.single,\n            content: \"Do you let these employees know ahead of time?\",\n            options: [\n                {\n                    id: 1901,\n                    label: \"Yes\"\n                },\n                {\n                    id: 1900,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 19, optionId: 1900 }\n                    ],\n                    result: { questionId: 19, optionId: 1900, repo: \"some repo on question 19 N0\" },\n                    todos: [{ title: \"Todo Item 9\" }],\n                    nextQuestionId: 17\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 19, optionId: 1901 }\n                    ],\n                    response: [\"Good Job\"],\n                    result: { questionId: 18, optionId: 1800, repo: \"some repo on question 19 Yes\" },\n                    nextQuestionId: 17\n                }\n            ]\n        }\n    )\n    survey[20] = createNode(\n        {\n            id: 20,\n            type: NodeTypes.multi,\n            content: \"Select the reasons you collect personal information. Select all that apply.\",\n            options: [\n                {\n                    id: 2000,\n                    label: \"To communicate with members\"\n                },\n                {\n                    id: 2001,\n                    label: \"To send newsletters and invitations\"\n                },\n                {\n                    id: 2002,\n                    label: \"For service phone calls and emails\"\n                },\n                {\n                    id: 2003,\n                    label: \"For audit purposes\"\n                },\n                {\n                    id: 2004,\n                    label: \"To solicit donations\"\n                },\n                {\n                    id: 2005,\n                    label: \"To issue tax receipts\"\n                },\n                {\n                    id: 2006,\n                    label: \"Other reasons\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 20, optionId: 2006 }\n                    ],\n                    result: { questionId: 20, optionId: 2006, repo: \"some repo on question 20 Other reasons\" },\n                    response: [\"Your use of personal information could be problematic. Check the “Permissions for Personal Information” at the end of the assessment to learn more.\"],\n                    todos: [{title: \"Todo Item 10\"}],\n                    nextQuestionId: 21\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    response: [\"Great - these are all permissible uses of personal information!\"],\n                    result: { questionId: 20, optionId: 2000, repo: \"some repo on question 20\" },\n                    nextQuestionId: 21\n                }\n            ]\n        }\n    )\n    survey[21] = createNode(\n        {\n            id: 21,\n            type: NodeTypes.single,\n            content: \"Does your organization give out personal information either within or outside the organization?\",\n            options: [\n                {\n                    id: 2101,\n                    label: \"Yes\"\n                },\n                {\n                    id: 2100,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 21, optionId: 2100 }\n                    ],\n                    result: { questionId: 21, optionId: 2100, repo: \"some repo on question 21 No\" },\n                    nextQuestionId: 28\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 21, optionId: 2101 }\n                    ],\n                    result: { questionId: 21, optionId: 2101, repo: \"some repo on question 21 Yes\" },\n                    nextQuestionId: 22\n                }\n            ]\n        }\n    )\n    survey[22] = createNode(\n        {\n            id: 22,\n            type: NodeTypes.single,\n            content: \"Do you get explicit consent from people before giving out their personal information?\",\n            options: [\n                {\n                    id: 2201,\n                    label: \"Yes\"\n                },\n                {\n                    id: 2200,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 22, optionId: 2200 }\n                    ],\n                    result: { questionId: 22, optionId: 2200, repo: \"some repo on question 22 No\" },\n                    nextQuestionId: 23\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 22, optionId: 2201 }\n                    ],\n                    response: [\"Great!\"],\n                    result: { questionId: 22, optionId: 2201, repo: \"some repo on question 22 Yes\" },\n                    nextQuestionId: 24\n                }\n            ],\n            extraInfo: {title: \"WHAT IS EXPLICIT CONSENT?\", content: \"For example, this could include...\"}\n        }\n    )\n    survey[23] = createNode(\n        {\n            id: 23,\n            type: NodeTypes.single,\n            content: \"Is the purpose for collecting personal information obvious?\",\n            options: [\n                {\n                    id: 2301,\n                    label: \"Yes\"\n                },\n                {\n                    id: 2300,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 23, optionId: 2300 }\n                    ],\n                    result: { questionId: 23, optionId: 2300, repo: \"some repo on question 23 No\" },\n                    todos: [{title: \"Todo Item 11\"}],\n                    nextQuestionId: 25\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 23, optionId: 2301 }\n                    ],\n                    result: { questionId: 23, optionId: 2301, repo: \"some repo on question 23 Yes\" },\n                    nextQuestionId: 25\n                }\n            ]\n        }\n    )\n    survey[24] = createNode(\n        {\n            id: 24,\n            type: NodeTypes.single,\n            content: \"Have you been required to provide personal information due to a court order or subpoena?\",\n            options: [\n                {\n                    id: 2401,\n                    label: \"Yes\"\n                },\n                {\n                    id: 2400,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 24, optionId: 2400 }\n                    ],\n                    result: { questionId: 24, optionId: 2400, repo: \"some repo on question 24 No\" },\n                    nextQuestionId: 26\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 24, optionId: 2401 }\n                    ],\n                    result: { questionId: 24, optionId: 2401, repo: \"some repo on question 24 Yes\" },\n                    nextQuestionId: 27\n                }\n            ]\n        }\n    )\n    survey[25] = createNode(\n        {\n            id: 25,\n            type: NodeTypes.single,\n            content: \"Do these people voluntarily provide their personal information?\",\n            options: [\n                {\n                    id: 2501,\n                    label: \"Yes\"\n                },\n                {\n                    id: 2500,\n                    label: \"No\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 25, optionId: 2500 }\n                    ],\n                    result: { questionId: 25, optionId: 2500, repo: \"some repo on question 25 No\" },\n                    todos: [{title: \"Todo Item 12\"}],\n                    nextQuestionId: 24\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 25, optionId: 2501 }\n                    ],\n                    response: [\"Good job!\"],\n                    result: { questionId: 25, optionId: 2501, repo: \"some repo on question 25 Yes\" },\n                    nextQuestionId: 24\n                }\n            ]\n        }\n    )\n    survey[26] = createNode(\n        {\n            id: 26,\n            type: NodeTypes.multi,\n            content: \"Select all the reasons you disclose personal information internally, including information from a Members Register. (Multiple choice, select all that apply).\",\n            options: [\n                {\n                    id: 2600,\n                    label: \"To register/call a general meeting\"\n                },\n                {\n                    id: 2601,\n                    label: \"To submit a member proposal\"\n                },\n                {\n                    id: 2602,\n                    label: \"To influence the voting of members\"\n                },\n                {\n                    id: 2603,\n                    label: \"Other reasons\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 26, optionId: 2603 }\n                    ],\n                    result: { questionId: 26, optionId: 2603, repo: \"some repo on question 27 Other reasons\" },\n                    todos: [{title: \"Todo Item 14\"}],\n                    nextQuestionId: 28\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    response: [\"Great!\"],\n                    result: { questionId: 26, optionId: 2601, repo: \"some repo on question 26\" },\n                    nextQuestionId: 28\n                }\n            ]\n        }\n    )\n    survey[27] = createNode(\n        {\n            id: 27,\n            type: NodeTypes.single,\n            content: \"Does your privacy policy explain that you may disclose personal information for legal reasons?\",\n            options: [\n                {\n                    id: 2701,\n                    label: \"Yes\"\n                },\n                {\n                    id: 2700,\n                    label: \"No\"\n                },\n                {\n                    id: 2702,\n                    label: \"NO PRIVACY POLICY YET\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 27, optionId: 2700 }\n                    ],\n                    result: { questionId: 27, optionId: 2700, repo: \"some repo on question 27 No\" },\n                    response: [\"Got it, adding this to your to-do list!\"],\n                    reminders: [{title: \"Todo Item 13\"}],\n                    nextQuestionId: 26\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 27, optionId: 2701 }\n                    ],\n                    result: { questionId: 27, optionId: 2701, repo: \"some repo on question 27 Yes\" },\n                    response: [\"Perfect!\"],\n                    nextQuestionId: 26\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 27, optionId: 2702 }\n                    ],\n                    response: [\"Okay, be sure to add this information to your privacy policy once you create it!\"],\n                    reminders: [{title: \"Todo Item 13\"}],\n                    result: { questionId: 27, optionId: 2702, repo: \"some repo on question 27 No PP\" },\n                    nextQuestionId: 26\n                }\n            ]\n        }\n    )\n    survey[28] = createNode(\n        {\n            id: 28,\n            type: NodeTypes.single,\n            content: \"Let’s talk about storing personal information! Select everyone who can access personal information.\",\n            options: [\n                {\n                    id: 2800,\n                    label: \"All employees\"\n                },\n                {\n                    id: 2801,\n                    label: \"All employees and volunteers\"\n                },\n                {\n                    id: 2802,\n                    label: \"A small number of authorized individuals\"\n                },\n                {\n                    id: 2803,\n                    label: \"No one\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 28, optionId: 2800 }\n                    ],\n                    result: { questionId: 28, optionId: 2800, repo: \"some repo on question 28 All\" },\n                    response: [\"Okay for small organizations. If you are a larger organization, you will want to reduce access to only a few individuals.\"],\n                    nextQuestionId: 29\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 28, optionId: 2801 }\n                    ],\n                    result: { questionId: 28, optionId: 2801, repo: \"some repo on question 28 small\" },\n                    response: [\"Perfect!\"],\n                    nextQuestionId: 29\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 28, optionId: 2802 }\n                    ],\n                    response: [\"Let’s change the access to a few designated individuals!\"],\n                    todos: [{title: \"Todo Item 15\"}],\n                    result: { questionId: 28, optionId: 2802, repo: \"some repo on question 28 volunteers\" },\n                    nextQuestionId: 29\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 28, optionId: 2803 }\n                    ],\n                    response: [\"Let’s change the access to a few designated individuals!\"],\n                    todos: [{title: \"Todo Item 15\"}],\n                    result: { questionId: 28, optionId: 2803, repo: \"some repo on question 28 no one\" },\n                    nextQuestionId: 29\n                }\n            ]\n        }\n    )\n    survey[29] = createNode(\n        {\n            id: 29,\n            type: NodeTypes.single,\n            content: \"Do you have policies and procedures to keep personal information secure?\",\n            options: [\n                {\n                    id: 2901,\n                    label: \"YES\"\n                },\n                {\n                    id: 2900,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 29, optionId: 2900 }\n                    ],\n                    result: { questionId: 29, optionId: 2900, repo: \"some repo on question 29 No\" },\n                    reminders: [{title: \"Todo Item 16\"}],\n                    response: [\"Be sure to keep personal information secure! Check your results at the end of the module to find more tips on securing personal information.\"],\n                    nextQuestionId: 30\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 29, optionId: 2901 }\n                    ],\n                    result: { questionId: 29, optionId: 2901, repo: \"some repo on question 29 Yes\" },\n                    response: [\"Good for you!\"],\n                    nextQuestionId: 30\n                }\n            ]\n        }\n    )\n    survey[30] = createNode(\n        {\n            id: 30,\n            type: NodeTypes.single,\n            content: \"Where do you store personal information?\",\n            options: [\n                {\n                    id: 3000,\n                    label: \"ON PAPER\"\n                },\n                {\n                    id: 3001,\n                    label: \"ON THE COMPUTER\"\n                },\n                {\n                    id: 3002,\n                    label: \"ON THE COMPUTER AND ON PAPER\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 30, optionId: 3000 }\n                    ],\n                    result: { questionId: 30, optionId: 3000, repo: \"some repo on question 30 paper\" },\n                    nextQuestionId: 33\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 30, optionId: 3001 }\n                    ],\n                    result: { questionId: 30, optionId: 3001, repo: \"some repo on question 30 paper/digital\" },\n                    nextQuestionId: 31\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 30, optionId: 3002 }\n                    ],\n                    result: { questionId: 30, optionId: 3002, repo: \"some repo on question 30 digital\" },\n                    nextQuestionId: 32\n                }\n            ]\n        }\n    )\n    survey[31] = createNode(\n        {\n            id: 31,\n            type: NodeTypes.single,\n            content: \"Do you keep your sensitive data encrypted?\",\n            options: [\n                {\n                    id: 3101,\n                    label: \"YES\"\n                },\n                {\n                    id: 3100,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 31, optionId: 3100 }\n                    ],\n                    result: { questionId: 31, optionId: 3100, repo: \"some repo on question 31 No\" },\n                    response: [\"This is a great way to keep data secure, added to your list\"],\n                    reminders: [{title: \"Todo Item 18\"}],\n                    nextQuestionId: 34\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 31, optionId: 3101 }\n                    ],\n                    result: { questionId: 31, optionId: 3101, repo: \"some repo on question 31 Yes\" },\n                    response: [\"Great!\"],\n                    nextQuestionId: 34\n                }\n            ]\n        }\n    )\n    survey[32] = createNode(\n        {\n            id: 32,\n            type: NodeTypes.single,\n            content: \"Do you keep your paper documents in a locked cabinet?\",\n            options: [\n                {\n                    id: 3201,\n                    label: \"YES\"\n                },\n                {\n                    id: 3200,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 32, optionId: 3200 }\n                    ],\n                    result: { questionId: 32, optionId: 3200, repo: \"some repo on question 32 No\" },\n                    response: [\"Lock those documents up!\"],\n                    todos: [{title: \"Todo Item 17\"}],\n                    nextQuestionId: 31\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 32, optionId: 3201 }\n                    ],\n                    result: { questionId: 32, optionId: 3201, repo: \"some repo on question 32 Yes\" },\n                    response: [\"Good job!\"],\n                    nextQuestionId: 31\n                }\n            ]\n        }\n    )\n    survey[33] = createNode(\n        {\n            id: 33,\n            type: NodeTypes.single,\n            content: \"Do you keep your paper documents in a locked cabinet?\",\n            options: [\n                {\n                    id: 3301,\n                    label: \"YES\"\n                },\n                {\n                    id: 3300,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 33, optionId: 3300 }\n                    ],\n                    result: { questionId: 33, optionId: 3300, repo: \"some repo on question 33 No\" },\n                    response: [\"Lock those documents up!\"],\n                    todos: [{title: \"Todo Item 17\"}],\n                    nextQuestionId: 39\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 33, optionId: 3301 }\n                    ],\n                    result: { questionId: 33, optionId: 3301, repo: \"some repo on question 33 Yes\" },\n                    response: [\"Good job!\"],\n                    nextQuestionId: 39\n                }\n            ]\n        }\n    )\n    survey[34] = createNode(\n        {\n            id: 34,\n            type: NodeTypes.single,\n            content: \"Is your digital content password protected?\",\n            options: [\n                {\n                    id: 3401,\n                    label: \"YES\"\n                },\n                {\n                    id: 3400,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 34, optionId: 3400 }\n                    ],\n                    result: { questionId: 34, optionId: 3400, repo: \"some repo on question 34 No\" },\n                    response: [\"Always use passwords to keep your digital content secure.\"],\n                    todos: [{title: \"Todo Item 19\"}],\n                    nextQuestionId: 36\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 34, optionId: 3401 }\n                    ],\n                    result: { questionId: 34, optionId: 3401, repo: \"some repo on question 34 Yes\" },\n                    nextQuestionId: 35\n                }\n            ]\n        }\n    )\n    survey[35] = createNode(\n        {\n            id: 35,\n            type: NodeTypes.single,\n            content: \"How often do you change your passwords?\",\n            options: [\n                {\n                    id: 3500,\n                    label: \"0-6 MONTHS\"\n                },\n                {\n                    id: 3501,\n                    label: \"6-12 MONTHS\"\n                },\n                {\n                    id: 3502,\n                    label: \"OVER A YEAR\"\n                },\n                {\n                    id: 3503,\n                    label: \"NEVER\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 35, optionId: 3500 }\n                    ],\n                    result: { questionId: 35, optionId: 3500, repo: \"some repo on question 35 0-6\" },\n                    response: [\"Awesome, keep it up!\"],\n                    nextQuestionId: 36\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 35, optionId: 3501 }\n                    ],\n                    result: { questionId: 35, optionId: 3501, repo: \"some repo on question 35 6-12\" },\n                    response: [\"Pretty good, try changing your passwords every 6 months.\"],\n                    nextQuestionId: 36\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    result: { questionId: 35, optionId: 3502, repo: \"some repo on question 35 over 1 year\" },\n                    response: [\"Change passwords every 6 months to keep your digital content secure.\"],\n                    reminders: [{title: \"Todo Item 20\"}],\n                    nextQuestionId: 36\n                }\n            ]\n        }\n    )\n    survey[36] = createNode(\n        {\n            id: 36,\n            type: NodeTypes.single,\n            content: \"Do you collect Digitally Created Personal Information (D.C.P.I.), such as information from website traffic?\",\n            options: [\n                {\n                    id: 3601,\n                    label: \"YES\"\n                },\n                {\n                    id: 3600,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 36, optionId: 3600 }\n                    ],\n                    result: { questionId: 36, optionId: 3600, repo: \"some repo on question 36 No\" },\n                    nextQuestionId: 38\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 36, optionId: 3601 }\n                    ],\n                    result: { questionId: 36, optionId: 3601, repo: \"some repo on question 36 Yes\" },\n                    nextQuestionId: 37\n                }\n            ],\n            extraInfo: {\n                title: \"WHAT IS D.C.P.I.?\",\n                content: \" Digitally created personal information includes location information, \" + \n                    \"including GPS data; device identifiers such as IP and MAC addresses; click stream data, \" +\n                    \"browser history, bookmarks; user generated social network data such as comments, ratings, \" +\n                    \"likes and dislikes, Twitter stream, or customer service interactions.\" \n            }\n        }\n    )\n    survey[37] = createNode(\n        {\n            id: 37,\n            type: NodeTypes.single,\n            content: \"Does your privacy policy include information about the D.C.P.I. you collect?\",\n            options: [\n                {\n                    id: 3701,\n                    label: \"YES\"\n                },\n                {\n                    id: 3700,\n                    label: \"NO\"\n                },\n                {\n                    id: 3702,\n                    label: \"NO PRIVACY POLICY YET\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 37, optionId: 3700 }\n                    ],\n                    result: { questionId: 37, optionId: 3700, repo: \"some repo on question 37 No\" },\n                    response: [\"Added to your list! Check out your results at the end to find suggested wording to add to your privacy policy.\"],\n                    reminders: [{title: \"Todo Item 21\"}],\n                    nextQuestionId: 38\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 37, optionId: 3701 }\n                    ],\n                    result: { questionId: 37, optionId: 3701, repo: \"some repo on question 37 Yes\" },\n                    response: [\"Great!\"],\n                    nextQuestionId: 38\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 37, optionId: 3702 }\n                    ],\n                    result: { questionId: 37, optionId: 3702, repo: \"some repo on question 37 No PP\" },\n                    response: [\"Be sure to include this when you make your privacy policy!\"],\n                    reminders: [{title: \"Todo Item 21\"}],\n                    nextQuestionId: 38\n                }\n            ]\n        }\n    )\n    survey[38] = createNode(\n        {\n            id: 38,\n            type: NodeTypes.single,\n            content: \"How often do you review your antivirus software?\",\n            options: [\n                {\n                    id: 3800,\n                    label: \"0-6 MONTHS\"\n                },\n                {\n                    id: 3801,\n                    label: \"6-12 MONTHS\"\n                },\n                {\n                    id: 3802,\n                    label: \"MORE THAN A YEAR\"\n                },\n                {\n                    id: 3803,\n                    label: \"NEVER\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 38, optionId: 3800 }\n                    ],\n                    result: { questionId: 38, optionId: 3800, repo: \"some repo on question 38 0-6\" },\n                    response: [\"Great!\"],\n                    nextQuestionId: 39\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 38, optionId: 3803 }\n                    ],\n                    result: { questionId: 38, optionId: 3803, repo: \"some repo on question 38 never\" },\n                    reminders: [{title: \"Todo Item 22\"}],\n                    response: [\"It’s a good idea to review your antivirus software every 6 months.\"],\n                    nextQuestionId: 39\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    result: { questionId: 38, optionId: 3802, repo: \"some repo on question 38\" },\n                    response: [\"Not bad, try to review once every 6 months!\"],\n                    nextQuestionId: 39\n                }\n            ]\n        }\n    )\n    survey[39] = createNode(\n        {\n            id: 39,\n            type: NodeTypes.single,\n            content: \"Do you have personal information that is no longer necessary for legal or business purposes?\",\n            options: [\n                {\n                    id: 3901,\n                    label: \"YES\"\n                },\n                {\n                    id: 3900,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 39, optionId: 3900 }\n                    ],\n                    result: { questionId: 39, optionId: 3900, repo: \"some repo on question 39 no\" },\n                    nextQuestionId: 42\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 39, optionId: 3901 }\n                    ],\n                    result: { questionId: 39, optionId: 3901, repo: \"some repo on question 39 yes\" },\n                    nextQuestionId: 40\n                }\n            ]\n        }\n    )\n    survey[40] = createNode(\n        {\n            id: 40,\n            type: NodeTypes.single,\n            content: \"How long are you keeping this information?\",\n            options: [\n                {\n                    id: 4000,\n                    label: \"LESS THAN 1 YEAR\"\n                },\n                {\n                    id: 4001,\n                    label: \"MORE THAN 1 YEAR\"\n                },\n                {\n                    id: 4002,\n                    label: \"PERMANENTLY\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 40, optionId: 4002 }\n                    ],\n                    result: { questionId: 40, optionId: 4002, repo: \"some repo on question 40 PERMANENTLY\" },\n                    response: [\"Not a good idea, let’s keep going to see what we should do with this information.\"],\n                    todos: [{title: \"Todo Item 23\"}],\n                    nextQuestionId: 42\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    result: { questionId: 40, optionId: 4001, repo: \"some repo on question 40\" },\n                    nextQuestionId: 41\n                }\n            ]\n        }\n    )\n    survey[41] = createNode(\n        {\n            id: 41,\n            type: NodeTypes.single,\n            content: \"Is the personal information you still have being used to make a decision that would affect this individual?\",\n            options: [\n                {\n                    id: 4101,\n                    label: \"YES\"\n                },\n                {\n                    id: 4100,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 41, optionId: 4100 }\n                    ],\n                    result: { questionId: 41, optionId: 4100, repo: \"some repo on question 41 no\" },\n                    response: [\"If the personal information has no relevance, it is time to destroy it.\"],\n                    todos: [{title: \"Todo Item 24\"}],\n                    nextQuestionId: 42\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 41, optionId: 4101 }\n                    ],\n                    result: { questionId: 41, optionId: 4101, repo: \"some repo on question 41 yes\" },\n                    response: [\"Okay, keep the information for one year after making the decision.\"],\n                    nextQuestionId: 42\n                }\n            ]\n        }\n    )\n    survey[42] = createNode(\n        {\n            id: 42,\n            type: NodeTypes.single,\n            content: \"How long do you keep your financial information?\",\n            options: [\n                {\n                    id: 4200,\n                    label: \"LESS THAN 7 YEARS\"\n                },\n                {\n                    id: 4201,\n                    label: \"7 YEARS\"\n                },\n                {\n                    id: 4202,\n                    label: \"MORE THAN 7 YEARS\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 42, optionId: 4200 }\n                    ],\n                    result: { questionId: 42, optionId: 4200, repo: \"some repo on question 42 4200\" },\n                    response: [\"Keep financial information for 7 years.\"],\n                    todos: [{title: \"Todo Item 25\"}],\n                    nextQuestionId: 43\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 42, optionId: 4201 }\n                    ],\n                    result: { questionId: 42, optionId: 4201, repo: \"some repo on question 41 4201\" },\n                    response: [\"Perfect!\"],\n                    nextQuestionId: 43\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 42, optionId: 4202 }\n                    ],\n                    result: { questionId: 42, optionId: 4202, repo: \"some repo on question 41 4202\" },\n                    response: [\"Destroy financial information after 7 years.\"],\n                    nextQuestionId: 43\n                }\n            ]\n        }\n    )\n    survey[43] = createNode(\n        {\n            id: 43,\n            type: NodeTypes.single,\n            content: \"How long does your organization keep relevant records?\",\n            options: [\n                {\n                    id: 4300,\n                    label: \"LESS THAN 10 YEARS\"\n                },\n                {\n                    id: 4301,\n                    label: \"10 YEARS\"\n                },\n                {\n                    id: 4302,\n                    label: \"10 YEARS, LONGER IF IT IS RELEVANT\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 43, optionId: 4300 }\n                    ],\n                    result: { questionId: 43, optionId: 4300, repo: \"some repo on question 43 4300\" },\n                    response: [\"Keep all records for at least 10 years!\"],\n                    todos: [{title: \"Todo Item 26\"}],\n                    nextQuestionId: 11,\n                    nextModuleId: 3\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 43, optionId: 4301 }\n                    ],\n                    result: { questionId: 43, optionId: 4301, repo: \"some repo on question 43 4301\" },\n                    response: [\"Good start - be sure to keep relevant records as long as they are relevant.\"],\n                    nextQuestionId: 11,\n                    nextModuleId: 3\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 43, optionId: 4302 }\n                    ],\n                    result: { questionId: 43, optionId: 4302, repo: \"some repo on question 43 4302\" },\n                    response: [\"Great!\"],\n                    nextQuestionId: 11,\n                    nextModuleId: 3\n                }\n            ],\n            extraInfo: {\n                title: \"WHAT IS RELEVANT?\",\n                content: \"Please write 1-2 sentences describing what relevant records are in this context\"\n            }\n        }\n    )\n\n\n    return survey;\n}\n\nfunction getSurvey_part3() {\n    let survey: NodeDictionary = {};\n    survey[11] = createNode(\n        {\n            id: 11,\n            type: NodeTypes.message,\n            content: \"A privacy policy governs the organizations use of individuals’ data, \" +\n                \"while a confidentiality policy covers keeping individuals’ data private so that unauthorized people cannot access it.\",\n            options: [],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [],\n                    nextQuestionId: 44\n                }\n            ]\n        }\n    );\n    survey[44] = createNode(\n        {\n            id: 44,\n            type: NodeTypes.single,\n            content: \"Does your organization have a separate confidentiality policy from your privacy policy?\",\n            options: [\n                {\n                    id: 4401,\n                    label: \"YES\"\n                },\n                {\n                    id: 4400,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 44, optionId: 4401 }\n                    ],\n                    result: { questionId: 44, optionId: 4401, repo: \"some repo on question 44 Yes\" },\n                    response: [\"Great!\"],\n                    nextQuestionId: 45\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 44, optionId: 4400 }\n                    ],\n                    result: { questionId: 44, optionId: 4400, repo: \"some repo on question 44 No\" },\n                    response: [\"Added to your to-do list!\"],\n                    reminders: [{title: \"Todo Item 27\"}],\n                    nextQuestionId: 47,\n                    nextModuleId: 4\n                }\n            ]\n        }\n    )\n    survey[45] = createNode(\n        {\n            id: 45,\n            type: NodeTypes.single,\n            content: \"Does your confidentiality policy outline who can access personal information?\",\n            options: [\n                {\n                    id: 4501,\n                    label: \"YES\"\n                },\n                {\n                    id: 4500,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 45, optionId: 4501 }\n                    ],\n                    result: { questionId: 45, optionId: 4501, repo: \"some repo on question 45 Yes\" },\n                    nextQuestionId: 46\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 45, optionId: 4500 }\n                    ],\n                    result: { questionId: 45, optionId: 4500, repo: \"some repo on question 45 No\" },\n                    response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\n                    \"Remember: the more hands on it; the more likely a breach.\"],\n                    reminders: [{title: \"Todo Item 28\"}],\n                    nextQuestionId: 47,\n                    nextModuleId: 4\n                }\n            ]\n        }\n    )\n    survey[46] = createNode(\n        {\n            id: 46,\n            type: NodeTypes.single,\n            content: \"Who has access to personal information?\",\n            options: [\n                {\n                    id: 4600,\n                    label: \"Everyone\"\n                },\n                {\n                    id: 4601,\n                    label: \"Many people\"\n                },\n                {\n                    id: 4602,\n                    label: \"Only one person\"\n                },\n                {\n                    id: 4603,\n                    label: \"A few people\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 46, optionId: 4602 }\n                    ],\n                    result: { questionId: 46, optionId: 4602, repo: \"some repo on question 46 one\" },\n                    response: [\"Pretty good! You could also give a couple more appropriate individuals access if this person needs support.\"],\n                    nextQuestionId: 47,\n                    nextModuleId: 4\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 46, optionId: 4603 }\n                    ],\n                    result: { questionId: 46, optionId: 4603, repo: \"some repo on question 46 few\" },\n                    response: [\"Awesome!\"],\n                    nextQuestionId: 47,\n                    nextModuleId: 4\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 46, optionId: 4600 }\n                    ],\n                    result: { questionId: 46, optionId: 4600, repo: \"some repo on question 46 everyone\" },\n                    response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\n                            \"Remember: the more hands on it; the more likely a breach. \"],\n                    reminders: [{title: \"Todo Item 29\"}],\n                    nextQuestionId: 47,\n                    nextModuleId: 4\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 46, optionId: 4601 }\n                    ],\n                    result: { questionId: 46, optionId: 4601, repo: \"some repo on question 46 many\" },\n                    response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\n                            \"Remember: the more hands on it; the more likely a breach. \"],\n                    reminders: [{title: \"Todo Item 29\"}],\n                    nextQuestionId: 47,\n                    nextModuleId: 4\n                }\n            ]\n        }\n    )\n    return survey;\n}\n\nfunction getSurvey_part4() {\n    let survey: NodeDictionary = {};\n    survey[47] = createNode(\n        {\n            id: 47,\n            type: NodeTypes.message,\n            content: \"Every organization needs to have one person who can answer questions about the collection, \" +\n                \"use and disclosure of data. This role is called the Privacy Officer.\",\n            options: [],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [],\n                    nextQuestionId: 48\n                }\n            ]\n        }\n    );\n    survey[48] = createNode(\n        {\n            id: 48,\n            type: NodeTypes.single,\n            content: \"Does your organization have a designated privacy officer?\",\n            options: [\n                {\n                    id: 4801,\n                    label: \"YES\"\n                },\n                {\n                    id: 4800,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 48, optionId: 4801 }\n                    ],\n                    result: { questionId: 48, optionId: 4801, repo: \"some repo on question 48 Yes\" },\n                    nextQuestionId: 49\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 48, optionId: 4800 }\n                    ],\n                    result: { questionId: 48, optionId: 4800, repo: \"some repo on question 48 No\" },\n                    response: [\"Added to your to-do list!\"],\n                    todos: [{title: \"Todo Item 30\"}],\n                    nextQuestionId: 50,\n                    nextModuleId: 5\n                }\n            ]\n        }\n    )\n    survey[49] = createNode(\n        {\n            id: 49,\n            type: NodeTypes.single,\n            content: \"Is your privacy officers contact information included in your privacy policy?\",\n            options: [\n                {\n                    id: 4901,\n                    label: \"YES\"\n                },\n                {\n                    id: 4900,\n                    label: \"NO\"\n                },\n                {\n                    id: 4902,\n                    label: \"NO PRIVACY POLICY YET\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 49, optionId: 4901 }\n                    ],\n                    result: { questionId: 49, optionId: 4901, repo: \"some repo on question 49 Yes\" },\n                    response: [\"Great!\"],\n                    nextQuestionId: 50,\n                    nextModuleId: 5\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 49, optionId: 4900 }\n                    ],\n                    result: { questionId: 49, optionId: 4900, repo: \"some repo on question 49 No\" },\n                    response: [\"Be sure to add this to your privacy policy!\"],\n                    reminders: [{title: \"Todo Item 31\"}],\n                    nextQuestionId: 50,\n                    nextModuleId: 5\n                },\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 49, optionId: 4902 }\n                    ],\n                    result: { questionId: 49, optionId: 4902, repo: \"some repo on question 49 No PP\" },\n                    response: [\"Add this to your privacy policy once you create it!\"],\n                    reminders: [{title: \"Todo Item 31\"}],\n                    nextQuestionId: 50,\n                    nextModuleId: 5\n                }\n            ]\n        }\n    )\n    return survey;\n}\nfunction getSurvey_part5() {\n    let survey: NodeDictionary = {};\n    survey[50] = createNode(\n        {\n            id: 50,\n            type: NodeTypes.message,\n            content: \"Sometimes an organization will get requests for information.\",\n            options: [],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [],\n                    nextQuestionId: 51\n                }\n            ]\n        }\n    );\n    survey[51] = createNode(\n        {\n            id: 51,\n            type: NodeTypes.message,\n            content: \"Explain what type of P.I. must be redacted\",\n            options: [],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [],\n                    nextQuestionId: 52\n                }\n            ]\n        }\n    );\n    survey[52] = createNode(\n        {\n            id: 52,\n            type: NodeTypes.single,\n            content: \"Does your privacy policy explain how someone could access the information you collect?\",\n            options: [\n                {\n                    id: 5201,\n                    label: \"YES\"\n                },\n                {\n                    id: 5200,\n                    label: \"NO\"\n                },\n                {\n                    id: 5202,\n                    label: \"NO PRIVACY POLICY YET\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 52, optionId: 5200 }\n                    ],\n                    response: [\"Check out the suggested wording in your results at the end of the module to add this to your privacy policy!\"],\n                    result: {questionId: 52, optionId: 5200, repo: \"some repo to question 52 no\"},\n                    reminders: [{title: \"Todo Item 32\"}],\n                    nextQuestionId: 53\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 52, optionId: 5201 }\n                    ],\n                    result: {questionId: 52, optionId: 5201, repo: \"some repo to question 52 yes\"},\n                    nextQuestionId: 53\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 52, optionId: 5202 }\n                    ],\n                    response: [\"Be sure to add this to your privacy policy once you create it!\"],\n                    result: {questionId: 52, optionId: 5202, repo: \"some repo to question 52 no pp\"},\n                    reminders: [{title: \"Todo Item 32\"}],\n                    nextQuestionId: 53\n                }\n            ]\n        }\n    );\n    survey[53] = createNode(\n        {\n            id: 53,\n            type: NodeTypes.single,\n            content: \"Have you received or expect to receive requests for information?\",\n            options: [\n                {\n                    id: 5301,\n                    label: \"YES\"\n                },\n                {\n                    id: 5300,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 53, optionId: 5300 }\n                    ],\n                    result: {questionId: 53, optionId: 5300, repo: \"some repo to question 53 no\"},\n                    nextQuestionId: 58,\n                    nextModuleId: 6\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 53, optionId: 5301 }\n                    ],\n                    result: {questionId: 53, optionId: 5301, repo: \"some repo to question 53 Yes\"},\n                    nextQuestionId: 54\n                }\n            ]\n        }\n    );\n    survey[54] = createNode(\n        {\n            id: 54,\n            type: NodeTypes.single,\n            content: \"Who is asking\",\n            options: [\n                {\n                    id: 5400,\n                    label: \"SOMEONE LOOKING FOR THEIR INFORMATION\"\n                },\n                {\n                    id: 5401,\n                    label: \"SOMEONE LOOKING FOR INFORMATION ABOUT OTHERS\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 54, optionId: 5400 }\n                    ],\n                    result: {questionId: 54, optionId: 5400, repo: \"some repo to question 54 A\"},\n                    nextQuestionId: 55,\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 54, optionId: 5401 }\n                    ],\n                    result: {questionId: 54, optionId: 5401, repo: \"some repo to question 54 B\"},\n                    nextQuestionId: 56\n                }\n            ]\n        }\n    );\n    survey[55] = createNode(\n        {\n            id: 55,\n            type: NodeTypes.single,\n            content: \"Are they requesting ..\",\n            options: [\n                {\n                    id: 5500,\n                    label: \"THEIR PERSONAL INFORMATION\"\n                },\n                {\n                    id: 5501,\n                    label: \"HOW THEIR PERSONAL INFORMATION IS BEING USED\"\n                },\n                {\n                    id: 5502,\n                    label: \"WHO HAS ACCESS TO THEIR PERSONAL INFORMATION\"\n                },\n                {\n                    id: 5503,\n                    label: \"OTHER INFORMATION\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 55, optionId: 5503 }\n                    ],\n                    result: {questionId: 55, optionId: 5503, repo: \"some repo to question 55 D\"},\n                    nextQuestionId: 56,\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    result: {questionId: 55, optionId: 5500, repo: \"some repo to question 55 B\"},\n                    response: [\"Great, they can have this information!\"],\n                    nextQuestionId: 58,\n                    nextModuleId: 6\n                }\n            ]\n        }\n    );\n    survey[56] = createNode(\n        {\n            id: 56,\n            type: NodeTypes.single,\n            content: \"Is the information ..\",\n            options: [\n                {\n                    id: 5600,\n                    label: \"Protected by S-C privilege?\"\n                },\n                {\n                    id: 5601,\n                    label: \"Likely to harm the competitive position of the organization\"\n                },\n                {\n                    id: 5602,\n                    label: \"Part of an investigation/appeal uncompleted\"\n                },\n                {\n                    id: 5603,\n                    label: \"Part of a mediation/arbitration\"\n                },\n                {\n                    id: 5604,\n                    label: \"None of the above\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 56, optionId: 5604 }\n                    ],\n                    result: {questionId: 56, optionId: 5604, repo: \"some repo to question 56 None\"},\n                    nextQuestionId: 57,\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    result: {questionId: 56, optionId: 5600, repo: \"some repo to question 56 B\"},\n                    response: [\"Don’t give out this information. If you plan to deny a request for information, consult a lawyer.\"],\n                    todos: [{title: \"Todo Item 33\"}],\n                    nextQuestionId: 58,\n                    nextModuleId: 6\n                }\n            ]\n        }\n    );\n    survey[57] = createNode(\n        {\n            id: 57,\n            type: NodeTypes.single,\n            content: \"Would disclosing this information.. \",\n            options: [\n                {\n                    id: 5700,\n                    label: \"Threaten the safety/harm of another person\"\n                },\n                {\n                    id: 5701,\n                    label: \"Cause grave harm to the requester\"\n                },\n                {\n                    id: 5702,\n                    label: \"Reveal personal information about another person\"\n                },\n                {\n                    id: 5703,\n                    label: \"None of the above\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.skip,\n                    answers: [\n                        { questionId: 57, optionId: 5703 }\n                    ],\n                    result: {questionId: 57, optionId: 5703, repo: \"some repo to question 57 None\"},\n                    response: [\"Proceed with caution. If you plan to deny a request for information, consult a lawyer.\"],\n                    nextQuestionId: 58,\n                    nextModuleId: 6\n                },\n                {\n                    type: TriggerType.default,\n                    answers: [],\n                    result: {questionId: 56, optionId: 5600, repo: \"some repo to question 56 B\"},\n                    response: [\"Don’t give out this information. If you plan to deny a request for information, consult a lawyer.\"],\n                    todos: [{title: \"Todo Item 33\"}],\n                    nextQuestionId: 58,\n                    nextModuleId: 6\n                }\n            ]\n        }\n    );\n    return survey;\n}\nfunction getSurvey_part6() {\n    let survey: NodeDictionary = {};\n    survey[58] = createNode(\n        {\n            id: 58,\n            type: NodeTypes.message,\n            content: \"Canada’s Anti-Spam Law (CASL) provides regulations around sending mass messages to members and the public.\",\n            options: [],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [],\n                    nextQuestionId: 59\n                }\n            ]\n        }\n    );\n    survey[59] = createNode(\n        {\n            id: 59,\n            type: NodeTypes.single,\n            content: \"Do you send messages to your members or the public?\",\n            options: [\n                {\n                    id: 5901,\n                    label: \"YES\"\n                },\n                {\n                    id: 5900,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 59, optionId: 5900 }\n                    ],\n                    result: {questionId: 59, optionId: 5900, repo: \"some repo to question 59 No\"},\n                    nextQuestionId: 65,\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 59, optionId: 5901 }\n                    ],\n                    result: {questionId: 59, optionId: 5901, repo: \"some repo to question 59 Yes\"},\n                    nextQuestionId: 60,\n                }\n            ]\n        }\n    );\n    survey[60] = createNode(\n        {\n            id: 60,\n            type: NodeTypes.single,\n            content: \"Are you a registered charity?\",\n            options: [\n                {\n                    id: 6001,\n                    label: \"YES\"\n                },\n                {\n                    id: 6000,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 60, optionId: 6000 }\n                    ],\n                    result: {questionId: 60, optionId: 6000, repo: \"some repo to question 60 No\"},\n                    nextQuestionId: 62,\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 60, optionId: 6001 }\n                    ],\n                    result: {questionId: 60, optionId: 6001, repo: \"some repo to question 60 Yes\"},\n                    nextQuestionId: 61,\n                }\n            ],\n            extraInfo: {\n                title: \"I’M NOT SURE\",\n                content: \"A registered charity .. \"\n            }\n        }\n    );\n    survey[61] = createNode(\n        {\n            id: 61,\n            type: NodeTypes.single,\n            content: \"What is your main reason for sending mass messages?\",\n            options: [\n                {\n                    id: 6100,\n                    label: \"FUNDRAISING\"\n                },\n                {\n                    id: 6101,\n                    label: \"OTHER\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 61, optionId: 6100 }\n                    ],\n                    result: {questionId: 61, optionId: 6100, repo: \"some repo to question 61 FUNDRAISING\"},\n                    nextQuestionId: 62,\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 61, optionId: 6101 }\n                    ],\n                    result: {questionId: 61, optionId: 6101, repo: \"some repo to question 60 other\"},\n                    response: [\"Heads up - charities are only allowed to send mass messages for fundraising!\"],\n                    todos: [{title: \"Todo Item 34\"}],\n                    nextQuestionId: 62,\n                }\n            ]\n        }\n    );\n    survey[62] = createNode(\n        {\n            id: 62,\n            type: NodeTypes.single,\n            content: \"Do you get consent before sending mass messages?\",\n            options: [\n                {\n                    id: 6201,\n                    label: \"YES\"\n                },\n                {\n                    id: 6200,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 62, optionId: 6200 }\n                    ],\n                    result: {questionId: 62, optionId: 6200, repo: \"some repo to question 62 No\"},\n                    response: [\"Make sure individuals “opt-in” to mass messages before adding them to your mailing list.\"],\n                    todos: [{title: \"Todo Item 35\"}],\n                    nextQuestionId: 63,\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 62, optionId: 6201 }\n                    ],\n                    result: {questionId: 62, optionId: 6201, repo: \"some repo to question 62 yes\"},\n                    response: [\"Great!\"],\n                    nextQuestionId: 63,\n                }\n            ]\n        }\n    );\n    survey[63] = createNode(\n        {\n            id: 63,\n            type: NodeTypes.single,\n            content: \"Do you include contact information in your mass messages?\",\n            options: [\n                {\n                    id: 6301,\n                    label: \"YES\"\n                },\n                {\n                    id: 6300,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 63, optionId: 6300 }\n                    ],\n                    result: {questionId: 63, optionId: 6300, repo: \"some repo to question 63 No\"},\n                    response: [\"Be sure you add this to all your mass messages!\"],\n                    todos: [{title: \"Todo Item 36\"}],\n                    nextQuestionId: 64,\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 63, optionId: 6301 }\n                    ],\n                    result: {questionId: 63, optionId: 6301, repo: \"some repo to question 63 yes\"},\n                    response: [\"Good job!\"],\n                    nextQuestionId: 64,\n                }\n            ]\n        }\n    );\n    survey[64] = createNode(\n        {\n            id: 64,\n            type: NodeTypes.single,\n            content: \"Do you include an “unsubscribe” option within your mass messages?\",\n            options: [\n                {\n                    id: 6401,\n                    label: \"YES\"\n                },\n                {\n                    id: 6400,\n                    label: \"NO\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 64, optionId: 6400 }\n                    ],\n                    result: {questionId: 64, optionId: 6400, repo: \"some repo to question 64 No\"},\n                    response: [\"Include this in all your mass messages!\"],\n                    todos: [{title: \"Todo Item 37\"}],\n                    nextQuestionId: 65,\n                },\n                {\n                    type: TriggerType.next,\n                    answers: [\n                        { questionId: 64, optionId: 6401 }\n                    ],\n                    result: {questionId: 64, optionId: 6401, repo: \"some repo to question 64 yes\"},\n                    response: [\"Perfect!\"],\n                    nextQuestionId: 65,\n                }\n            ]\n        }\n    );\n    survey[65] = createNode(\n        {\n            id: 65,\n            type: NodeTypes.single,\n            content: \"You completed module\",\n            options: [\n                {\n                    id: 6500,\n                    label: \"Go to the results\"\n                }\n            ],\n            triggers: [\n                {\n                    type: TriggerType.exit,\n                    answers: [\n                        {questionId: 65, optionId: 6500}\n                    ],\n                    nextQuestionId: -1\n                }\n            ]\n        }\n    )\n    return survey;\n}\n\nfunction getModules() {\n    let modules: { [key: number]: Module } = {};\n    modules[1] = { name: \"Privacy Policy\", nodes: getSurvey_part1() };\n    modules[2] = { name: \"Personal Info\", nodes: getSurvey_part2()};\n    modules[3] = { name: \"Confidentiality\", nodes: getSurvey_part3()};\n    modules[4] = { name: \"Privacy Officer\", nodes: getSurvey_part4()};\n    modules[5] = { name: \"Requests\", nodes: getSurvey_part5()};\n    modules[6] = { name: \"Requests\", nodes: getSurvey_part6()};\n    return modules;\n}\n\n\nexport {\n    getSurvey,\n    getModules\n}","import React from \"react\";\nimport botAvator from \"../../../Assets/img/botavator.svg\"\n\nexport default function ChatbotMessage(props: any) {\n    return (\n        <div className=\"chat-block bot\">\n            <div className=\"chat-avatar\">\n                <img src={botAvator} alt=\"chatbot avator\" />\n            </div>\n            <div className=\"bubble white round\">{props.content}</div>\n        </div>\n    )\n}\n\n","import React from \"react\";\n\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Button from '@material-ui/core/Button';\n\n\nexport default function UserMessage(props: any) {\n    const options = props.message.options;\n    const questionId = props.message.id;\n    const extraOption = props.message.extraInfo;\n    const optionItems = options.map((option: any) =>\n        <ListItem className=\"nav-list-item\" id={option.id} key={option.id}>\n            <Button className={props.message.selectedOptionId === option.id ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleSelectOptions(questionId, option.id)}>{option.label}</Button>\n        </ListItem>\n    );\n    const extraOptionItem =\n        extraOption ?\n            (<ListItem className=\"nav-list-item\">\n                <Button className={props.message.showExtraInfo ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleShowExtraInfo(questionId)}>{extraOption.title}</Button>\n            </ListItem>) : null\n\n    return (\n        <div className=\"chat-block user\">\n            <div className=\"bubble round\">\n                <List>\n                    {optionItems}\n                    {extraOptionItem}\n                </List>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\n\nimport ChatbotMessage from './ChatbotMessage'\nimport UserMessage from \"./UserMessage\";\n\nexport default function Chat(props: any) {\n    const messageOptions = props.messages.map((message: any, key: any) => {\n        if (message.content) {\n            return (\n                <div key={key}>\n                    <ChatbotMessage content={message.content}></ChatbotMessage>\n                    {message.options && message.options.length > 0 && <UserMessage message={message} handleShowExtraInfo={props.handleShowExtraInfo} handleSelectOptions={props.handleSelectOptions}></UserMessage>}\n                    {message.response && message.response.length > 0 &&\n                        message.response.map((res: any, key: any) => {\n                            return (<ChatbotMessage content={res} key={key}></ChatbotMessage>)\n                        })}\n                    {message.showExtraInfo && <ChatbotMessage content={message.extraInfo.content}></ChatbotMessage>}\n                </div>\n            )\n        }\n        return null;\n    });\n\n    return (\n        <div className=\"content-container\">\n            <div className=\"chat-area\" id=\"chatbot-scroller\">\n                {messageOptions}\n            </div>\n        </div>\n    )\n\n\n}\n\n\n\n\n\n\n","import React from \"react\";\nimport { List, ListItem } from \"@material-ui/core\";\n\nexport default function ToDoSection(props: any) {\n    const { todoList, reminderList } = props;\n    return (\n        <div className=\"chat todo-container round grey\">\n            <div className=\"chat donow-container round white\">\n                <div className=\"donow-titile-box\">\n                    <div className=\"container\">\n                        <span>DO NOW</span>\n                    </div>\n                </div>\n                <div className=\"list-container \">\n                    <List>\n                        {todoList.map((item: any, key: any) => {\n                            return (<ListItem key={key}>\n                                <div className=\"todo-item-bullet\"/>\n                                <span className= \"item-label\" >{item.title}</span>\n                            </ListItem>)\n                        })} \n                    </List>\n                </div>\n            </div>\n            <div className=\"chat dolater-container round white\">\n                <div className=\"dolater-titile-box\">\n                    <div className=\"container\">\n                        <span>DO LATER</span>\n                    </div>\n                </div>\n                <div className=\"list-container \">\n                    <List>\n                        {reminderList.map((item: any, key: any) => {\n                            return (<ListItem key={key}>\n                               <div className=\"reminder-item-bullet\"/>\n                                <span className= \"item-label\" >{item.title}</span>\n                            </ListItem>)\n                        })}\n                    </List>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { Answer } from './data'\nimport React from 'react';\n\nexport interface Item {\n    title: string\n}\nexport interface Result {\n    questionId: number,\n    optionId: number,\n    repo: string\n}\nexport interface ModuleResult {\n    name: string,\n    todos: Array<Item>,\n    reminders: Array<Item>,\n    results: Array<Result>,\n    path: Array<Answer>\n}\n// Context: record all infomation would be used for result page\n// results: the repo for each answered question. \n//          Since every result item related to a specific option of a question,\n//          it should record both questionId and optionId that can be refered to.\n// path: should record both questionId and optionID of passed node. So make it a Answer array.\n//       may be can only keep the \"results\" feild?\n// Consider: how to split results of different sub-modules?\nexport interface Context {\n    modules: {[key: number]: ModuleResult};\n    todos?: Array<Item>;\n    reminders?: Array<Item>;\n}\n\n// Context data generating functions. Only for testing\nfunction getPath() {\n    let pathList: Array<Answer> = [];\n    pathList.push({ questionId: 1, optionId: 100 });\n    pathList.push({ questionId: 3, optionId: 300 });\n    pathList.push({ questionId: 4, optionId: 401 });\n    return pathList;\n}\n\nfunction getTodoList() {\n    let todoList: Array<Item> = [];\n    todoList.push({ title: \"Create a privacy policy\" });\n    todoList.push({ title: \"Review social media terms of service\" });\n    todoList.push({ title: \"Outline personal info access \" });\n    todoList.push({ title: \"Train employees on privacy policies\" });\n    return todoList;\n}\n\nfunction getReminders() {\n    let reminderList: Array<Item> = [];\n    reminderList.push({ title: \"Only use mass messages for fundraising\" });\n    reminderList.push({ title: \"Get consent before sending mass messages\" });\n    reminderList.push({ title: \"Lorem ipsum dolor sit amet\" });\n    return reminderList;\n}\n\nfunction getResultList() {\n    let resultList: Array<Result> = [];\n    resultList.push({ questionId: 1, optionId: 100, repo: \"result repo no 1\" });\n    resultList.push({ questionId: 3, optionId: 300, repo: \"result repo no 3\" });\n    resultList.push({ questionId: 4, optionId: 401, repo: \"result repo no 4\" });\n    return resultList;\n}\n\nexport function getContext() {\n    let path = getPath();\n    let todos = getTodoList();\n    let reminders = getReminders();\n    let results = getResultList();\n    let module = { name: \"Privacy Policy\", path: path, todos: todos, reminders: reminders, results: results };\n    let context: Context = { modules: { 1: module } };\n    return context;\n}\n\n// default context\nconst context:Context = {\n    modules:{},\n    todos: [],\n    reminders: []\n};\n\nexport const ResultContext = React.createContext({\n    context: context,\n    updateContext: (id: number, contextItm: any) => { }\n})\n\nexport class ResultContextProvider extends React.Component {\n\n\n    updateContext = (id: number, contextItem: any) => {\n        let context = this.state.context;\n        if (context.modules[id]) { // if current module already exist in result context\n            context.modules[id].todos = context.modules[id].todos.concat(contextItem.todos);\n            context.modules[id].reminders = context.modules[id].reminders.concat(contextItem.reminders);\n            context.modules[id].results.push(contextItem.result);\n            context.modules[id].path.push(contextItem.path);\n        } else {\n            context.modules[id] = {\n                name: contextItem.name,\n                todos: contextItem.todos,\n                reminders: contextItem.reminders,\n                results: [contextItem.result],\n                path: [contextItem.path]\n            }; // if module does not exist\n        }\n        context.todos = context.todos?.concat(contextItem.todos);\n        context.reminders = context.reminders?.concat(contextItem.reminders);\n        this.setState({ context: context})\n    }\n    state = {\n        context: context,\n        updateContext: this.updateContext\n    }\n\n    render() {\n        return (\n            <ResultContext.Provider value={this.state}>\n                {this.props.children}\n            </ResultContext.Provider>\n        )\n    }\n}\n\nexport const ResultContextConsumer = ResultContext.Consumer\n\n// export const ResultContext = React.createContext(\n//     context,\n//     updateContext: (id: number, contextItm: any) => {}\n// )","import React from 'react';\nimport './ChatbotStyle.css';\nimport Header from '../../../components/Header/Header'\nimport HeaderLinks from \"../../../components/Header/HeaderLink\"\nimport ProgressBar from \"./ProgressBar\";\nimport Chat from \"./Chat\";\nimport ToDoSection from \"./ToDoSection\";\nimport { getSurvey, getModules, NodeTypes, TriggerType, Trigger } from \"../../../data/data\";\nimport { ResultContext, Context } from '../../../data/context';\nimport history from '../../../history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport banrdIcon from \"../../../Assets/img/botavator.svg\";\n\ninterface IState {\n    currentMessage: any,\n    currentModuleId: any,\n    questionPath: any,\n    messageList: any[],\n    todoList: any[],\n    reminderList: any[],\n    context: Context\n}\n\nexport default class ChatbotPage extends React.Component {\n    survey: any;\n    modules: any;\n    state: IState;\n\n    constructor(props: any) {\n        super(props);\n        this.survey = getSurvey();\n        this.modules = getModules();\n        this.state = {\n            currentMessage: this.survey[1],\n            currentModuleId: 1,\n            questionPath: [],\n            messageList: [],\n            todoList: [],\n            reminderList: [],\n            context: this.context\n        };\n        this.handleSelectOptions = this.handleSelectOptions.bind(this);\n        this.handleShowExtraInfo = this.handleShowExtraInfo.bind(this);\n    }\n\n    componentDidMount() {\n        this.displayNextMsg(1);\n    }\n\n    public scrollToBottom() {\n        let chatbotScorller = document.getElementById('chatbot-scroller') as HTMLElement;\n        chatbotScorller.scrollTop = chatbotScorller.scrollHeight;\n    }\n\n    public displayNextMsg(qId: number) {\n        const nextMessage = this.modules[this.state.currentModuleId].nodes[qId];\n        this.state.messageList.push(nextMessage);\n        this.setState((state: IState, props) => {\n            return {\n                currentMessage: nextMessage,\n                messageList: state.messageList\n            }\n        },() => {\n            this.scrollToBottom();\n        })\n        if (nextMessage.type === NodeTypes.message) { // if next message type is general message, auto display next one\n            this.setState((state: IState, props) => {\n                return {\n                    currentModuleId: this.checkModule(nextMessage.triggers[0])\n                }\n            })\n            this.displayNextMsg(nextMessage.triggers[0].nextQuestionId);\n        }\n        \n    }\n\n    public handleSelectOptions(questionId: any, selectedOptionId: any) { // this method will need to be refactored and the functionality will need to be extended later.\n        if (this.isInactiveQuestion(questionId)) {\n            return;\n        }\n\n        // add the result item to the question path\n        let resultItem: any = {};\n        resultItem.path = { questionId: this.state.currentMessage.id, optionId: selectedOptionId };\n        this.state.questionPath.push(resultItem.path); // FIXME modifies state outside of setstate\n\n        // why are we using some?\n        this.state.currentMessage.triggers.forEach((trigger: Trigger) => {\n            if (trigger.type === TriggerType.default) { // why do we need default?\n                return false; // changed this to return false to make it clear that no trigger ends up running. \n            }\n\n            trigger.answers.forEach((answer: any, index: any) => { // check path  \n                const pathLength = this.state.questionPath.length - 1;\n                const { optionId, questionId } = this.state.questionPath[pathLength - index];\n                if (this.isCorrectTrigger(answer, questionId, optionId)) {\n                    if (trigger.type === TriggerType.exit) {\n                        history.push('/result')\n                    } else {\n                        // add to result\n                        let newTodoList = trigger.todos ? trigger.todos : []\n                        let newReminderList = trigger.reminders ? trigger.reminders : []\n                        resultItem.name = \"Privacy Policy\";\n                        resultItem.todos = newTodoList;\n                        resultItem.reminders = newReminderList; // change it to reminderlist\n                        resultItem.result = trigger.result;\n                        this.context.updateContext(this.state.currentModuleId, resultItem);\n\n                        this.setState((state: IState, props: any) => {\n                            state.currentMessage.selectedOptionId = selectedOptionId;\n                            state.messageList[this.state.messageList.length - 1].response = trigger.response; // add response, may need to be rewrite\n                            return {\n                                currentMessage: state.currentMessage,\n                                currentModuleId: this.checkModule(trigger),\n                                questionPath: state.questionPath,\n                                todoList: state.todoList.concat(newTodoList),\n                                reminderList: state.reminderList.concat(newReminderList)\n                            }\n                        }, () => this.displayNextMsg(trigger.nextQuestionId));\n                    }\n                }\n            })\n        })\n\n        \n    }\n\n    public handleShowExtraInfo(questionId: any) {\n        if (this.isInactiveQuestion(questionId)) {\n            return;\n        }\n        this.setState((state: IState, props: any) => {\n            const repeatMessage = cloneDeep(state.currentMessage);\n            state.currentMessage.showExtraInfo = true;\n            return {\n                currentMessage: repeatMessage,\n                messageList: [...state.messageList, repeatMessage]\n            }\n        });\n    }\n\n    public checkModule(trigger: Trigger) {\n        let moduleId = this.state.currentModuleId;\n        switch (trigger.type) {\n            case TriggerType.skip:\n                moduleId = trigger.nextModuleId;\n                break;\n            default:\n        }\n        return moduleId;\n    }\n\n    public isCorrectTrigger(answer: any, currentQuestionId: any, currentOptionId: any) {\n        return answer.optionId === currentOptionId && answer.questionId === currentQuestionId\n    }\n\n    private isInactiveQuestion(questionId: number) {\n        return questionId !== this.state.currentMessage.id\n    }\n\n    render() {\n        console.log(\"messagelist: \" + JSON.stringify(this.state.messageList))\n        return (\n            <div className=\"full-screen-container grey chatbot-page\">\n                <Header\n                    brand= {banrdIcon}\n                    brandName = \"LSALT 2.0 |\"\n                    toolTitle=\"Non-Profit Self Assessment\"\n                    fixed\n                    color=\"white\"\n                    rightLinks={<HeaderLinks />}\n                    absolute\n\n                />\n                <div className=\"main-container\">\n                    <ProgressBar ></ProgressBar>\n                    <Chat\n                        messages={this.state.messageList}\n                        handleShowExtraInfo={this.handleShowExtraInfo}\n                        handleSelectOptions={this.handleSelectOptions}></Chat>\n                    <ToDoSection\n                        todoList={this.state.todoList}\n                        reminderList={this.state.reminderList}></ToDoSection>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nChatbotPage.contextType = ResultContext;\n\n","import React from \"react\";\nimport { Tabs, Tab } from \"@material-ui/core\";\nimport './TabNatStyle.css';\n\nexport default function TabNav(props: any) {\n    const { tabList } = props;\n    const [value, setValue] = React.useState(0);\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n    console.log(tabList);\n    const tabs = tabList.map((tab: any, i: any) => {\n        if (tab.title) {\n            return <Tab label={tab.title} key={i} className=\"tab\" />\n        }\n        return true; // FIXME adding this for now to quiet the compiler warnings\n    });\n    return (\n        <div className=\"container\">\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"fullWidth\" className=\"tab-nav\">\n                {tabs}\n            </Tabs>\n            {tabList.map((prop: any, key: any) => {\n                if (key === value) {\n                    return <div key={key} className=\"container\">{prop.tabContent}</div>;\n                }\n                return null;\n            })}\n        </div>\n\n    );\n}\n","import React from \"react\";\nimport { Typography, List, ListItem, ListItemSecondaryAction, Button } from \"@material-ui/core\";\nfunction TodoList(props: any) {\n    const { todoList } = props;\n    return (\n        <div className=\"list-container round\">\n            <List>\n                {todoList.map((item: any, key: any) => {\n                    return (<ListItem className=\"list-item\" key={key}>\n                       <div className=\"todo-item-bullet\"/>\n                        <span className= \"item-label\" >{item.title}</span>\n                        <ListItemSecondaryAction>\n                            <div className=\"btn-group\">\n                                <Button variant=\"outlined\">more info</Button>\n                                {/* <Button variant=\"contained\" color=\"primary\">create now</Button> */}\n                            </div>\n                        </ListItemSecondaryAction>\n                    </ListItem>)\n                })}\n            </List>\n        </div>\n    );\n}\n\nfunction ReminderList(props: any) {\n    const { reminderList } = props;\n    return (\n        <div className=\"list-container \">\n            <List>\n                {reminderList.map((item: any, key: any) => {\n                    return (<ListItem key={key} className=\"list-item\">\n                        <div className=\"reminder-item-bullet\"/>\n                        <span className= \"item-label\" >{item.title}</span>\n                         <ListItemSecondaryAction>\n                            <div className=\"btn-group\">\n                                <Button variant=\"outlined\">more info</Button>\n                                {/* <Button variant=\"contained\" color=\"primary\">create now</Button> */}\n                            </div>\n                        </ListItemSecondaryAction>\n                    </ListItem>)\n                })}\n            </List>\n        </div>\n    );\n}\n\n\nexport default function Overview(props: any) {\n    const { context } = props;\n    return (\n        <div className=\"overview-container\">\n            <div className=\"result todo-container\">\n                <div className=\"title-container\">\n                    <Typography variant=\"h4\" component=\"h4\" className=\"title bold\">\n                        <span className=\"title\">DO NOW</span>\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"span\">\n                    Take Care of the task on this list ASAP. This might put you in legal risk\n                    </Typography>\n                </div>\n                <TodoList todoList={context.todos}></TodoList>\n            </div>\n            <div className=\"result reminder-container\">\n                <div className=\"title-container\">\n                    <Typography variant=\"h4\" component=\"h4\" className=\"title bold\">\n                        <span className=\"title\">Do Later</span>\n                    </Typography>\n                </div>\n                <ReminderList reminderList={context.reminders}></ReminderList>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Typography, Link } from \"@material-ui/core\";\nimport { Result } from \"../../../../data/context\";\nexport default function QuestionRepo(props: any) {\n    const { resultList, questionList } = props;\n    console.log(questionList);\n    return (\n        <div className=\"repo-container\">\n            {resultList.map((result: Result, key: any) => {\n                return (\n                    <div className=\"repo-item\" key={key}>\n\n                        <div className=\"question-container\">\n                            <Typography variant=\"body2\" component=\"p\" className=\"title\" gutterBottom>\n                                {questionList[result.questionId].content}\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                because you answered: {questionList[result.questionId].options.find((opt: { id: number; }) => opt.id === result.optionId) ?.label}\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\" className=\"link\" >\n                                <Link>Change my answer</Link>\n                            </Typography>\n                        </div>\n                        <div className=\"info-container\">\n                            <Typography variant=\"body2\" component=\"p\" className=\"title\" gutterBottom>\n                                {result.repo}\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\" className=\"link\" >\n                                <Link>Learn more</Link>\n                            </Typography>\n                        </div>\n                    </div>\n                )\n            })}\n\n        </div>\n    );\n}\n","import React from \"react\";\nimport TabNav from \"../../../../components/TabNav/TabNav\";\nimport Overview from \"./Overview\";\nimport QuestionRepo from \"./QuestionRepo\";\nimport {getModules} from \"../../../../data/data\";\nexport default function ResultDetail(props: any) {\n    console.log(props.context);\n    const survey = getModules();\n    // const context = getContext();\n    const { context } = props;\n    console.log(context.modules[1]);\n    function getTabList() {\n        let tabList = [];\n        tabList.push({\n            title: \"OUTCOME\", tabContent: <Overview context={context}/>\n        })\n        if (context.modules) {\n            Object.keys(context.modules).forEach((key:any) => {\n                tabList.push({\n                    title: context.modules[key].name, tabContent: <QuestionRepo questionList={survey[key].nodes}  resultList={context.modules[key].results}/>\n                })\n            })\n        }\n        return tabList;\n    }\n    const tabList = getTabList();\n    return (\n        <div className=\"result-detail-container\">\n            <TabNav \n            tabList = {tabList}\n            ></TabNav>\n        </div>\n    );\n}\n","import React from \"react\";\nimport Header from \"../../../components/Header/Header\";\nimport HeaderLinks from \"../../../components/Header/HeaderLink\";\nimport ResultDetail from \"./Detail/ResultDetail\";\nimport { ResultContextConsumer } from \"../../../data/context\";\nimport \"./ResultStyle.css\";\nimport banrdIcon from \"../../../Assets/img/botavator.svg\";\n\n\nexport default function ResultPage() {\n    return (\n        <div className=\"full-screen-container white result-page\">\n            <Header\n                brand={banrdIcon}\n                brandName = \"LSALT 2.0 | \"\n                toolTitle=\"Non-profit Self Assessment\"\n                fixed\n                color=\"white\"\n                rightLinks={<HeaderLinks />}\n                absolute\n\n            />\n            <div className=\"main-container\">\n               \n                <ResultContextConsumer>\n                    {({ context }) => (\n                        <ResultDetail context={context}></ResultDetail>\n                    )}\n                </ResultContextConsumer>\n            </div>\n            {/* <Footer></Footer> */}\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Router, Route, Switch } from 'react-router-dom';\nimport history from './history';\nimport ChatbotPage from \"./containers/Assessment/Chatbot/ChatbotPage\";\nimport ResultPage from \"./containers/Assessment/Result/ResultPage\";\nimport { ResultContextProvider } from '././data/context'\nimport './App.css';\nimport './components/common.css';\n\n\nconst App = () => {\n  return (\n    <Router history={history}>\n      <ResultContextProvider>\n        <Switch>\n          <Route path=\"/assessment\" component={ChatbotPage} />\n          <Route path=\"/result\" component={ResultPage} />\n          <Route path=\"/\" component={ChatbotPage} />\n        </Switch>\n      </ResultContextProvider>\n    </Router>\n  );\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/botavator.308830c4.svg\";"],"sourceRoot":""}