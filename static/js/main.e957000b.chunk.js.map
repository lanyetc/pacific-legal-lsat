{"version":3,"sources":["history.tsx","components/Header/Header.tsx","components/Header/HeaderLink.tsx","containers/Assessment/Chatbot/ProgressBar.tsx","model/Message.tsx","containers/Assessment/Chatbot/ChatbotMessage.tsx","model/Option.tsx","model/ResponseItem.tsx","model/Trigger.tsx","model/SingleSelectQuestion.tsx","model/MultiSelectQuestion.tsx","model/ResponseMatcher.tsx","model/AutoPlayMessage.tsx","model/MessageFactory.tsx","model/ResponsePath.tsx","containers/Assessment/Chatbot/UserMessage.tsx","containers/Assessment/Chatbot/Chat.tsx","containers/Assessment/Chatbot/ToDoSection.tsx","data/mod2.tsx","data/privacyPolicyModule.tsx","data/antiSpamModule.tsx","data/privacyOfficerModule.tsx","data/requestsForInformationModule.tsx","data/data.tsx","data/context.tsx","containers/Assessment/Chatbot/ChatbotPage.tsx","components/TabNav/TabNav.tsx","containers/Assessment/Result/Detail/Overview.tsx","containers/Assessment/Result/Detail/QuestionRepo.tsx","containers/Assessment/Result/Detail/ResultDetail.tsx","containers/Assessment/Result/ResultPage.tsx","App.tsx","serviceWorker.ts","index.tsx","Assets/img/botavator.svg"],"names":["createHistory","Header","props","React","useState","mobileOpen","setMobileOpen","rightLinks","leftLinks","brand","toolTitle","brandName","brandComponent","className","src","alt","AppBar","Toolbar","undefined","Hidden","smDown","implementation","mdUp","IconButton","color","aria-label","onClick","defaultProp","HeaderLinks","List","ListItem","Button","ProgressBar","MessageType","ChatbotMessage","botAvator","content","Message","responseMatcher","_id","_content","_options","_triggers","_defaultTriggerId","_extraInfo","i","this","id","responsePath","triggers","trigger","triggerExpectedResponses","expectedResponses","matchOptions","defaultTrigger","getDefaultTrigger","Error","Option","_label","OptionFactory","optionDatas","options","forEach","data","label","push","ResponseItem","_messageId","_optionIds","optionId","optionIds","indexOf","ResponseItemFactory","responseItemData","messageId","Trigger","_expectedResponses","_action","_resultReport","_todo","_reminder","_reply","TriggerFactory","triggerDatas","action","resultReport","todo","reminder","reply","createResponseItemFromData","triggerData","SingleSelectQuestion","defualtTriggerId","extraInfo","MultiSelectQuestion","MatchFullResponse","expectedResponse","findMessageResponse","getMessageOptions","findResponseOption","MatchPartialResponse","AutoPlayMessage","MessageFactory","console","log","type","defaultTriggerId","createTriggersFromData","createOptionsFromData","singleSelect","matcher","multiSelect","autoPlayMessage","ResponsePath","_responseList","_responseMap","responseMap","responseItem","responseList","UserMessage","userOptionComponent","message","selectedOptionIds","showExtraInfo","questionId","extraOptionContent","optionItems","generateExtraOptionComponent","handleShowExtraInfo","title","map","option","key","includes","handleMultiSelectOptions","handleMultiSelectSubmit","handleSelectOptions","Chat","messageOptions","displayedMessages","displayedMessage","length","ToDoSection","todoList","reminderList","item","module2","nextQuestionId","nextModuleId","privacyPolicyModule","antiSpamModule","privacyOfficerModule","requestsForInformationModule","getModules","1","name","nodes","generateSurveyDialogue","2","3","7","8","moduleData","survey","question","newMessage","createMessageFromData","error","defaultContext","moduleResults","todos","reminders","ResultContext","createContext","context","updateContext","contextItm","ResultContextProvider","contextItem","state","result","results","path","setState","Provider","value","children","Component","ResultContextConsumer","Consumer","ChatbotPage","modules","masterModule","concat","getSurvey","currentMessage","currentModuleId","handleSingleSelectResponse","bind","handleMultiSelectClick","getNextAction","displayNextMessage","moduleId","next","nextMessage","scrollToBottom","history","addResponseItem","lastMessageIndex","messageList","selectedOptionId","isInactiveQuestion","markOptionIdSelected","isEmptySelection","lastMessage","processSelectedOptions","updateResponsePath","findTrigger","resultItem","updateState","last","repeatMessage","cloneDeep","chatbotScroller","document","getElementById","scrollTop","scrollHeight","exception","answer","currentQuestionId","currentOptionId","banrdIcon","fixed","absolute","contextType","TabNav","tabList","setValue","tabs","tab","Tab","Tabs","onChange","event","newValue","variant","prop","tabContent","TodoList","ListItemSecondaryAction","ReminderList","Overview","Typography","component","QuestionRepo","resultList","questionList","gutterBottom","find","opt","Link","repo","ResultDetail","Object","keys","getTabList","ResultPage","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e957000b.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory';\r\n\r\nexport default createHistory();","import React from \"react\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// @material-ui/core components\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n// @material-ui/icons\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport './HeaderStyle.css'\r\nimport '../common.css'\r\n\r\n\r\nexport default function Header(props: { color: any; rightLinks: any; leftLinks: any; brand: string; brandName:string; toolTitle: string; fixed: boolean; absolute: boolean; }) {\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const { rightLinks, leftLinks, brand, toolTitle, brandName } = props;\r\n\r\nconst brandComponent = <div><img className=\"navBrand\" src={brand} alt=\"brand icon\" /><span className=\"brandTitle\">{brandName}</span><span className=\"navTitle\">{toolTitle}</span></div>;\r\n  return (\r\n    <AppBar className=\"appBar white\">\r\n      <Toolbar className=\"navContainer\">\r\n        {leftLinks !== undefined ? { brandComponent } : null}\r\n        <div className=\"flex\">\r\n          {leftLinks !== undefined ? (\r\n            <Hidden smDown implementation=\"css\">\r\n              {leftLinks}\r\n            </Hidden>\r\n          ) : (\r\n              brandComponent\r\n            )}\r\n        </div>\r\n        <Hidden smDown implementation=\"css\">\r\n          {rightLinks}\r\n        </Hidden>\r\n        <Hidden mdUp>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerToggle}\r\n          >\r\n            <Menu />\r\n          </IconButton>\r\n        </Hidden>\r\n      </Toolbar>\r\n      {/* <Hidden mdUp implementation=\"js\">\r\n        <Drawer\r\n          variant=\"temporary\"\r\n          anchor={\"right\"}\r\n          open={mobileOpen}\r\n          classes={{\r\n            paper: classes.drawerPaper\r\n          }}\r\n          onClose={handleDrawerToggle}\r\n        >\r\n          <div className={classes.appResponsive}>\r\n            {leftLinks}\r\n            {rightLinks}\r\n          </div>\r\n        </Drawer>\r\n      </Hidden> */}\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nHeader.defaultProp = {\r\n  color: \"white\"\r\n};\r\n\r\nHeader.propTypes = {\r\n  color: PropTypes.oneOf([\r\n    \"primary\",\r\n    \"info\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"transparent\",\r\n    \"white\",\r\n    \"rose\",\r\n    \"dark\"\r\n  ]),\r\n  rightLinks: PropTypes.node,\r\n  leftLinks: PropTypes.node,\r\n  brand: PropTypes.string,\r\n  toolTitle: PropTypes.string,\r\n  fixed: PropTypes.bool,\r\n  absolute: PropTypes.bool,\r\n  // this will cause the sidebar to change the color from\r\n  // props.color (see above) to changeColorOnScroll.color\r\n  // when the window.pageYOffset is heigher or equal to\r\n  // changeColorOnScroll.height and then when it is smaller than\r\n  // changeColorOnScroll.height change it back to\r\n  // props.color (see above)\r\n  changeColorOnScroll: PropTypes.shape({\r\n    height: PropTypes.number.isRequired,\r\n    color: PropTypes.oneOf([\r\n      \"primary\",\r\n      \"info\",\r\n      \"success\",\r\n      \"warning\",\r\n      \"danger\",\r\n      \"transparent\",\r\n      \"white\",\r\n      \"rose\",\r\n      \"dark\"\r\n    ]).isRequired\r\n  })\r\n};\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from '@material-ui/core/Button';\r\nimport \"./HeaderStyle.css\";\r\n\r\nexport default function HeaderLinks() {\r\n  return (\r\n    <List className=\"navList\">\r\n      {/* <ListItem className=\"navListItem\">\r\n        <Button className = \"navLink\">Help</Button>\r\n      </ListItem>\r\n      <ListItem className=\"navListItem\">\r\n        <Button className = \"navLink\">Login</Button>\r\n      </ListItem> */}\r\n      <ListItem className=\"navListItem\">\r\n        <Button className = \"navLink\">Contact</Button>\r\n      </ListItem>\r\n    </List>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ProgressBar() {\r\n    return (\r\n\r\n        <div className=\"progress-container\">\r\n        </div>\r\n    );\r\n}\r\n","import {Option, Trigger, ResponseMatcher, SingleSelectQuestion, MultiSelectQuestion, AutoPlayMessage} from './index'\r\nimport {TriggerData} from './Trigger'\r\nimport { ResponsePath } from './ResponsePath';\r\n\r\nexport enum MessageType {\r\n    singleSelect = 1,\r\n    multiSelect = 2,\r\n    autoPlayMessage = 3\r\n}\r\n\r\nexport interface MessageData {\r\n    type: MessageType\r\n    id: number\r\n    content: string\r\n    options: any[] // TODO CHANGE THIS BACK to OptionsData[]\r\n    triggers: TriggerData[],\r\n    defaultTriggerId: number,\r\n    extraInfo?: any\r\n}\r\n\r\n// TODO: we need to figure out which ones are optional \r\nexport class Message {\r\n    constructor(\r\n        public responseMatcher: ResponseMatcher,\r\n        private _id: number,\r\n        private _content: string, \r\n        private _options: Option[], \r\n        private _triggers: Trigger[], \r\n        private _defaultTriggerId: number,\r\n        private _extraInfo?: any){\r\n    }\r\n\r\n    // getters/setters\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get content() {\r\n        return this._content;\r\n    }\r\n    get options() {\r\n        return this._options;\r\n    }\r\n    get extraInfo() {\r\n        return this._extraInfo;\r\n    }\r\n    get triggers() {\r\n        return this._triggers;\r\n    }\r\n    get defaultTriggerId() {\r\n        return this._defaultTriggerId;\r\n    }\r\n\r\n    getDefaultTrigger() {\r\n        for(let i in this._triggers){\r\n            if(this._triggers[i].id == this._defaultTriggerId){\r\n               return this._triggers[i];\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    public findTrigger(responsePath: ResponsePath): Trigger|never {\r\n        for (let trigger of this.triggers) {\r\n            let triggerExpectedResponses = trigger.expectedResponses;\r\n            let isMatch: boolean = this.responseMatcher.matchOptions(triggerExpectedResponses, responsePath);\r\n            if(isMatch){\r\n                return trigger // this is a matching trigger.\r\n            }\r\n        } \r\n        let defaultTrigger = this.getDefaultTrigger();\r\n        if(defaultTrigger) {\r\n            return defaultTrigger;\r\n        }\r\n        throw new Error();\r\n    }\r\n}","import React from \"react\";\r\nimport botAvator from \"../../../Assets/img/botavator.svg\"\r\n\r\nexport default function ChatbotMessage(props: any) {\r\n    return (\r\n        <div className=\"chat-block bot\">\r\n            <div className=\"chat-avatar\">\r\n                <img src={botAvator} alt=\"chatbot avator\" />\r\n            </div>\r\n            <div className=\"bubble white round\">{props.content}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","export class Option {\r\n    constructor(private _id: number,\r\n        private _label: string) {\r\n    }\r\n\r\n    get id(){\r\n        return this._id\r\n    }\r\n\r\n    get label(){\r\n        return this._label\r\n    }\r\n}\r\n\r\nexport interface OptionData {\r\n    id: number\r\n    label: string;\r\n}\r\n\r\nexport class OptionFactory {\r\n    static createOptionsFromData (optionDatas: OptionData[]) {\r\n        let options: Option[] = [];\r\n        optionDatas.forEach(data => {\r\n            let { id, label} = data;\r\n            options.push(new Option(id, label));\r\n        });\r\n        return options;\r\n    }\r\n}\r\n\r\n","import { Interface } from \"readline\";\r\n\r\n// ResponseItem: single item in responsePath\r\nexport class ResponseItem {\r\n    constructor(private _messageId: number, \r\n                private _optionIds: number[]){ // store all selected option ids of a message\r\n                }\r\n    // getters/setters\r\n    get messageId() {\r\n        return this._messageId;\r\n    }\r\n    get optionIds() {\r\n        return this._optionIds;\r\n    }\r\n    public findResponseOption(optionId: number):boolean {\r\n        if (this.optionIds.indexOf(optionId) >= 0) {\r\n            return true; // find matched optionid\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport interface ResponseItemData {\r\n    messageId: number;\r\n    optionIds: number[]\r\n}\r\n\r\nexport class ResponseItemFactory {\r\n    static createResponseItemFromData (responseItemData: ResponseItemData) {\r\n        let {messageId, optionIds} = responseItemData;\r\n        return new ResponseItem(messageId, optionIds);\r\n    }\r\n}","import { ResponseItem, ResponseItemData, ResponseItemFactory } from \"./ResponseItem\";\r\n\r\nexport class Trigger{ \r\n    constructor(\r\n        private _id: number,\r\n        private _expectedResponses: ResponseItem, // NOTE: to extend question group, may need change this to an array\r\n        private _action: any,\r\n        private _resultReport: string,\r\n        private _todo?: any[],\r\n        private _reminder?: any[],\r\n        private _reply?: string){\r\n        }\r\n\r\n    // getters/setters\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get expectedResponses() {\r\n        return this._expectedResponses;\r\n    }\r\n\r\n    get reply() {\r\n        return this._reply;\r\n    }\r\n\r\n    get action() {\r\n        return this._action;\r\n    }\r\n\r\n    get resultReport() {\r\n        return this._resultReport;\r\n    }\r\n\r\n    get todo() {\r\n        return this._todo;\r\n    }\r\n\r\n    get reminder() {\r\n        return this._reminder;\r\n    }\r\n}\r\n\r\nexport interface TriggerData {\r\n    id: number,\r\n    expectedResponses: ResponseItemData,\r\n    action: any,\r\n    resultReport: string,\r\n    todo?: any,\r\n    reminder?: any,\r\n    reply?: string\r\n}\r\n\r\nexport class TriggerFactory{\r\n    // create an array of triggers\r\n    static createTriggersFromData(triggerDatas: TriggerData[]){\r\n        let triggers: Trigger[] = [];\r\n        triggerDatas.forEach(data => {\r\n            let {id, action, resultReport, todo, reminder, reply } = data;\r\n            let expectedResponses:ResponseItem = ResponseItemFactory.createResponseItemFromData(data.expectedResponses);\r\n            triggers.push(new Trigger(id, expectedResponses, action, resultReport, todo, reminder, reply));\r\n        });\r\n        return triggers;\r\n    }\r\n    // create a single default trigger\r\n    static createTriggerFromData(triggerData: TriggerData) {\r\n        let { id, action, resultReport, todo, reminder, reply } = triggerData;\r\n        let expectedResponses:ResponseItem = ResponseItemFactory.createResponseItemFromData(triggerData.expectedResponses);\r\n        return new Trigger(id, expectedResponses, action, resultReport, todo, reminder, reply);\r\n    }\r\n}\r\n","import {Message} from './Message'\r\nimport { ResponseMatcher } from './ResponseMatcher'\r\nimport {Option} from './Option'\r\nimport {Trigger} from './Trigger'\r\n\r\nexport class SingleSelectQuestion extends Message{\r\n    constructor(\r\n        responseMatcher: ResponseMatcher,\r\n        id: number,\r\n        content: string, \r\n        options: Option[], \r\n        triggers: Trigger[], \r\n        defualtTriggerId: number,\r\n        extraInfo: any){\r\n            super(responseMatcher, id, content, options, triggers, defualtTriggerId, extraInfo)\r\n    }\r\n}","import {Option} from './Option'\r\nimport {Trigger} from './Trigger'\r\nimport {Message} from './Message'\r\nimport { ResponseMatcher } from './ResponseMatcher'\r\n\r\nexport class MultiSelectQuestion extends Message {\r\n    constructor(\r\n        responseMatcher: ResponseMatcher,\r\n        id: number,\r\n        content: string, \r\n        options: Option[], \r\n        triggers: Trigger[], \r\n        defualtTriggerId: number,\r\n        extraInfo: any){\r\n            super(responseMatcher, id,content, options, triggers, defualtTriggerId, extraInfo)\r\n    }\r\n}","import { ResponsePath } from \"./ResponsePath\";\r\nimport { ResponseItem } from \"./ResponseItem\";\r\n\r\nexport interface ResponseMatcher {\r\n    /*\r\n        matches the condition with the selectedOptions \r\n        trigger if one exists\r\n        * what do we do when one doesnt exist?\r\n    */\r\n    matchOptions(expectedResponse: ResponseItem, responsePath: ResponsePath): boolean;\r\n}\r\n\r\nexport class MatchFullResponse implements ResponseMatcher {\r\n    matchOptions(expectedResponse: ResponseItem, responsePath: ResponsePath): boolean {\r\n        const messageId = expectedResponse.messageId;\r\n        for (let optionId of expectedResponse.optionIds) {\r\n            let ifFoundResponse:boolean = responsePath.findMessageResponse(messageId, optionId);\r\n            if (!ifFoundResponse) { // return false if one response can't be found\r\n                return false;\r\n            }\r\n         }\r\n         // also loop through options in responsePath to make sure exact match\r\n         for (let optionId of responsePath.getMessageOptions(messageId)) {\r\n            let ifFoundResponse:boolean = expectedResponse.findResponseOption(optionId);\r\n            if (!ifFoundResponse) {\r\n                return false;\r\n            }\r\n         }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class MatchPartialResponse implements ResponseMatcher {\r\n    matchOptions(expectedResponse: ResponseItem, responsePath: ResponsePath): boolean{\r\n         const messageId = expectedResponse.messageId;\r\n         for (let optionId of expectedResponse.optionIds) {\r\n            let ifFoundResponse:boolean = responsePath.findMessageResponse(messageId, optionId);\r\n            if (ifFoundResponse) { // find at leat one expected response\r\n                return true;\r\n            }\r\n         }\r\n         return false; // failed to find any expected response\r\n    }\r\n}","import {Option} from './Option'\r\nimport {Trigger} from './Trigger'\r\nimport {Message} from './Message'\r\nimport {ResponseMatcher} from './ResponseMatcher'\r\n\r\nexport class AutoPlayMessage extends Message{\r\n    constructor(\r\n        responseMatcher: ResponseMatcher,\r\n        id: number,\r\n        content: string, \r\n        options: Option[], \r\n        triggers: Trigger[],\r\n        defualtTriggerId: number,\r\n        extraInfo: any){\r\n            super(responseMatcher, id, content, options, triggers, defualtTriggerId, extraInfo)\r\n    }\r\n}","\r\nimport {Option, SingleSelectQuestion, MultiSelectQuestion, AutoPlayMessage, MessageType, Message, Trigger, MatchFullResponse, MatchPartialResponse} from './index'\r\nimport {MessageData} from './Message'\r\nimport {TriggerFactory} from './Trigger'\r\nimport {OptionFactory} from './Option'\r\nimport { ResponseMatcher } from './ResponseMatcher';\r\n\r\nexport class MessageFactory {\r\n    static ok(){\r\n        console.log(\"ok\");\r\n    }\r\n    static createMessageFromData(data: MessageData): Message|never {\r\n        let { id, type, content, extraInfo=null, defaultTriggerId } = data \r\n        const triggers: Trigger[] = TriggerFactory.createTriggersFromData(data.triggers);        const options: Option[] = OptionFactory.createOptionsFromData(data.options)\r\n        if (type == MessageType.singleSelect){\r\n            const matcher: ResponseMatcher = new MatchPartialResponse();\r\n            return new SingleSelectQuestion(\r\n                matcher, id, content, options, triggers, defaultTriggerId, extraInfo\r\n            )\r\n        }\r\n        else if (type == MessageType.multiSelect){\r\n            const matcher: ResponseMatcher = new MatchFullResponse();\r\n            return new MultiSelectQuestion(\r\n                matcher, id, content, options, triggers, defaultTriggerId, extraInfo\r\n            )\r\n        } else if (type == MessageType.autoPlayMessage){\r\n            // Question: do we need new matcher type for auto-play message?\r\n            // since its triggers should be empty can directly return the defaultTrigger\r\n            // THINK: how to automatically display next message of an auto-display message?\r\n            const matcher: ResponseMatcher = new MatchPartialResponse();\r\n            return new AutoPlayMessage(\r\n                matcher, id, content, options, triggers, defaultTriggerId, extraInfo\r\n            )\r\n        }\r\n        throw new Error();       \r\n    }\r\n}\r\n","import { ResponseItem } from \"./ResponseItem\";\r\n\r\nexport class ResponsePath {\r\n    private _responseList: ResponseItem[]\r\n    private _responseMap: { [key: number]: ResponseItem } // key is messageId\r\n\r\n    constructor() {\r\n        this._responseList = []\r\n        this._responseMap = {}\r\n    }\r\n\r\n    // getters/setters\r\n    get responseList() {\r\n        return this._responseList;\r\n    }\r\n    get responseMap() {\r\n        return this._responseMap;\r\n    }\r\n\r\n    public findMessageResponse(messageId: number, optionId: number) {\r\n        // TODO: implement this\r\n        let isFind:boolean = this.responseMap[messageId] && this.responseMap[messageId].findResponseOption(optionId) ? true : false;\r\n        return isFind;\r\n    }\r\n\r\n    public addResponseItem(responseItem: ResponseItem) {\r\n        this.responseList.push(responseItem);\r\n        this.responseMap[responseItem.messageId] = responseItem;\r\n    }\r\n\r\n    // get the optionIds of a certain massage\r\n    public getMessageOptions(messageId: number): number[]|never {\r\n        if(this.responseMap[messageId]) {\r\n            return this.responseMap[messageId].optionIds;\r\n        }\r\n        throw new Error();\r\n    }\r\n}","import React from \"react\";\r\n\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { MessageType, MultiSelectQuestion } from \"../../../model\";\r\nimport { DisplayedMessage } from './ChatbotPage'\r\n\r\n\r\n\r\nexport default function UserMessage(props: any) {\r\n    const { message, selectedOptionIds, showExtraInfo }: DisplayedMessage = props.message;\r\n    const options = message.options;\r\n    const questionId = message.id;\r\n    const extraOptionContent = message.extraInfo;\r\n    let optionItems: any = [];\r\n    let userOptionComponent: any;\r\n    if (message instanceof MultiSelectQuestion) {\r\n        optionItems = options.map((option: any) => {\r\n            return (\r\n                <ListItem className=\"nav-list-item\" id={option.id} key={option.id}>\r\n                    <Button className={selectedOptionIds.includes(option.id) ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleMultiSelectOptions(questionId, option.id)}>{option.label}</Button>\r\n                </ListItem>)\r\n        }\r\n        );\r\n        userOptionComponent = <List>\r\n            {optionItems}\r\n            {generateExtraOptionComponent()}\r\n            <ListItem className=\"nav-list-item\">\r\n                <Button className=\"nav-link\" onClick={() => props.handleMultiSelectSubmit(questionId)}>SUBMIT</Button>\r\n            </ListItem>\r\n        </List>\r\n    } else { // single select\r\n        optionItems = options.map((option: any) => {\r\n            return (<ListItem className=\"nav-list-item\" id={option.id} key={option.id}>\r\n                <Button className={selectedOptionIds.includes(option.id) ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleSelectOptions(questionId, [option.id])}>{option.label}</Button>\r\n            </ListItem>)\r\n        })\r\n        userOptionComponent = (\r\n            <List>\r\n                {optionItems}\r\n                {generateExtraOptionComponent()}\r\n            </List>\r\n        )\r\n        console.log(userOptionComponent);\r\n    }\r\n\r\n    function generateExtraOptionComponent() {\r\n        return (\r\n            extraOptionContent ?\r\n                (<ListItem className=\"nav-list-item\">\r\n                    <Button className={showExtraInfo ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleShowExtraInfo(questionId)}>{extraOptionContent.title}</Button>\r\n                </ListItem>) : null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"chat-block user\">\r\n            <div className=\"bubble round\">\r\n                {userOptionComponent}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport ChatbotMessage from './ChatbotMessage'\r\nimport UserMessage from \"./UserMessage\";\r\nimport { DisplayedMessage } from \"./ChatbotPage\";\r\n\r\nexport default function Chat(props: any) {\r\n    const messageOptions = props.displayedMessages.map((displayedMessage: DisplayedMessage, key: any) => {\r\n        const {message, showExtraInfo, selectedOptionIds, reply} = displayedMessage\r\n        if (message.content) {\r\n            return (\r\n                <div key={key}>\r\n                    <ChatbotMessage content={message.content}></ChatbotMessage>\r\n                    {message.options && message.options.length > 0 && \r\n                    <UserMessage \r\n                        message={displayedMessage} \r\n                        handleShowExtraInfo={props.handleShowExtraInfo} \r\n                        handleSelectOptions={props.handleSelectOptions}\r\n                        handleMultiSelectOptions={props.handleMultiSelectOptions}\r\n                        handleMultiSelectSubmit={props.handleMultiSelectSubmit}\r\n                        ></UserMessage>}\r\n                    {reply && (<ChatbotMessage content={reply}></ChatbotMessage>)}\r\n                    {showExtraInfo && <ChatbotMessage content={message.extraInfo.content}></ChatbotMessage>}\r\n                </div>\r\n            )\r\n        }\r\n        return null;\r\n    });\r\n\r\n    return (\r\n        <div className=\"content-container\">\r\n            <div className=\"chat-area\" id=\"chatbot-scroller\">\r\n                {messageOptions}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@material-ui/core\";\r\n\r\nexport default function ToDoSection(props: any) {\r\n    const { todoList, reminderList } = props;\r\n    return (\r\n        <div className=\"chat todo-container round grey\">\r\n            <div className=\"chat donow-container round white\">\r\n                <div className=\"donow-titile-box\">\r\n                    <div className=\"container\">\r\n                        <span>DO NOW</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-container \">\r\n                    <List>\r\n                        {todoList.map((item: any, key: any) => {\r\n                            return (<ListItem key={key}>\r\n                                <div className=\"todo-item-bullet\"/>\r\n                                <span className= \"item-label\" >{item}</span>\r\n                            </ListItem>)\r\n                        })} \r\n                    </List>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat dolater-container round white\">\r\n                <div className=\"dolater-titile-box\">\r\n                    <div className=\"container\">\r\n                        <span>DO LATER</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-container \">\r\n                    <List>\r\n                        {reminderList.map((item: any, key: any) => {\r\n                            return (<ListItem key={key}>\r\n                               <div className=\"reminder-item-bullet\"/>\r\n                                <span className= \"item-label\" >{item}</span>\r\n                            </ListItem>)\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import {MessageType} from '../model/index'\r\n\r\n\r\nexport let module2 = [\r\n    {\r\n      id: 2,\r\n      type: MessageType.autoPlayMessage,\r\n      content: 'Explain what is personal info and what isn’t',\r\n      options: [],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            optionIds: []\r\n          },\r\n          id: 110,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 10\r\n          }\r\n        }\r\n      ],\r\n      defaultTriggerId: 110\r\n    },\r\n    {\r\n      id: 10,\r\n      type: MessageType.singleSelect,\r\n      content: 'Does your org collect personal information?',\r\n      options: [\r\n        {\r\n          id: 1001,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1000,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 10,\r\n            optionIds: [\r\n              1001\r\n            ]\r\n          },\r\n          id: 111,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 12\r\n          },\r\n          resultReport: 'some repo on question 10 Yes'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 10,\r\n            optionIds: [\r\n              1000\r\n            ]\r\n          },\r\n          id: 112,\r\n          action: {\r\n            type: 'nextModule',\r\n            nextQuestionId: 11,\r\n            nextModuleId: 3\r\n          },\r\n          resultReport: 'some repo on question 10 No'\r\n        }\r\n      ],\r\n      defaultTriggerId: 112\r\n    },\r\n    {\r\n      id: 12,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you explain what the P.I. will be used for?',\r\n      options: [\r\n        {\r\n          id: 1201,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1200,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 12,\r\n            optionIds: [\r\n              1201\r\n            ]\r\n          },\r\n          id: 113,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 13\r\n          },\r\n          resultReport: 'some repo on question 12 Yes',\r\n          reply: 'Good Job'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 12,\r\n            optionIds: [\r\n              1200\r\n            ]\r\n          },\r\n          id: 114,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 13\r\n          },\r\n          resultReport: 'some repo on question 12 No',\r\n          todo: 'Todo Item 6'\r\n        }\r\n      ],\r\n      defaultTriggerId: 114\r\n    },\r\n    {\r\n      id: 13,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you obtain consent from the person?',\r\n      options: [\r\n        {\r\n          id: 1301,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1300,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 13,\r\n            optionIds: [\r\n              1301\r\n            ]\r\n          },\r\n          id: 115,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 15\r\n          },\r\n          resultReport: 'some repo on question 13 Yes'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 13,\r\n            optionIds: [\r\n              1300\r\n            ]\r\n          },\r\n          id: 116,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 14\r\n          },\r\n          resultReport: 'some repo on question 13 No'\r\n        }\r\n      ],\r\n      defaultTriggerId: 116\r\n    },\r\n    {\r\n      id: 14,\r\n      type: MessageType.multiSelect,\r\n      content: 'Our information is collected .. Select all that apply.',\r\n      options: [\r\n        {\r\n          id: 1401,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1400,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 14,\r\n            optionIds: [\r\n              1401\r\n            ]\r\n          },\r\n          id: 117,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 17\r\n          },\r\n          resultReport: 'some repo on question 14 Yes'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 14,\r\n            optionIds: [\r\n              1400\r\n            ]\r\n          },\r\n          id: 118,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 16\r\n          },\r\n          resultReport: 'some repo on question 14 No'\r\n        }\r\n      ],\r\n      defaultTriggerId: 118\r\n    },\r\n    {\r\n      id: 15,\r\n      type: MessageType.multiSelect,\r\n      content: 'Do you use a consent form?',\r\n      options: [\r\n        {\r\n          id: 1501,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1500,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 15,\r\n            optionIds: [\r\n              1501\r\n            ]\r\n          },\r\n          id: 119,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 14\r\n          },\r\n          resultReport: 'some repo on question 15 Yes',\r\n          reply: 'Good Job.'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 15,\r\n            optionIds: [\r\n              1500\r\n            ]\r\n          },\r\n          id: 120,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 16\r\n          },\r\n          resultReport: 'some repo on question 15 No',\r\n          reminder: 'Todo Item 7'\r\n        }\r\n      ],\r\n      defaultTriggerId: 120\r\n    },\r\n    {\r\n      id: 16,\r\n      type: MessageType.singleSelect,\r\n      content: 'Is the person an employee of the org?',\r\n      options: [\r\n        {\r\n          id: 1601,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1600,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 16,\r\n            optionIds: [\r\n              1601\r\n            ]\r\n          },\r\n          id: 121,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 18\r\n          },\r\n          resultReport: 'some repo on question 16 Yes'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 16,\r\n            optionIds: [\r\n              1600\r\n            ]\r\n          },\r\n          id: 122,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 17\r\n          },\r\n          resultReport: 'some repo on question 16 No',\r\n          todo: 'Todo Item 8'\r\n        }\r\n      ],\r\n      defaultTriggerId: 122\r\n    },\r\n    {\r\n      id: 17,\r\n      type: MessageType.singleSelect,\r\n      content: 'Does the P.I you collect help fufill the orgs mission/purpose?',\r\n      options: [\r\n        {\r\n          id: 1701,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1700,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 17,\r\n            optionIds: [\r\n              1701\r\n            ]\r\n          },\r\n          id: 123,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 20\r\n          },\r\n          resultReport: 'some repo on question 17 Yes'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 17,\r\n            optionIds: [\r\n              1700\r\n            ]\r\n          },\r\n          id: 124,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 20\r\n          },\r\n          resultReport: 'some repo on question 17 No'\r\n        }\r\n      ],\r\n      extraInfo: {\r\n        title: 'I NEED MORE INFORMATION',\r\n        content: 'Information collected should be related to the society’s purpose/goals. For example, “we are a theatre company and collect information from our subscribers to sell tickets.”'\r\n      },\r\n      defaultTriggerId: 124\r\n    },\r\n    {\r\n      id: 18,\r\n      type: MessageType.singleSelect,\r\n      content: 'Select reasons for collecting employee information. Select one.',\r\n      options: [\r\n        {\r\n          id: 1800,\r\n          label: 'Establish employment'\r\n        },\r\n        {\r\n          id: 1801,\r\n          label: 'Manage employment'\r\n        },\r\n        {\r\n          id: 1802,\r\n          label: 'Terminate employment'\r\n        },\r\n        {\r\n          id: 1803,\r\n          label: 'Other reasons'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 18,\r\n            optionIds: [\r\n              1803\r\n            ]\r\n          },\r\n          id: 125,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 17\r\n          },\r\n          resultReport: 'some repo on question 18 other reasons',\r\n          todo: 'Todo Item 8'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            optionIds: []\r\n          },\r\n          id: 126,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 19\r\n          },\r\n          resultReport: 'some repo on question 18'\r\n        }\r\n      ],\r\n      defaultTriggerId: 126\r\n    },\r\n    {\r\n      id: 19,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you let these employees know ahead of time?',\r\n      options: [\r\n        {\r\n          id: 1901,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 1900,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 19,\r\n            optionIds: [\r\n              1900\r\n            ]\r\n          },\r\n          id: 127,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 17\r\n          },\r\n          resultReport: 'some repo on question 19 N0',\r\n          todo: 'Todo Item 9'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 19,\r\n            optionIds: [\r\n              1901\r\n            ]\r\n          },\r\n          id: 128,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 17\r\n          },\r\n          resultReport: 'some repo on question 19 Yes',\r\n          reply: 'Good Job'\r\n        }\r\n      ],\r\n      defaultTriggerId: 128\r\n    },\r\n    {\r\n      id: 20,\r\n      type: MessageType.multiSelect,\r\n      content: 'Select the reasons you collect personal information. Select all that apply.',\r\n      options: [\r\n        {\r\n          id: 2000,\r\n          label: 'To communicate with members'\r\n        },\r\n        {\r\n          id: 2001,\r\n          label: 'To send newsletters and invitations'\r\n        },\r\n        {\r\n          id: 2002,\r\n          label: 'For service phone calls and emails'\r\n        },\r\n        {\r\n          id: 2003,\r\n          label: 'For audit purposes'\r\n        },\r\n        {\r\n          id: 2004,\r\n          label: 'To solicit donations'\r\n        },\r\n        {\r\n          id: 2005,\r\n          label: 'To issue tax receipts'\r\n        },\r\n        {\r\n          id: 2006,\r\n          label: 'Other reasons'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 20,\r\n            optionIds: [\r\n              2006\r\n            ]\r\n          },\r\n          id: 129,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 21\r\n          },\r\n          resultReport: 'some repo on question 20 Other reasons',\r\n          reply: 'Your use of personal information could be problematic. Check the “Permissions for Personal Information” at the end of the assessment to learn more.',\r\n          todo: 'Todo Item 10'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            optionIds: []\r\n          },\r\n          id: 130,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 21\r\n          },\r\n          resultReport: 'some repo on question 20',\r\n          reply: 'Great - these are all permissible uses of personal information!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 130\r\n    },\r\n    {\r\n      id: 21,\r\n      type: MessageType.singleSelect,\r\n      content: 'Does your organization give out personal information either within or outside the organization?',\r\n      options: [\r\n        {\r\n          id: 2101,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 2100,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 21,\r\n            optionIds: [\r\n              2100\r\n            ]\r\n          },\r\n          id: 131,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 28\r\n          },\r\n          resultReport: 'some repo on question 21 No'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 21,\r\n            optionIds: [\r\n              2101\r\n            ]\r\n          },\r\n          id: 132,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 22\r\n          },\r\n          resultReport: 'some repo on question 21 Yes'\r\n        }\r\n      ],\r\n      defaultTriggerId: 132\r\n    },\r\n    {\r\n      id: 22,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you get explicit consent from people before giving out their personal information?',\r\n      options: [\r\n        {\r\n          id: 2201,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 2200,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 22,\r\n            optionIds: [\r\n              2200\r\n            ]\r\n          },\r\n          id: 133,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 23\r\n          },\r\n          resultReport: 'some repo on question 22 No'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 22,\r\n            optionIds: [\r\n              2201\r\n            ]\r\n          },\r\n          id: 134,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 24\r\n          },\r\n          resultReport: 'some repo on question 22 Yes',\r\n          reply: 'Great!'\r\n        }\r\n      ],\r\n      extraInfo: {\r\n        title: 'WHAT IS EXPLICIT CONSENT?',\r\n        content: 'For example, this could include...'\r\n      },\r\n      defaultTriggerId: 134\r\n    },\r\n    {\r\n      id: 23,\r\n      type: MessageType.singleSelect,\r\n      content: 'Is the purpose for collecting personal information obvious?',\r\n      options: [\r\n        {\r\n          id: 2301,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 2300,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 23,\r\n            optionIds: [\r\n              2300\r\n            ]\r\n          },\r\n          id: 135,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 25\r\n          },\r\n          resultReport: 'some repo on question 23 No',\r\n          todo: 'Todo Item 11'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 23,\r\n            optionIds: [\r\n              2301\r\n            ]\r\n          },\r\n          id: 136,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 25\r\n          },\r\n          resultReport: 'some repo on question 23 Yes'\r\n        }\r\n      ],\r\n      defaultTriggerId: 136\r\n    },\r\n    {\r\n      id: 24,\r\n      type: MessageType.singleSelect,\r\n      content: 'Have you been required to provide personal information due to a court order or subpoena?',\r\n      options: [\r\n        {\r\n          id: 2401,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 2400,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 24,\r\n            optionIds: [\r\n              2400\r\n            ]\r\n          },\r\n          id: 137,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 26\r\n          },\r\n          resultReport: 'some repo on question 24 No'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 24,\r\n            optionIds: [\r\n              2401\r\n            ]\r\n          },\r\n          id: 138,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 27\r\n          },\r\n          resultReport: 'some repo on question 24 Yes'\r\n        }\r\n      ],\r\n      defaultTriggerId: 138\r\n    },\r\n    {\r\n      id: 25,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do these people voluntarily provide their personal information?',\r\n      options: [\r\n        {\r\n          id: 2501,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 2500,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 25,\r\n            optionIds: [\r\n              2500\r\n            ]\r\n          },\r\n          id: 139,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 24\r\n          },\r\n          resultReport: 'some repo on question 25 No',\r\n          todo: 'Todo Item 12'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 25,\r\n            optionIds: [\r\n              2501\r\n            ]\r\n          },\r\n          id: 140,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 24\r\n          },\r\n          resultReport: 'some repo on question 25 Yes',\r\n          reply: 'Good job!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 140\r\n    },\r\n    {\r\n      id: 26,\r\n      type: MessageType.multiSelect,\r\n      content: 'Select all the reasons you disclose personal information internally, including information from a Members Register. (Multiple choice, select all that apply.',\r\n      options: [\r\n        {\r\n          id: 2600,\r\n          label: 'To register/call a general meeting'\r\n        },\r\n        {\r\n          id: 2601,\r\n          label: 'To submit a member proposal'\r\n        },\r\n        {\r\n          id: 2602,\r\n          label: 'To influence the voting of members'\r\n        },\r\n        {\r\n          id: 2603,\r\n          label: 'Other reasons'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 26,\r\n            optionIds: [\r\n              2603\r\n            ]\r\n          },\r\n          id: 141,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 28\r\n          },\r\n          resultReport: 'some repo on question 27 Other reasons',\r\n          todo: 'Todo Item 14'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            optionIds: []\r\n          },\r\n          id: 142,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 28\r\n          },\r\n          resultReport: 'some repo on question 26',\r\n          reply: 'Great!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 142\r\n    },\r\n    {\r\n      id: 27,\r\n      type: MessageType.singleSelect,\r\n      content: 'Does your privacy policy explain that you may disclose personal information for legal reasons?',\r\n      options: [\r\n        {\r\n          id: 2701,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 2700,\r\n          label: 'No'\r\n        },\r\n        {\r\n          id: 2702,\r\n          label: 'NO PRIVACY POLICY YET'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 27,\r\n            optionIds: [\r\n              2700\r\n            ]\r\n          },\r\n          id: 143,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 26\r\n          },\r\n          resultReport: 'some repo on question 27 No',\r\n          reply: 'Got it, adding this to your to-do list!',\r\n          reminder: 'Todo Item 13'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 27,\r\n            optionIds: [\r\n              2701\r\n            ]\r\n          },\r\n          id: 144,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 26\r\n          },\r\n          resultReport: 'some repo on question 27 Yes',\r\n          reply: 'Perfect!'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 27,\r\n            optionIds: [\r\n              2702\r\n            ]\r\n          },\r\n          id: 145,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 26\r\n          },\r\n          resultReport: 'some repo on question 27 No PP',\r\n          reply: 'Okay, be sure to add this information to your privacy policy once you create it!',\r\n          reminder: 'Todo Item 13'\r\n        }\r\n      ],\r\n      defaultTriggerId: 145\r\n    },\r\n    {\r\n      id: 28,\r\n      type: MessageType.singleSelect,\r\n      content: 'Let’s talk about storing personal information! Select everyone who can access personal information.',\r\n      options: [\r\n        {\r\n          id: 2800,\r\n          label: 'All employees'\r\n        },\r\n        {\r\n          id: 2801,\r\n          label: 'All employees and volunteers'\r\n        },\r\n        {\r\n          id: 2802,\r\n          label: 'A small number of authorized individuals'\r\n        },\r\n        {\r\n          id: 2803,\r\n          label: 'No one'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 28,\r\n            optionIds: [\r\n              2800\r\n            ]\r\n          },\r\n          id: 146,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 29\r\n          },\r\n          resultReport: 'some repo on question 28 All',\r\n          reply: 'Okay for small organizations. If you are a larger organization, you will want to reduce access to only a few individuals.'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 28,\r\n            optionIds: [\r\n              2801\r\n            ]\r\n          },\r\n          id: 147,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 29\r\n          },\r\n          resultReport: 'some repo on question 28 small',\r\n          reply: 'Perfect!'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 28,\r\n            optionIds: [\r\n              2802\r\n            ]\r\n          },\r\n          id: 148,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 29\r\n          },\r\n          resultReport: 'some repo on question 28 volunteers',\r\n          reply: 'Let’s change the access to a few designated individuals!',\r\n          todo: 'Todo Item 15'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 28,\r\n            optionIds: [\r\n              2803\r\n            ]\r\n          },\r\n          id: 149,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 29\r\n          },\r\n          resultReport: 'some repo on question 28 no one',\r\n          reply: 'Let’s change the access to a few designated individuals!',\r\n          todo: 'Todo Item 15'\r\n        }\r\n      ],\r\n      defaultTriggerId: 149\r\n    },\r\n    {\r\n      id: 29,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you have policies and procedures to keep personal information secure?',\r\n      options: [\r\n        {\r\n          id: 2901,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 2900,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 29,\r\n            optionIds: [\r\n              2900\r\n            ]\r\n          },\r\n          id: 150,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 30\r\n          },\r\n          resultReport: 'some repo on question 29 No',\r\n          reply: 'Be sure to keep personal information secure! Check your results at the end of the module to find more tips on securing personal information.',\r\n          reminder: 'Todo Item 16'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 29,\r\n            optionIds: [\r\n              2901\r\n            ]\r\n          },\r\n          id: 151,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 30\r\n          },\r\n          resultReport: 'some repo on question 29 Yes',\r\n          reply: 'Good for you!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 151\r\n    },\r\n    {\r\n      id: 30,\r\n      type: MessageType.singleSelect,\r\n      content: 'Where do you store personal information?',\r\n      options: [\r\n        {\r\n          id: 3000,\r\n          label: 'ON PAPER'\r\n        },\r\n        {\r\n          id: 3001,\r\n          label: 'ON THE COMPUTER'\r\n        },\r\n        {\r\n          id: 3002,\r\n          label: 'ON THE COMPUTER AND ON PAPER'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 30,\r\n            optionIds: [\r\n              3000\r\n            ]\r\n          },\r\n          id: 152,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 33\r\n          },\r\n          resultReport: 'some repo on question 30 paper'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 30,\r\n            optionIds: [\r\n              3001\r\n            ]\r\n          },\r\n          id: 153,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 31\r\n          },\r\n          resultReport: 'some repo on question 30 paper/digital'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 30,\r\n            optionIds: [\r\n              3002\r\n            ]\r\n          },\r\n          id: 154,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 32\r\n          },\r\n          resultReport: 'some repo on question 30 digital'\r\n        }\r\n      ],\r\n      defaultTriggerId: 154\r\n    },\r\n    {\r\n      id: 31,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you keep your sensitive data encrypted?',\r\n      options: [\r\n        {\r\n          id: 3101,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 3100,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 31,\r\n            optionIds: [\r\n              3100\r\n            ]\r\n          },\r\n          id: 155,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 34\r\n          },\r\n          resultReport: 'some repo on question 31 No',\r\n          reply: 'This is a great way to keep data secure, added to your list',\r\n          reminder: 'Todo Item 18'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 31,\r\n            optionIds: [\r\n              3101\r\n            ]\r\n          },\r\n          id: 156,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 34\r\n          },\r\n          resultReport: 'some repo on question 31 Yes',\r\n          reply: 'Great!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 156\r\n    },\r\n    {\r\n      id: 32,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you keep your paper documents in a locked cabinet?',\r\n      options: [\r\n        {\r\n          id: 3201,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 3200,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 32,\r\n            optionIds: [\r\n              3200\r\n            ]\r\n          },\r\n          id: 157,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 31\r\n          },\r\n          resultReport: 'some repo on question 32 No',\r\n          reply: 'Lock those documents up!',\r\n          todo: 'Todo Item 17'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 32,\r\n            optionIds: [\r\n              3201\r\n            ]\r\n          },\r\n          id: 158,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 31\r\n          },\r\n          resultReport: 'some repo on question 32 Yes',\r\n          reply: 'Good job!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 158\r\n    },\r\n    {\r\n      id: 33,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you keep your paper documents in a locked cabinet?',\r\n      options: [\r\n        {\r\n          id: 3301,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 3300,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 33,\r\n            optionIds: [\r\n              3300\r\n            ]\r\n          },\r\n          id: 159,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 39\r\n          },\r\n          resultReport: 'some repo on question 33 No',\r\n          reply: 'Lock those documents up!',\r\n          todo: 'Todo Item 17'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 33,\r\n            optionIds: [\r\n              3301\r\n            ]\r\n          },\r\n          id: 160,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 39\r\n          },\r\n          resultReport: 'some repo on question 33 Yes',\r\n          reply: 'Good job!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 160\r\n    },\r\n    {\r\n      id: 34,\r\n      type: MessageType.singleSelect,\r\n      content: 'Is your digital content password protected?',\r\n      options: [\r\n        {\r\n          id: 3401,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 3400,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 34,\r\n            optionIds: [\r\n              3400\r\n            ]\r\n          },\r\n          id: 161,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 36\r\n          },\r\n          resultReport: 'some repo on question 34 No',\r\n          reply: 'Always use passwords to keep your digital content secure.',\r\n          todo: 'Todo Item 19'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 34,\r\n            optionIds: [\r\n              3401\r\n            ]\r\n          },\r\n          id: 162,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 35\r\n          },\r\n          resultReport: 'some repo on question 34 Yes'\r\n        }\r\n      ],\r\n      defaultTriggerId: 162\r\n    },\r\n    {\r\n      id: 35,\r\n      type: MessageType.singleSelect,\r\n      content: 'How often do you change your passwords?',\r\n      options: [\r\n        {\r\n          id: 3500,\r\n          label: '0-6 MONTHS'\r\n        },\r\n        {\r\n          id: 3501,\r\n          label: '6-12 MONTHS'\r\n        },\r\n        {\r\n          id: 3502,\r\n          label: 'OVER A YEAR'\r\n        },\r\n        {\r\n          id: 3503,\r\n          label: 'NEVER'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 35,\r\n            optionIds: [\r\n              3500\r\n            ]\r\n          },\r\n          id: 163,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 36\r\n          },\r\n          resultReport: 'some repo on question 35 0-6',\r\n          reply: 'Awesome, keep it up!'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 35,\r\n            optionIds: [\r\n              3501\r\n            ]\r\n          },\r\n          id: 164,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 36\r\n          },\r\n          resultReport: 'some repo on question 35 6-12',\r\n          reply: 'Pretty good, try changing your passwords every 6 months.'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            optionIds: []\r\n          },\r\n          id: 165,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 36\r\n          },\r\n          resultReport: 'some repo on question 35 over 1 year',\r\n          reply: 'Change passwords every 6 months to keep your digital content secure.',\r\n          reminder: 'Todo Item 20'\r\n        }\r\n      ],\r\n      defaultTriggerId: 165\r\n    },\r\n    {\r\n      id: 36,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you collect Digitally Created Personal Information (D.C.P.I., such as information from website traffic?',\r\n      options: [\r\n        {\r\n          id: 3601,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 3600,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 36,\r\n            optionIds: [\r\n              3600\r\n            ]\r\n          },\r\n          id: 166,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 38\r\n          },\r\n          resultReport: 'some repo on question 36 No'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 36,\r\n            optionIds: [\r\n              3601\r\n            ]\r\n          },\r\n          id: 167,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 37\r\n          },\r\n          resultReport: 'some repo on question 36 Yes'\r\n        }\r\n      ],\r\n      extraInfo: {\r\n        title: 'WHAT IS D.C.P.I.?',\r\n        content: ' Digitally created personal information includes location information, including GPS data; device identifiers such as IP and MAC addresses; click stream data, browser history, bookmarks; user generated social network data such as comments, ratings, likes and dislikes, Twitter stream, or customer service interactions.'\r\n      },\r\n      defaultTriggerId: 167\r\n    },\r\n    {\r\n      id: 37,\r\n      type: MessageType.singleSelect,\r\n      content: 'Does your privacy policy include information about the D.C.P.I. you collect?',\r\n      options: [\r\n        {\r\n          id: 3701,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 3700,\r\n          label: 'NO'\r\n        },\r\n        {\r\n          id: 3702,\r\n          label: 'NO PRIVACY POLICY YET'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 37,\r\n            optionIds: [\r\n              3700\r\n            ]\r\n          },\r\n          id: 168,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 38\r\n          },\r\n          resultReport: 'some repo on question 37 No',\r\n          reply: 'Added to your list! Check out your results at the end to find suggested wording to add to your privacy policy.',\r\n          reminder: 'Todo Item 21'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 37,\r\n            optionIds: [\r\n              3701\r\n            ]\r\n          },\r\n          id: 169,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 38\r\n          },\r\n          resultReport: 'some repo on question 37 Yes',\r\n          reply: 'Great!'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 37,\r\n            optionIds: [\r\n              3702\r\n            ]\r\n          },\r\n          id: 170,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 38\r\n          },\r\n          resultReport: 'some repo on question 37 No PP',\r\n          reply: 'Be sure to include this when you make your privacy policy!',\r\n          reminder: 'Todo Item 21'\r\n        }\r\n      ],\r\n      defaultTriggerId: 170\r\n    },\r\n    {\r\n      id: 38,\r\n      type: MessageType.singleSelect,\r\n      content: 'How often do you review your antivirus software?',\r\n      options: [\r\n        {\r\n          id: 3800,\r\n          label: '0-6 MONTHS'\r\n        },\r\n        {\r\n          id: 3801,\r\n          label: '6-12 MONTHS'\r\n        },\r\n        {\r\n          id: 3802,\r\n          label: 'MORE THAN A YEAR'\r\n        },\r\n        {\r\n          id: 3803,\r\n          label: 'NEVER'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 38,\r\n            optionIds: [\r\n              3800\r\n            ]\r\n          },\r\n          id: 171,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 39\r\n          },\r\n          resultReport: 'some repo on question 38 0-6',\r\n          reply: 'Great!'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 38,\r\n            optionIds: [\r\n              3803\r\n            ]\r\n          },\r\n          id: 172,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 39\r\n          },\r\n          resultReport: 'some repo on question 38 never',\r\n          reply: 'It’s a good idea to review your antivirus software every 6 months.',\r\n          reminder: 'Todo Item 22'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            optionIds: []\r\n          },\r\n          id: 173,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 39\r\n          },\r\n          resultReport: 'some repo on question 38',\r\n          reply: 'Not bad, try to review once every 6 months!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 173\r\n    },\r\n    {\r\n      id: 39,\r\n      type: MessageType.singleSelect,\r\n      content: 'Do you have personal information that is no longer necessary for legal or business purposes?',\r\n      options: [\r\n        {\r\n          id: 3901,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 3900,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 39,\r\n            optionIds: [\r\n              3900\r\n            ]\r\n          },\r\n          id: 174,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 42\r\n          },\r\n          resultReport: 'some repo on question 39 no'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 39,\r\n            optionIds: [\r\n              3901\r\n            ]\r\n          },\r\n          id: 175,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 40\r\n          },\r\n          resultReport: 'some repo on question 39 yes'\r\n        }\r\n      ],\r\n      defaultTriggerId: 175\r\n    },\r\n    {\r\n      id: 40,\r\n      type: MessageType.singleSelect,\r\n      content: 'How long are you keeping this information?',\r\n      options: [\r\n        {\r\n          id: 4000,\r\n          label: 'LESS THAN 1 YEAR'\r\n        },\r\n        {\r\n          id: 4001,\r\n          label: 'MORE THAN 1 YEAR'\r\n        },\r\n        {\r\n          id: 4002,\r\n          label: 'PERMANENTLY'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 40,\r\n            optionIds: [\r\n              4002\r\n            ]\r\n          },\r\n          id: 176,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 42\r\n          },\r\n          resultReport: 'some repo on question 40 PERMANENTLY',\r\n          reply: 'Not a good idea, let’s keep going to see what we should do with this information.',\r\n          todo: 'Todo Item 23'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            optionIds: []\r\n          },\r\n          id: 177,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 41\r\n          },\r\n          resultReport: 'some repo on question 40'\r\n        }\r\n      ],\r\n      defaultTriggerId: 177\r\n    },\r\n    {\r\n      id: 41,\r\n      type: MessageType.singleSelect,\r\n      content: 'Is the personal information you still have being used to make a decision that would affect this individual?',\r\n      options: [\r\n        {\r\n          id: 4101,\r\n          label: 'YES'\r\n        },\r\n        {\r\n          id: 4100,\r\n          label: 'NO'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 41,\r\n            optionIds: [\r\n              4100\r\n            ]\r\n          },\r\n          id: 178,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 42\r\n          },\r\n          resultReport: 'some repo on question 41 no',\r\n          reply: 'If the personal information has no relevance, it is time to destroy it.',\r\n          todo: 'Todo Item 24'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 41,\r\n            optionIds: [\r\n              4101\r\n            ]\r\n          },\r\n          id: 179,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 42\r\n          },\r\n          resultReport: 'some repo on question 41 yes',\r\n          reply: 'Okay, keep the information for one year after making the decision.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 179\r\n    },\r\n    {\r\n      id: 42,\r\n      type: MessageType.singleSelect,\r\n      content: 'How long do you keep your financial information?',\r\n      options: [\r\n        {\r\n          id: 4200,\r\n          label: 'LESS THAN 7 YEARS'\r\n        },\r\n        {\r\n          id: 4201,\r\n          label: '7 YEARS'\r\n        },\r\n        {\r\n          id: 4202,\r\n          label: 'MORE THAN 7 YEARS'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 42,\r\n            optionIds: [\r\n              4200\r\n            ]\r\n          },\r\n          id: 180,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 43\r\n          },\r\n          resultReport: 'some repo on question 42 4200',\r\n          reply: 'Keep financial information for 7 years.',\r\n          todo: 'Todo Item 25'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 42,\r\n            optionIds: [\r\n              4201\r\n            ]\r\n          },\r\n          id: 181,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 43\r\n          },\r\n          resultReport: 'some repo on question 41 4201',\r\n          reply: 'Perfect!'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 42,\r\n            optionIds: [\r\n              4202\r\n            ]\r\n          },\r\n          id: 182,\r\n          action: {\r\n            type: 'next',\r\n            nextQuestionId: 43\r\n          },\r\n          resultReport: 'some repo on question 41 4202',\r\n          reply: 'Destroy financial information after 7 years.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 182\r\n    },\r\n    {\r\n      id: 43,\r\n      type: MessageType.singleSelect,\r\n      content: 'How long does your organization keep relevant records?',\r\n      options: [\r\n        {\r\n          id: 4300,\r\n          label: 'LESS THAN 10 YEARS'\r\n        },\r\n        {\r\n          id: 4301,\r\n          label: '10 YEARS'\r\n        },\r\n        {\r\n          id: 4302,\r\n          label: '10 YEARS, LONGER IF IT IS RELEVANT'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          expectedResponses: {\r\n            messageId: 43,\r\n            optionIds: [\r\n              4300\r\n            ]\r\n          },\r\n          id: 183,\r\n          action: {\r\n            type: 'nextModule',\r\n            nextQuestionId: 11,\r\n            nextModuleId: 3\r\n          },\r\n          resultReport: 'some repo on question 43 4300',\r\n          reply: 'Keep all records for at least 10 years!',\r\n          todo: 'Todo Item 26'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 43,\r\n            optionIds: [\r\n              4301\r\n            ]\r\n          },\r\n          id: 184,\r\n          action: {\r\n            type: 'nextModule',\r\n            nextQuestionId: 11,\r\n            nextModuleId: 3\r\n          },\r\n          resultReport: 'some repo on question 43 4301',\r\n          reply: 'Good start - be sure to keep relevant records as long as they are relevant.'\r\n        },\r\n        {\r\n          expectedResponses: {\r\n            messageId: 43,\r\n            optionIds: [\r\n              4302\r\n            ]\r\n          },\r\n          id: 185,\r\n          action: {\r\n            type: 'nextModule',\r\n            nextQuestionId: 11,\r\n            nextModuleId: 3\r\n          },\r\n          resultReport: 'some repo on question 43 4302',\r\n          reply: 'Great!'\r\n        }\r\n      ],\r\n      extraInfo: {\r\n        title: 'WHAT IS RELEVANT?',\r\n        content: 'Please write 1-2 sentences describing what relevant records are in this context'\r\n      },\r\n      defaultTriggerId: 185\r\n    }\r\n  ]","\r\n// privacy policy\r\nexport const privacyPolicyModule: any =  [\r\n    {\r\n      id: 1,\r\n      type: 1,\r\n      content: 'Let’s get started! Do you have a privacy policy?',\r\n      options: [\r\n        {\r\n          id: 101,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 100,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 110,\r\n          expectedResponses: {\r\n            messageId: 1,\r\n            optionIds: [\r\n              100\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 2,\r\n            nextQuestionId: 4\r\n          },\r\n          resultReport: 'The Personal Information Protection Act (“PIPA”) requires societies to develop a privacy policy. A privacy policy is a document that describes the personal information we are collecting: why we are collecting it, what we use it for, how we keep it secure and when we have to disclose it. It will also include how a person can review what we are doing with it.',\r\n          todo: 'Create a Privacy Policy',\r\n          reply: 'Got it - I’m adding this to your to-do list.'\r\n        },\r\n        {\r\n          id: 111,\r\n          expectedResponses: {\r\n            messageId: 1,\r\n            optionIds: [\r\n              101\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 2\r\n          },\r\n          resultReport: 'The Personal Information Protection Act (“PIPA”) requires societies to develop a privacy policy. A privacy policy is a document that describes the personal information we are collecting: why we are collecting it, what we use it for, how we keep it secure and when we have to disclose it. It will also include how a person can review what we are doing with it.',\r\n          reply: 'Great! Let’s talk about your privacy policy.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 111,\r\n      extraInfo: {\r\n        title: 'What is a privacy policy?',\r\n        content: 'A privacy policy is a document which describes whose personal information we are collecting: why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.'\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      type: 2,\r\n      content: 'Who is covered by your privacy policy?',\r\n      options: [\r\n        {\r\n          id: 200,\r\n          label: 'Directors (aka board members)'\r\n        },\r\n        {\r\n          id: 201,\r\n          label: 'Workers (employees or contractors)'\r\n        },\r\n        {\r\n          id: 202,\r\n          label: 'Volunteers'\r\n        },\r\n        {\r\n          id: 203,\r\n          label: 'The people you serve'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 210,\r\n          expectedResponses: {\r\n            messageId: 2,\r\n            optionIds: [\r\n              200,\r\n              201,\r\n              202,\r\n              203\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 3\r\n          },\r\n          resultReport: 'The Personal Information Protection Act (“PIPA”) requires societies to develop a privacy policy. A privacy policy is a document that describes the personal information we are collecting: why we are collecting it, what we use it for, how we keep it secure and when we have to disclose it. It will also include how a person can review what we are doing with it.',\r\n          reply: 'Good job'\r\n        },\r\n        {\r\n          id: 211,\r\n          expectedResponses: {\r\n            messageId: 2,\r\n            optionIds: []\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 3\r\n          },\r\n          resultReport: 'The Personal Information Protection Act (“PIPA”) requires societies to develop a privacy policy. A privacy policy is a document that describes the personal information we are collecting: why we are collecting it, what we use it for, how we keep it secure and when we have to disclose it. It will also include how a person can review what we are doing with it.',\r\n          reminder: 'Include all relevant individuals in your privacy policy',\r\n          reply: 'Hmm, you might be missing a few people who should be covered.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 211\r\n    },\r\n    {\r\n      id: 3,\r\n      type: 1,\r\n      content: 'Are your staff, directors and other volunteers trained on privacy policies',\r\n      options: [\r\n        {\r\n          id: 301,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 300,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 310,\r\n          expectedResponses: {\r\n            messageId: 3,\r\n            optionIds: [\r\n              300\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 2,\r\n            nextQuestionId: 4\r\n          },\r\n          reminder: 'Train your team members on privacy policies',\r\n          resultReport: 'Share your learnings with your team members to ensure policies are being followed across your non-profit.',\r\n          reply: 'Added to your list!'\r\n        },\r\n        {\r\n          id: 311,\r\n          expectedResponses: {\r\n            messageId: 3,\r\n            optionIds: [\r\n              301\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 2,\r\n            nextQuestionId: 4\r\n          },\r\n          resultReport: 'Share your learnings with your team members to ensure policies are being followed across your non-profit.',\r\n          reply: 'Great!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 311\r\n    }\r\n  ]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nexport const antiSpamModule: any = [\r\n    {\r\n        id: 50,\r\n        type: 3,\r\n        content: 'Canada’s Anti-Spam Law (CASL) sets out the rules about sending mass email messages to members and the public.',\r\n        options: [],\r\n        triggers: [\r\n            {\r\n                id: 5010,\r\n                expectedResponses: {\r\n                    messageId: 50,\r\n                    optionIds: []\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 51\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 5010\r\n    },\r\n    {\r\n        id: 51,\r\n        type: 1,\r\n        content: 'Would you like to learn about Canada’s Anti-Spam Law?',\r\n        options: [\r\n            {\r\n                id: 5101,\r\n                label: 'Let’s do it'\r\n            },\r\n            {\r\n                id: 5100,\r\n                label: 'Skip to results'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 5110,\r\n                expectedResponses: {\r\n                    messageId: 51,\r\n                    optionIds: [\r\n                        5100\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 60\r\n                },\r\n                resultReport: ''\r\n            },\r\n            {\r\n                id: 5111,\r\n                expectedResponses: {\r\n                    messageId: 51,\r\n                    optionIds: [\r\n                        5101\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 52\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 4511\r\n    },\r\n    {\r\n        id: 52,\r\n        type: 3,\r\n        content: 'A CEM is a message sent by any electronic means (i.e., email, text, instant message, tweet) that has as its purpose, or one of its purposes, to encourage participation in a commercial activity. The activities of non profits and charities may be commercial if they involve selling to the public.',\r\n        options: [],\r\n        triggers: [\r\n            {\r\n                id: 5210,\r\n                expectedResponses: {\r\n                    messageId: 52,\r\n                    optionIds: []\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 53\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 5210\r\n    },\r\n    {\r\n        id: 53,\r\n        type: 1,\r\n        content: 'Do you send mass email messages to your members or the public?',\r\n        options: [\r\n            {\r\n                id: 5301,\r\n                label: 'Yes'\r\n            },\r\n            {\r\n                id: 5300,\r\n                label: 'No'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 5310,\r\n                expectedResponses: {\r\n                    messageId: 53,\r\n                    optionIds: [\r\n                        5300\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 60\r\n                },\r\n                resultReport: ''\r\n            },\r\n            {\r\n                id: 5311,\r\n                expectedResponses: {\r\n                    messageId: 53,\r\n                    optionIds: [\r\n                        5301\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 54\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 5311\r\n    },\r\n    {\r\n        id: 54,\r\n        type: 1,\r\n        content: 'Are you a registered charity?',\r\n        options: [\r\n            {\r\n                id: 5401,\r\n                label: 'Yes'\r\n            },\r\n            {\r\n                id: 5400,\r\n                label: 'No'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 5410,\r\n                expectedResponses: {\r\n                    messageId: 54,\r\n                    optionIds: [\r\n                        5400\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 57\r\n                },\r\n                resultReport: ''\r\n            },\r\n            {\r\n                id: 5411,\r\n                expectedResponses: {\r\n                    messageId: 54,\r\n                    optionIds: [\r\n                        5401\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 55\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 5411,\r\n        extraInfo: {\r\n            title: 'I’m not sure',\r\n            content: 'A registered charity is a non-profit that has applied for registration as a charity with the CRA. Only charities can issue receipts for charitable donations and receive a tax deduction.'\r\n        }\r\n    },\r\n    {\r\n        id: 55,\r\n        type: 1,\r\n        content: 'Is fundraising the main reason the charity is sending mass email messages?',\r\n        options: [\r\n            {\r\n                id: 5501,\r\n                label: 'Yes'\r\n            },\r\n            {\r\n                id: 5500,\r\n                label: 'No'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 5510,\r\n                expectedResponses: {\r\n                    messageId: 55,\r\n                    optionIds: [\r\n                        5500\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 57\r\n                },\r\n                resultReport: ''\r\n            },\r\n            {\r\n                id: 5511,\r\n                expectedResponses: {\r\n                    messageId: 55,\r\n                    optionIds: [\r\n                        5501\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 56\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 5511\r\n    },\r\n    {\r\n        id: 56,\r\n        type: 3,\r\n        content: 'Message sent by or on behalf of a charity with “primary purpose of raising funds for the charity” are exempt from the application of CASL. If the charity sends other kinds of emails to the public then it will have to follow CASL rules.',\r\n        options: [],\r\n        triggers: [\r\n            {\r\n                id: 5610,\r\n                expectedResponses: {\r\n                    messageId: 56,\r\n                    optionIds: []\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 57\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 5610\r\n    },\r\n    {\r\n        id: 57,\r\n        type: 1,\r\n        content: 'Have recipients “opted-in” before sending mass emails messages?',\r\n        options: [\r\n            {\r\n                id: 5701,\r\n                label: 'Yes'\r\n            },\r\n            {\r\n                id: 5700,\r\n                label: 'No'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 5710,\r\n                expectedResponses: {\r\n                    messageId: 57,\r\n                    optionIds: [\r\n                        5700\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 58\r\n                },\r\n                reply: 'Make sure individuals “opt-in” to mass messages before adding them to your contact list.',\r\n                todo: 'Recipients must “opt-in” before receiving mess email messages.',\r\n                resultReport: 'This is required under Canada’s Anti-Spam Law (CASL).'\r\n            },\r\n            {\r\n                id: 5711,\r\n                expectedResponses: {\r\n                    messageId: 57,\r\n                    optionIds: [\r\n                        5701\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 58\r\n                },\r\n                reply: 'Great!',\r\n                resultReport: 'This is required under Canada’s Anti-Spam Law (CASL).'\r\n            }\r\n        ],\r\n        defaultTriggerId: 5711\r\n    },\r\n    {\r\n        id: 58,\r\n        type: 1,\r\n        content: 'Do you include contact information in your mass email messages?',\r\n        options: [\r\n            {\r\n                id: 5801,\r\n                label: 'Yes'\r\n            },\r\n            {\r\n                id: 5800,\r\n                label: 'No'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 5810,\r\n                expectedResponses: {\r\n                    messageId: 58,\r\n                    optionIds: [\r\n                        5800\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 59\r\n                },\r\n                reply: 'Be sure you add this to all your mass messages!',\r\n                todo: 'Include contact information in all mass email messages.',\r\n                resultReport: 'This is required under Canada’s Anti-Spam Law (CASL).'\r\n            },\r\n            {\r\n                id: 5811,\r\n                expectedResponses: {\r\n                    messageId: 58,\r\n                    optionIds: [\r\n                        5801\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 59\r\n                },\r\n                reply: 'Good job!',\r\n                resultReport: 'This is required under Canada’s Anti-Spam Law (CASL).'\r\n            }\r\n        ],\r\n        defaultTriggerId: 5811\r\n    },\r\n    {\r\n        id: 59,\r\n        type: 1,\r\n        content: 'Do you include an “unsubscribe” option within your mass messages?',\r\n        options: [\r\n            {\r\n                id: 5901,\r\n                label: 'Yes'\r\n            },\r\n            {\r\n                id: 5900,\r\n                label: 'No'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 5910,\r\n                expectedResponses: {\r\n                    messageId: 59,\r\n                    optionIds: [\r\n                        5900\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 60\r\n                },\r\n                reply: 'An unsubscribe option must be included in all of your mass email messages!',\r\n                todo: 'Include an “unsubscribe” option in all mass email messages',\r\n                resultReport: 'This is required under Canada’s Anti-Spam Law (CASL).'\r\n            },\r\n            {\r\n                id: 5911,\r\n                expectedResponses: {\r\n                    messageId: 59,\r\n                    optionIds: [\r\n                        5901\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'nextQuestion',\r\n                    nextQuestionId: 60\r\n                },\r\n                reply: 'Perfect!',\r\n                resultReport: 'This is required under Canada’s Anti-Spam Law (CASL).'\r\n            }\r\n        ],\r\n        defaultTriggerId: 5911\r\n    },\r\n    {\r\n        id: 60,\r\n        type: 1,\r\n        content: 'You completed module',\r\n        options: [\r\n            {\r\n                id: 6000,\r\n                label: 'Go To Result'\r\n            }\r\n        ],\r\n        triggers: [\r\n            {\r\n                id: 6010,\r\n                expectedResponses: {\r\n                    messageId: 60,\r\n                    optionIds: [\r\n                        6000\r\n                    ]\r\n                },\r\n                action: {\r\n                    type: 'exit'\r\n                },\r\n                resultReport: ''\r\n            }\r\n        ],\r\n        defaultTriggerId: 6010\r\n    }\r\n]","\r\n// privacy officer\r\nexport const privacyOfficerModule: any = [\r\n    {\r\n      id: 40,\r\n      type: 3,\r\n      content: 'Every non-profit needs to have one person who can answer questions about the collection, use, retention and disclosure of data. This role is called the Privacy Officer.',\r\n      options: [],\r\n      triggers: [\r\n        {\r\n          id: 4010,\r\n          expectedResponses: {\r\n            messageId: 40,\r\n            optionIds: []\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 41\r\n          },\r\n          resultReport: ''\r\n        }\r\n      ],\r\n      defaultTriggerId: 4010\r\n    },\r\n    {\r\n      id: 41,\r\n      type: 1,\r\n      content: 'Does your non-profit have a designated privacy officer?',\r\n      options: [\r\n        {\r\n          id: 4101,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 4100,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4110,\r\n          expectedResponses: {\r\n            messageId: 41,\r\n            optionIds: [\r\n              4100\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 7,\r\n            nextQuestionId: 43\r\n          },\r\n          todo: 'Designate a privacy officer',\r\n          resultReport: 'Every non-profit is required to have one person who can answer questions about the collection, use, retention and disclosure of data. This role is called the Privacy Officer.',\r\n          reply: 'Good job'\r\n        },\r\n        {\r\n          id: 4111,\r\n          expectedResponses: {\r\n            messageId: 41,\r\n            optionIds: [\r\n              4101\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 42\r\n          },\r\n          resultReport: 'Every non-profit is required to have one person who can answer questions about the collection, use, retention and disclosure of data. This role is called the Privacy Officer.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 4111\r\n    },\r\n    {\r\n      id: 42,\r\n      type: 1,\r\n      content: 'Is your privacy officers contact information included in your privacy policy?',\r\n      options: [\r\n        {\r\n          id: 4201,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 4200,\r\n          label: 'No'\r\n        },\r\n        {\r\n          id: 4202,\r\n          label: 'No Privacy Policy yet'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4210,\r\n          expectedResponses: {\r\n            messageId: 42,\r\n            optionIds: [\r\n              4200\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 7,\r\n            nextQuestionId: 43\r\n          },\r\n          reminder: 'Include the privacy officers contact information in privacy policy',\r\n          resultReport: 'Be sure to include the contact information for your privacy officer in your privacy policy.',\r\n          reply: 'Be sure to add this to your privacy policy!'\r\n        },\r\n        {\r\n          id: 4211,\r\n          expectedResponses: {\r\n            messageId: 42,\r\n            optionIds: [\r\n              4202\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 7,\r\n            nextQuestionId: 43\r\n          },\r\n          reminder: 'Include the privacy officers contact information in privacy policy',\r\n          resultReport: 'Be sure to include the contact information for your privacy officer in your privacy policy.',\r\n          reply: 'Add this to your privacy policy once you create it!'\r\n        },\r\n        {\r\n          id: 4212,\r\n          expectedResponses: {\r\n            messageId: 42,\r\n            optionIds: [\r\n              4201\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 7,\r\n            nextQuestionId: 43\r\n          },\r\n          resultReport: 'Be sure to include the contact information for your privacy officer in your privacy policy.',\r\n          reply: 'Great!'\r\n        }\r\n      ],\r\n      defaultTriggerId: 4212\r\n    }\r\n  ]","\r\n\r\n// Requests for Information\r\nexport const requestsForInformationModule: any = [\r\n    {\r\n      id: 43,\r\n      type: 3,\r\n      content: 'Sometimes a non-profit will get requests for information. If the non-profit provides community or social services, the request could be from clients. If it is an arts organization, requests might include donation related information. If the request is coming from member of a non-profit society, this is discussed in detail on the lawfornonprofits.ca website and FAQ\\'s.',\r\n      options: [],\r\n      triggers: [\r\n        {\r\n          id: 4310,\r\n          expectedResponses: {\r\n            messageId: 43,\r\n            optionIds: []\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 44\r\n          },\r\n          resultReport: ''\r\n        }\r\n      ],\r\n      defaultTriggerId: 4310\r\n    },\r\n    {\r\n      id: 44,\r\n      type: 1,\r\n      content: 'Does your privacy policy explain how someone could access the information you collect?',\r\n      options: [\r\n        {\r\n          id: 4401,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 4400,\r\n          label: 'No'\r\n        },\r\n        {\r\n          id: 4402,\r\n          label: 'No Privacy Policy yet'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4410,\r\n          expectedResponses: {\r\n            messageId: 44,\r\n            optionIds: [\r\n              4400\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 45\r\n          },\r\n          reminder: 'Describe how to request information in privacy policy',\r\n          resultReport: 'Include this information in your privacy policy with the privacy officer’s contact information.',\r\n          reply: 'Check out the suggested wording in your results at the end of the module to add this to your privacy policy! '\r\n        },\r\n        {\r\n          id: 4411,\r\n          expectedResponses: {\r\n            messageId: 44,\r\n            optionIds: [\r\n              4402\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 45\r\n          },\r\n          reminder: 'Describe how to request information in privacy policy',\r\n          resultReport: 'Include this information in your privacy policy with the privacy officer’s contact information.',\r\n          reply: 'Be sure to add this to your privacy policy once you create it'\r\n        },\r\n        {\r\n          id: 4412,\r\n          expectedResponses: {\r\n            messageId: 44,\r\n            optionIds: [\r\n              4401\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 45\r\n          },\r\n          resultReport: 'Include this information in your privacy policy with the privacy officer’s contact information.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 4412\r\n    },\r\n    {\r\n      id: 45,\r\n      type: 1,\r\n      content: 'Have you received or expect to receive requests for information?',\r\n      options: [\r\n        {\r\n          id: 4501,\r\n          label: 'Yes'\r\n        },\r\n        {\r\n          id: 4500,\r\n          label: 'No'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4510,\r\n          expectedResponses: {\r\n            messageId: 45,\r\n            optionIds: [\r\n              4500\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 8,\r\n            nextQuestionId: 50\r\n          },\r\n          resultReport: ''\r\n        },\r\n        {\r\n          id: 4511,\r\n          expectedResponses: {\r\n            messageId: 45,\r\n            optionIds: [\r\n              4501\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 46\r\n          },\r\n          resultReport: ''\r\n        }\r\n      ],\r\n      defaultTriggerId: 4511\r\n    },\r\n    {\r\n      id: 46,\r\n      type: 1,\r\n      content: 'Who is asking',\r\n      options: [\r\n        {\r\n          id: 4600,\r\n          label: 'Someone looking for their information'\r\n        },\r\n        {\r\n          id: 4601,\r\n          label: 'Someone looking for information about others'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4610,\r\n          expectedResponses: {\r\n            messageId: 46,\r\n            optionIds: [\r\n              4600\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 47\r\n          },\r\n          resultReport: ''\r\n        },\r\n        {\r\n          id: 4611,\r\n          expectedResponses: {\r\n            messageId: 46,\r\n            optionIds: [\r\n              4601\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 48\r\n          },\r\n          resultReport: ''\r\n        }\r\n      ],\r\n      defaultTriggerId: 4611\r\n    },\r\n    {\r\n      id: 47,\r\n      type: 1,\r\n      content: 'Are they requesting .. ',\r\n      options: [\r\n        {\r\n          id: 4700,\r\n          label: 'Their personal information'\r\n        },\r\n        {\r\n          id: 4701,\r\n          label: 'How their personal information is being used'\r\n        },\r\n        {\r\n          id: 4702,\r\n          label: 'Who has access to their personal information'\r\n        },\r\n        {\r\n          id: 4703,\r\n          label: 'Other information'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4710,\r\n          expectedResponses: {\r\n            messageId: 47,\r\n            optionIds: [\r\n              4703\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 48\r\n          },\r\n          resultReport: ''\r\n        },\r\n        {\r\n          id: 4711,\r\n          expectedResponses: {\r\n            messageId: 47,\r\n            optionIds: [\r\n              4700,\r\n              4701,\r\n              4702\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 8,\r\n            nextQuestionId: 50\r\n          },\r\n          reply: 'Great, they can have this information!',\r\n          resultReport: ''\r\n        }\r\n      ],\r\n      defaultTriggerId: 4711\r\n    },\r\n    {\r\n      id: 48,\r\n      type: 1,\r\n      content: 'Is the information .. ',\r\n      options: [\r\n        {\r\n          id: 4800,\r\n          label: 'Protected by solicitor-client privilege?'\r\n        },\r\n        {\r\n          id: 4801,\r\n          label: 'Part of an incomplete investigation/appeal'\r\n        },\r\n        {\r\n          id: 4802,\r\n          label: 'Part of a mediation/arbitration'\r\n        },\r\n        {\r\n          id: 4803,\r\n          label: 'None of the above'\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4810,\r\n          expectedResponses: {\r\n            messageId: 48,\r\n            optionIds: [\r\n              4803\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextQuestion',\r\n            nextQuestionId: 49\r\n          },\r\n          resultReport: 'If the information requested is: protected by solicitor-client privilege, part of an incomplete investigation/appeal, or part of a mediation/arbitration, don’t give out this information. If you plan to deny a request for information, consult a lawyer.'\r\n        },\r\n        {\r\n          id: 4811,\r\n          expectedResponses: {\r\n            messageId: 48,\r\n            optionIds: [\r\n              4800,\r\n              4801,\r\n              4802\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 8,\r\n            nextQuestionId: 50\r\n          },\r\n          todo: 'Don’t disclose sensitive information. Consult a lawyer before denying a request',\r\n          reply: 'Don’t give out this information. If you plan to deny a request for information, consult a lawyer. ',\r\n          resultReport: 'If the information requested is: protected by solicitor-client privilege, part of an incomplete investigation/appeal, or part of a mediation/arbitration, don’t give out this information. If you plan to deny a request for information, consult a lawyer.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 4811\r\n    },\r\n    {\r\n      id: 49,\r\n      type: 1,\r\n      content: 'Would disclosing this information.. ',\r\n      options: [\r\n        {\r\n          id: 4900,\r\n          label: 'Reveal personal information about another person'\r\n        },\r\n        {\r\n          id: 4901,\r\n          label: 'Threaten the safety/harm of another person?'\r\n        },\r\n        {\r\n          id: 4902,\r\n          label: 'Cause grave harm to the requester?'\r\n        },\r\n        {\r\n          id: 4903,\r\n          label: 'None of the above '\r\n        }\r\n      ],\r\n      triggers: [\r\n        {\r\n          id: 4910,\r\n          expectedResponses: {\r\n            messageId: 49,\r\n            optionIds: [\r\n              4903\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 8,\r\n            nextQuestionId: 50\r\n          },\r\n          reply: 'Proceed with caution. If you plan to deny a request for information, consult a lawyer.',\r\n          resultReport: 'If the information requested is: protected by solicitor-client privilege, part of an incomplete investigation/appeal, or part of a mediation/arbitration, don’t give out this information. If you plan to deny a request for information, consult a lawyer.'\r\n        },\r\n        {\r\n          id: 4911,\r\n          expectedResponses: {\r\n            messageId: 49,\r\n            optionIds: [\r\n              4900,\r\n              4901,\r\n              4902\r\n            ]\r\n          },\r\n          action: {\r\n            type: 'nextModule',\r\n            nextModuleId: 8,\r\n            nextQuestionId: 50\r\n          },\r\n          todo: 'Don’t disclose sensitive information. Consult a lawyer before denying a request',\r\n          reply: 'Don’t give out this information. If you plan to deny a request for information, consult a lawyer. ',\r\n          resultReport: 'If the information requested would: reveal personal information about another person, threaten the safety/harm of another person, or cause grave harm to the requester, don’t give out this information.'\r\n        }\r\n      ],\r\n      defaultTriggerId: 4911\r\n    }\r\n  ]","import { Item, Result } from './context';\r\nimport { Message, MessageFactory, MessageType } from '../model/index'\r\nimport { module2 } from './mod2'\r\nimport { privacyPolicyModule } from './privacyPolicyModule'\r\nimport { antiSpamModule } from './antiSpamModule'\r\nimport { privacyOfficerModule } from './privacyOfficerModule'\r\nimport { requestsForInformationModule } from './requestsForInformationModule'\r\n\r\nexport interface SurveyDialogue {\r\n    [key: number]: Message\r\n}\r\n\r\nexport interface Module {\r\n    name: string,\r\n    modules?: { [key: number]: Module },\r\n    nodes?: SurveyDialogue\r\n}\r\n\r\n// COMMENTED OUT SURVEY UNTIL WE UPDATE IT\r\n\r\nexport function getSurvey() {\r\n    let masterModule: any = []\r\n    masterModule.concat(privacyPolicyModule, module2, privacyOfficerModule, requestsForInformationModule, antiSpamModule)\r\n    return generateSurveyDialogue(masterModule)\r\n}\r\n\r\nexport function getModules() {\r\n    const privacyPolicySurvey: SurveyDialogue = generateSurveyDialogue(privacyPolicyModule);\r\n    const personalInfoSurvey: SurveyDialogue = generateSurveyDialogue(module2);\r\n    \r\n    const privacyOfficerSurvey: SurveyDialogue = generateSurveyDialogue(privacyOfficerModule) // module: 3  start qid 40 \r\n    const requestsForInformationSurvey: SurveyDialogue = generateSurveyDialogue(requestsForInformationModule);\r\n    const antiSpamSurvey: SurveyDialogue = generateSurveyDialogue(antiSpamModule);\r\n\r\n    const modules: any ={ 1: { name: \"Privacy Policy\", nodes: privacyPolicySurvey },\r\n    2: { name: \"Personal Info\", nodes: personalInfoSurvey },\r\n    3: { name: \"Privacy Officer\", nodes: privacyOfficerSurvey },\r\n    7: { name: \"Requests for Information\", nodes: requestsForInformationSurvey },\r\n    8: { name: \"Anti Spam\", nodes: antiSpamSurvey }}\r\n\r\n    return modules\r\n\r\n}\r\n\r\nexport function generateSurveyDialogue(moduleData: any) {\r\n    let survey: SurveyDialogue = {}\r\n    moduleData.forEach((question: any) => {\r\n        try {\r\n            let newMessage: Message = MessageFactory.createMessageFromData(question)\r\n            survey[newMessage.id] = newMessage;\r\n        } catch (error) {\r\n            console.log(\"questionid failed to cast to Messagetype: \" + question.id)\r\n        }\r\n    });\r\n    console.log(\"done\");\r\n    return survey\r\n}\r\n\r\n// function getSurvey() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[1] = MessageFactory.createMessageFromData(\r\n//         {\r\n//             id: 1,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your org have a privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 101,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 100,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 101 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 101, repo: \"some repo on quetion 1 Yes\" },\r\n//                     nextQuestionId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 100 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 100, repo: \"some repo on quetion 1 No\" },\r\n//                     todos: [{ title: \"Todo Item 1\" }],\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"What is a privacy policy?\",\r\n//                 content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\r\n//                     \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     // questionId = 2 belongs to another submodule, so it's not included in here\r\n//     survey[3] = createNode(\r\n//         {\r\n//             id: 3,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who is covered in your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 300,\r\n//                     label: \"All\"\r\n//                 },\r\n//                 {\r\n//                     id: 301,\r\n//                     label: \"Not All\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 300 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 3, optionId: 300, repo: \"some repo on quetion 3 No\" },\r\n//                     nextQuestionId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 301 }\r\n//                     ],\r\n//                     result: { questionId: 3, optionId: 301, repo: \"some repo on quetion 3 Yes\" },\r\n//                     todos: [{ title: \"Todo Item 2\" }],\r\n//                     nextQuestionId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[4] = createNode(\r\n//         {\r\n//             id: 4,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org operates website?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 401 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 401, repo: \"some repo on quetion 4 Yes\" },\r\n//                     nextQuestionId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 400 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 400, repo: \"some repo on quetion 4 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[5] = createNode(\r\n//         {\r\n//             id: 5,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org uses social media?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 501 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 501, repo: \"some repo on quetion 5 Yes\" },\r\n//                     nextQuestionId: 8\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 500 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 500, repo: \"some repo on quetion 5 No\" },\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[6] = createNode(\r\n//         {\r\n//             id: 6,\r\n//             type: NodeTypes.single,\r\n//             content: \"Collect data for analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 601,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 600,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 601 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 601, repo: \"some repo on quetion 6 Yes\" },\r\n//                     nextQuestionId: 9\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 600 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 600, repo: \"some repo on quetion 6 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT ARE DATA ANALYTICS?\",\r\n//                 content: \"Data analytics refers to tracking website usage for reporting and evaluating purposes. \" +\r\n//                     \"Google Analytics is a common example of a data analytics service.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[7] = createNode(\r\n//         {\r\n//             id: 7,\r\n//             type: NodeTypes.single,\r\n//             content: \"List of people trained on privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 700,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 701 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 7, optionId: 701, repo: \"some repo on quetion 7 Yes\" },\r\n//                     nextQuestionId: 2\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 700 }\r\n//                     ],\r\n//                     result: { questionId: 7, optionId: 700, repo: \"some repo on quetion 7 No\" },\r\n//                     todos: [{ title: \"Todo Item 5\" }],\r\n//                     nextQuestionId: 2\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[8] = createNode(\r\n//         {\r\n//             id: 8,\r\n//             type: NodeTypes.single,\r\n//             content: \"Reviewed social media terms?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 801,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 800,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 801 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 8, optionId: 801, repo: \"some repo on quetion 8 Yes\" },\r\n//                     nextQuestionId: 7\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 800 }\r\n//                     ],\r\n//                     result: { questionId: 8, optionId: 800, repo: \"some repo on quetion 8 No\" },\r\n//                     todos: [{ title: \"Todo Item 4\" }],\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS THIS?\",\r\n//                 content: \"Terms and conditions are the agreement between a service and the service user. \" +\r\n//                     \"This is the legal text that we agree to before using a service and it can often be \" +\r\n//                     \"accessed by a link on the bottom of a website or within the settings.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[9] = createNode(\r\n//         {\r\n//             id: 9,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy describe the collection of analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 901,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 900,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 901 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 9, optionId: 901, repo: \"some repo on quetion 9 Yes\" },\r\n//                     nextQuestionId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 900 }\r\n//                     ],\r\n//                     result: { questionId: 9, optionId: 900, repo: \"some repo on quetion 9 No\" },\r\n//                     todos: [{ title: \"Todo Item 3\" }],\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n\r\n\r\n\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part1() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[1] = createNode(\r\n//         {\r\n//             id: 1,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your org have a privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 101,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 100,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 101 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 101, repo: \"some repo on quetion 1 Yes\" },\r\n//                     nextQuestionId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 100 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 100, repo: \"some repo on quetion 1 No\" },\r\n//                     todos: [{ title: \"Todo Item 1\" }],\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"What is a privacy policy?\",\r\n//                 content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\r\n//                     \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     // questionId = 2 belongs to another submodule, so it's not included in here\r\n//     survey[3] = createNode(\r\n//         {\r\n//             id: 3,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who is covered in your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 300,\r\n//                     label: \"All\"\r\n//                 },\r\n//                 {\r\n//                     id: 301,\r\n//                     label: \"Not All\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 300 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 3, optionId: 300, repo: \"some repo on quetion 3 No\" },\r\n//                     nextQuestionId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 301 }\r\n//                     ],\r\n//                     result: { questionId: 3, optionId: 301, repo: \"some repo on quetion 3 Yes\" },\r\n//                     reminders: [{ title: \"Todo Item 2\" }],\r\n//                     nextQuestionId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[4] = createNode(\r\n//         {\r\n//             id: 4,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org operates website?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 401 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 401, repo: \"some repo on quetion 4 Yes\" },\r\n//                     nextQuestionId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 400 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 400, repo: \"some repo on quetion 4 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[5] = createNode(\r\n//         {\r\n//             id: 5,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org uses social media?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 501 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 501, repo: \"some repo on quetion 5 Yes\" },\r\n//                     nextQuestionId: 8\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 500 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 500, repo: \"some repo on quetion 5 No\" },\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[6] = createNode(\r\n//         {\r\n//             id: 6,\r\n//             type: NodeTypes.single,\r\n//             content: \"Collect data for analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 601,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 600,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 601 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 601, repo: \"some repo on quetion 6 Yes\" },\r\n//                     nextQuestionId: 9\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 600 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 600, repo: \"some repo on quetion 6 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT ARE DATA ANALYTICS?\",\r\n//                 content: \"Data analytics refers to tracking website usage for reporting and evaluating purposes. \" +\r\n//                     \"Google Analytics is a common example of a data analytics service.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[7] = createNode(\r\n//         {\r\n//             id: 7,\r\n//             type: NodeTypes.single,\r\n//             content: \"List of people trained on privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 700,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 701 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 7, optionId: 701, repo: \"some repo on quetion 7 Yes\" },\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 700 }\r\n//                     ],\r\n//                     result: { questionId: 7, optionId: 700, repo: \"some repo on quetion 7 No\" },\r\n//                     reminders: [{ title: \"Todo Item 5\" }],\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[8] = createNode(\r\n//         {\r\n//             id: 8,\r\n//             type: NodeTypes.single,\r\n//             content: \"Reviewed social media terms?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 801,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 800,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 801 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 8, optionId: 801, repo: \"some repo on quetion 8 Yes\" },\r\n//                     nextQuestionId: 7\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 800 }\r\n//                     ],\r\n//                     result: { questionId: 8, optionId: 800, repo: \"some repo on quetion 8 No\" },\r\n//                     reminders: [{ title: \"Todo Item 4\" }],\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS THIS?\",\r\n//                 content: \"Terms and conditions are the agreement between a service and the service user. \" +\r\n//                     \"This is the legal text that we agree to before using a service and it can often be \" +\r\n//                     \"accessed by a link on the bottom of a website or within the settings.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[9] = createNode(\r\n//         {\r\n//             id: 9,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy describe the collection of analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 901,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 900,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 901 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 9, optionId: 901, repo: \"some repo on quetion 9 Yes\" },\r\n//                     nextQuestionId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 900 }\r\n//                     ],\r\n//                     result: { questionId: 9, optionId: 900, repo: \"some repo on quetion 9 No\" },\r\n//                     reminders: [{ title: \"Todo Item 3\" }],\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n\r\n\r\n\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part2() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[2] = createNode(\r\n//         {\r\n//             id: 2,\r\n//             type: NodeTypes.message,\r\n//             content: \"Explain what is personal info and what isn’t\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 10\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[10] = createNode(\r\n//         {\r\n//             id: 10,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your org collect personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1001,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1000,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 10, optionId: 1001 }\r\n//                     ],\r\n//                     result: { questionId: 10, optionId: 1001, repo: \"some repo on question 10 Yes\" },\r\n//                     nextQuestionId: 12\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 10, optionId: 1000 }\r\n//                     ],\r\n//                     result: { questionId: 10, optionId: 1000, repo: \"some repo on question 10 No\" },\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[12] = createNode(\r\n//         {\r\n//             id: 12,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you explain what the P.I. will be used for?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1201,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1200,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 12, optionId: 1201 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 12, optionId: 1201, repo: \"some repo on question 12 Yes\" },\r\n//                     nextQuestionId: 13\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 12, optionId: 1200 }\r\n//                     ],\r\n//                     todos: [{ title: \"Todo Item 6\" }],\r\n//                     result: { questionId: 12, optionId: 1200, repo: \"some repo on question 12 No\" },\r\n//                     nextQuestionId: 13\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[13] = createNode(\r\n//         {\r\n//             id: 13,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you obtain consent from the person?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1301,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1300,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 13, optionId: 1301 }\r\n//                     ],\r\n//                     result: { questionId: 13, optionId: 1301, repo: \"some repo on question 13 Yes\" },\r\n//                     nextQuestionId: 15\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 13, optionId: 1300 }\r\n//                     ],\r\n//                     result: { questionId: 13, optionId: 1300, repo: \"some repo on question 13 No\" },\r\n//                     nextQuestionId: 14\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[14] = createNode(\r\n//         {\r\n//             id: 14,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Our information is collected .. Select all that apply.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 14, optionId: 1401 }\r\n//                     ],\r\n//                     result: { questionId: 14, optionId: 1401, repo: \"some repo on question 14 Yes\" },\r\n//                     nextQuestionId: 17\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 14, optionId: 1400 }\r\n//                     ],\r\n//                     result: { questionId: 14, optionId: 1400, repo: \"some repo on question 14 No\" },\r\n//                     nextQuestionId: 16\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[15] = createNode(\r\n//         {\r\n//             id: 15,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Do you use a consent form?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 15, optionId: 1501 }\r\n//                     ],\r\n//                     response: [\"Good Job.\"],\r\n//                     result: { questionId: 15, optionId: 1501, repo: \"some repo on question 15 Yes\" },\r\n//                     nextQuestionId: 14\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 15, optionId: 1500 }\r\n//                     ],\r\n//                     reminders: [{ title: \"Todo Item 7\" }],\r\n//                     result: { questionId: 15, optionId: 1500, repo: \"some repo on question 15 No\" },\r\n//                     nextQuestionId: 16\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[16] = createNode(\r\n//         {\r\n//             id: 16,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the person an employee of the org?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1601,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1600,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 16, optionId: 1601 }\r\n//                     ],\r\n//                     result: { questionId: 16, optionId: 1601, repo: \"some repo on question 16 Yes\" },\r\n//                     nextQuestionId: 18\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 16, optionId: 1600 }\r\n//                     ],\r\n//                     result: { questionId: 16, optionId: 1600, repo: \"some repo on question 16 No\" },\r\n//                     todos: [{ title: \"Todo Item 8\" }],\r\n//                     nextQuestionId: 17\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[17] = createNode(\r\n//         {\r\n//             id: 17,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does the P.I you collect help fufill the orgs mission/purpose?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1700,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 17, optionId: 1701 }\r\n//                     ],\r\n//                     result: { questionId: 17, optionId: 1701, repo: \"some repo on question 17 Yes\" },\r\n//                     nextQuestionId: 20\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 17, optionId: 1700 }\r\n//                     ],\r\n//                     result: { questionId: 17, optionId: 1700, repo: \"some repo on question 17 No\" },\r\n//                     nextQuestionId: 20\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"I NEED MORE INFORMATION\",\r\n//                 content: \"Information collected should be related to the society’s purpose/goals. \" +\r\n//                     \"For example, “we are a theatre company and collect information from our subscribers to sell tickets.”\"\r\n//             },\r\n//         }\r\n//     )\r\n//     survey[18] = createNode(\r\n//         {\r\n//             id: 18,\r\n//             type: NodeTypes.single,\r\n//             content: \"Select reasons for collecting employee information. Select one.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1800,\r\n//                     label: \"Establish employment\"\r\n//                 },\r\n//                 {\r\n//                     id: 1801,\r\n//                     label: \"Manage employment\"\r\n//                 },\r\n//                 {\r\n//                     id: 1802,\r\n//                     label: \"Terminate employment\"\r\n//                 },\r\n//                 {\r\n//                     id: 1803,\r\n//                     label: \"Other reasons\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 18, optionId: 1803 }\r\n//                     ],\r\n//                     result: { questionId: 18, optionId: 1803, repo: \"some repo on question 18 other reasons\" },\r\n//                     todos: [{ title: \"Todo Item 8\" }],\r\n//                     nextQuestionId: 17\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 18, optionId: 1800, repo: \"some repo on question 18\" },\r\n//                     nextQuestionId: 19\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[19] = createNode(\r\n//         {\r\n//             id: 19,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you let these employees know ahead of time?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1901,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1900,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 19, optionId: 1900 }\r\n//                     ],\r\n//                     result: { questionId: 19, optionId: 1900, repo: \"some repo on question 19 N0\" },\r\n//                     todos: [{ title: \"Todo Item 9\" }],\r\n//                     nextQuestionId: 17\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 19, optionId: 1901 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 18, optionId: 1800, repo: \"some repo on question 19 Yes\" },\r\n//                     nextQuestionId: 17\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[20] = createNode(\r\n//         {\r\n//             id: 20,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Select the reasons you collect personal information. Select all that apply.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2000,\r\n//                     label: \"To communicate with members\"\r\n//                 },\r\n//                 {\r\n//                     id: 2001,\r\n//                     label: \"To send newsletters and invitations\"\r\n//                 },\r\n//                 {\r\n//                     id: 2002,\r\n//                     label: \"For service phone calls and emails\"\r\n//                 },\r\n//                 {\r\n//                     id: 2003,\r\n//                     label: \"For audit purposes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2004,\r\n//                     label: \"To solicit donations\"\r\n//                 },\r\n//                 {\r\n//                     id: 2005,\r\n//                     label: \"To issue tax receipts\"\r\n//                 },\r\n//                 {\r\n//                     id: 2006,\r\n//                     label: \"Other reasons\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 20, optionId: 2006 }\r\n//                     ],\r\n//                     result: { questionId: 20, optionId: 2006, repo: \"some repo on question 20 Other reasons\" },\r\n//                     response: [\"Your use of personal information could be problematic. Check the “Permissions for Personal Information” at the end of the assessment to learn more.\"],\r\n//                     todos: [{title: \"Todo Item 10\"}],\r\n//                     nextQuestionId: 21\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     response: [\"Great - these are all permissible uses of personal information!\"],\r\n//                     result: { questionId: 20, optionId: 2000, repo: \"some repo on question 20\" },\r\n//                     nextQuestionId: 21\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[21] = createNode(\r\n//         {\r\n//             id: 21,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your organization give out personal information either within or outside the organization?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2101,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2100,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 21, optionId: 2100 }\r\n//                     ],\r\n//                     result: { questionId: 21, optionId: 2100, repo: \"some repo on question 21 No\" },\r\n//                     nextQuestionId: 28\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 21, optionId: 2101 }\r\n//                     ],\r\n//                     result: { questionId: 21, optionId: 2101, repo: \"some repo on question 21 Yes\" },\r\n//                     nextQuestionId: 22\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[22] = createNode(\r\n//         {\r\n//             id: 22,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you get explicit consent from people before giving out their personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2201,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2200,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 22, optionId: 2200 }\r\n//                     ],\r\n//                     result: { questionId: 22, optionId: 2200, repo: \"some repo on question 22 No\" },\r\n//                     nextQuestionId: 23\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 22, optionId: 2201 }\r\n//                     ],\r\n//                     response: [\"Great!\"],\r\n//                     result: { questionId: 22, optionId: 2201, repo: \"some repo on question 22 Yes\" },\r\n//                     nextQuestionId: 24\r\n//                 }\r\n//             ],\r\n//             extraInfo: {title: \"WHAT IS EXPLICIT CONSENT?\", content: \"For example, this could include...\"}\r\n//         }\r\n//     )\r\n//     survey[23] = createNode(\r\n//         {\r\n//             id: 23,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the purpose for collecting personal information obvious?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2301,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2300,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 23, optionId: 2300 }\r\n//                     ],\r\n//                     result: { questionId: 23, optionId: 2300, repo: \"some repo on question 23 No\" },\r\n//                     todos: [{title: \"Todo Item 11\"}],\r\n//                     nextQuestionId: 25\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 23, optionId: 2301 }\r\n//                     ],\r\n//                     result: { questionId: 23, optionId: 2301, repo: \"some repo on question 23 Yes\" },\r\n//                     nextQuestionId: 25\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[24] = createNode(\r\n//         {\r\n//             id: 24,\r\n//             type: NodeTypes.single,\r\n//             content: \"Have you been required to provide personal information due to a court order or subpoena?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 24, optionId: 2400 }\r\n//                     ],\r\n//                     result: { questionId: 24, optionId: 2400, repo: \"some repo on question 24 No\" },\r\n//                     nextQuestionId: 26\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 24, optionId: 2401 }\r\n//                     ],\r\n//                     result: { questionId: 24, optionId: 2401, repo: \"some repo on question 24 Yes\" },\r\n//                     nextQuestionId: 27\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[25] = createNode(\r\n//         {\r\n//             id: 25,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do these people voluntarily provide their personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 25, optionId: 2500 }\r\n//                     ],\r\n//                     result: { questionId: 25, optionId: 2500, repo: \"some repo on question 25 No\" },\r\n//                     todos: [{title: \"Todo Item 12\"}],\r\n//                     nextQuestionId: 24\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 25, optionId: 2501 }\r\n//                     ],\r\n//                     response: [\"Good job!\"],\r\n//                     result: { questionId: 25, optionId: 2501, repo: \"some repo on question 25 Yes\" },\r\n//                     nextQuestionId: 24\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[26] = createNode(\r\n//         {\r\n//             id: 26,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Select all the reasons you disclose personal information internally, including information from a Members Register. (Multiple choice, select all that apply).\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2600,\r\n//                     label: \"To register/call a general meeting\"\r\n//                 },\r\n//                 {\r\n//                     id: 2601,\r\n//                     label: \"To submit a member proposal\"\r\n//                 },\r\n//                 {\r\n//                     id: 2602,\r\n//                     label: \"To influence the voting of members\"\r\n//                 },\r\n//                 {\r\n//                     id: 2603,\r\n//                     label: \"Other reasons\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 26, optionId: 2603 }\r\n//                     ],\r\n//                     result: { questionId: 26, optionId: 2603, repo: \"some repo on question 27 Other reasons\" },\r\n//                     todos: [{title: \"Todo Item 14\"}],\r\n//                     nextQuestionId: 28\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     response: [\"Great!\"],\r\n//                     result: { questionId: 26, optionId: 2601, repo: \"some repo on question 26\" },\r\n//                     nextQuestionId: 28\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[27] = createNode(\r\n//         {\r\n//             id: 27,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy explain that you may disclose personal information for legal reasons?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2700,\r\n//                     label: \"No\"\r\n//                 },\r\n//                 {\r\n//                     id: 2702,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 27, optionId: 2700 }\r\n//                     ],\r\n//                     result: { questionId: 27, optionId: 2700, repo: \"some repo on question 27 No\" },\r\n//                     response: [\"Got it, adding this to your to-do list!\"],\r\n//                     reminders: [{title: \"Todo Item 13\"}],\r\n//                     nextQuestionId: 26\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 27, optionId: 2701 }\r\n//                     ],\r\n//                     result: { questionId: 27, optionId: 2701, repo: \"some repo on question 27 Yes\" },\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 26\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 27, optionId: 2702 }\r\n//                     ],\r\n//                     response: [\"Okay, be sure to add this information to your privacy policy once you create it!\"],\r\n//                     reminders: [{title: \"Todo Item 13\"}],\r\n//                     result: { questionId: 27, optionId: 2702, repo: \"some repo on question 27 No PP\" },\r\n//                     nextQuestionId: 26\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[28] = createNode(\r\n//         {\r\n//             id: 28,\r\n//             type: NodeTypes.single,\r\n//             content: \"Let’s talk about storing personal information! Select everyone who can access personal information.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2800,\r\n//                     label: \"All employees\"\r\n//                 },\r\n//                 {\r\n//                     id: 2801,\r\n//                     label: \"All employees and volunteers\"\r\n//                 },\r\n//                 {\r\n//                     id: 2802,\r\n//                     label: \"A small number of authorized individuals\"\r\n//                 },\r\n//                 {\r\n//                     id: 2803,\r\n//                     label: \"No one\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2800 }\r\n//                     ],\r\n//                     result: { questionId: 28, optionId: 2800, repo: \"some repo on question 28 All\" },\r\n//                     response: [\"Okay for small organizations. If you are a larger organization, you will want to reduce access to only a few individuals.\"],\r\n//                     nextQuestionId: 29\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2801 }\r\n//                     ],\r\n//                     result: { questionId: 28, optionId: 2801, repo: \"some repo on question 28 small\" },\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 29\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2802 }\r\n//                     ],\r\n//                     response: [\"Let’s change the access to a few designated individuals!\"],\r\n//                     todos: [{title: \"Todo Item 15\"}],\r\n//                     result: { questionId: 28, optionId: 2802, repo: \"some repo on question 28 volunteers\" },\r\n//                     nextQuestionId: 29\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2803 }\r\n//                     ],\r\n//                     response: [\"Let’s change the access to a few designated individuals!\"],\r\n//                     todos: [{title: \"Todo Item 15\"}],\r\n//                     result: { questionId: 28, optionId: 2803, repo: \"some repo on question 28 no one\" },\r\n//                     nextQuestionId: 29\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[29] = createNode(\r\n//         {\r\n//             id: 29,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you have policies and procedures to keep personal information secure?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 2900,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 29, optionId: 2900 }\r\n//                     ],\r\n//                     result: { questionId: 29, optionId: 2900, repo: \"some repo on question 29 No\" },\r\n//                     reminders: [{title: \"Todo Item 16\"}],\r\n//                     response: [\"Be sure to keep personal information secure! Check your results at the end of the module to find more tips on securing personal information.\"],\r\n//                     nextQuestionId: 30\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 29, optionId: 2901 }\r\n//                     ],\r\n//                     result: { questionId: 29, optionId: 2901, repo: \"some repo on question 29 Yes\" },\r\n//                     response: [\"Good for you!\"],\r\n//                     nextQuestionId: 30\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[30] = createNode(\r\n//         {\r\n//             id: 30,\r\n//             type: NodeTypes.single,\r\n//             content: \"Where do you store personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3000,\r\n//                     label: \"ON PAPER\"\r\n//                 },\r\n//                 {\r\n//                     id: 3001,\r\n//                     label: \"ON THE COMPUTER\"\r\n//                 },\r\n//                 {\r\n//                     id: 3002,\r\n//                     label: \"ON THE COMPUTER AND ON PAPER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 30, optionId: 3000 }\r\n//                     ],\r\n//                     result: { questionId: 30, optionId: 3000, repo: \"some repo on question 30 paper\" },\r\n//                     nextQuestionId: 33\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 30, optionId: 3001 }\r\n//                     ],\r\n//                     result: { questionId: 30, optionId: 3001, repo: \"some repo on question 30 paper/digital\" },\r\n//                     nextQuestionId: 31\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 30, optionId: 3002 }\r\n//                     ],\r\n//                     result: { questionId: 30, optionId: 3002, repo: \"some repo on question 30 digital\" },\r\n//                     nextQuestionId: 32\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[31] = createNode(\r\n//         {\r\n//             id: 31,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you keep your sensitive data encrypted?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3101,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3100,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 31, optionId: 3100 }\r\n//                     ],\r\n//                     result: { questionId: 31, optionId: 3100, repo: \"some repo on question 31 No\" },\r\n//                     response: [\"This is a great way to keep data secure, added to your list\"],\r\n//                     reminders: [{title: \"Todo Item 18\"}],\r\n//                     nextQuestionId: 34\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 31, optionId: 3101 }\r\n//                     ],\r\n//                     result: { questionId: 31, optionId: 3101, repo: \"some repo on question 31 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 34\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[32] = createNode(\r\n//         {\r\n//             id: 32,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you keep your paper documents in a locked cabinet?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3201,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3200,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 32, optionId: 3200 }\r\n//                     ],\r\n//                     result: { questionId: 32, optionId: 3200, repo: \"some repo on question 32 No\" },\r\n//                     response: [\"Lock those documents up!\"],\r\n//                     todos: [{title: \"Todo Item 17\"}],\r\n//                     nextQuestionId: 31\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 32, optionId: 3201 }\r\n//                     ],\r\n//                     result: { questionId: 32, optionId: 3201, repo: \"some repo on question 32 Yes\" },\r\n//                     response: [\"Good job!\"],\r\n//                     nextQuestionId: 31\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[33] = createNode(\r\n//         {\r\n//             id: 33,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you keep your paper documents in a locked cabinet?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3301,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3300,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 33, optionId: 3300 }\r\n//                     ],\r\n//                     result: { questionId: 33, optionId: 3300, repo: \"some repo on question 33 No\" },\r\n//                     response: [\"Lock those documents up!\"],\r\n//                     todos: [{title: \"Todo Item 17\"}],\r\n//                     nextQuestionId: 39\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 33, optionId: 3301 }\r\n//                     ],\r\n//                     result: { questionId: 33, optionId: 3301, repo: \"some repo on question 33 Yes\" },\r\n//                     response: [\"Good job!\"],\r\n//                     nextQuestionId: 39\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[34] = createNode(\r\n//         {\r\n//             id: 34,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is your digital content password protected?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3401,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3400,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 34, optionId: 3400 }\r\n//                     ],\r\n//                     result: { questionId: 34, optionId: 3400, repo: \"some repo on question 34 No\" },\r\n//                     response: [\"Always use passwords to keep your digital content secure.\"],\r\n//                     todos: [{title: \"Todo Item 19\"}],\r\n//                     nextQuestionId: 36\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 34, optionId: 3401 }\r\n//                     ],\r\n//                     result: { questionId: 34, optionId: 3401, repo: \"some repo on question 34 Yes\" },\r\n//                     nextQuestionId: 35\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[35] = createNode(\r\n//         {\r\n//             id: 35,\r\n//             type: NodeTypes.single,\r\n//             content: \"How often do you change your passwords?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3500,\r\n//                     label: \"0-6 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3501,\r\n//                     label: \"6-12 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3502,\r\n//                     label: \"OVER A YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 3503,\r\n//                     label: \"NEVER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 35, optionId: 3500 }\r\n//                     ],\r\n//                     result: { questionId: 35, optionId: 3500, repo: \"some repo on question 35 0-6\" },\r\n//                     response: [\"Awesome, keep it up!\"],\r\n//                     nextQuestionId: 36\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 35, optionId: 3501 }\r\n//                     ],\r\n//                     result: { questionId: 35, optionId: 3501, repo: \"some repo on question 35 6-12\" },\r\n//                     response: [\"Pretty good, try changing your passwords every 6 months.\"],\r\n//                     nextQuestionId: 36\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 35, optionId: 3502, repo: \"some repo on question 35 over 1 year\" },\r\n//                     response: [\"Change passwords every 6 months to keep your digital content secure.\"],\r\n//                     reminders: [{title: \"Todo Item 20\"}],\r\n//                     nextQuestionId: 36\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[36] = createNode(\r\n//         {\r\n//             id: 36,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you collect Digitally Created Personal Information (D.C.P.I.), such as information from website traffic?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3601,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3600,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 36, optionId: 3600 }\r\n//                     ],\r\n//                     result: { questionId: 36, optionId: 3600, repo: \"some repo on question 36 No\" },\r\n//                     nextQuestionId: 38\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 36, optionId: 3601 }\r\n//                     ],\r\n//                     result: { questionId: 36, optionId: 3601, repo: \"some repo on question 36 Yes\" },\r\n//                     nextQuestionId: 37\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS D.C.P.I.?\",\r\n//                 content: \" Digitally created personal information includes location information, \" + \r\n//                     \"including GPS data; device identifiers such as IP and MAC addresses; click stream data, \" +\r\n//                     \"browser history, bookmarks; user generated social network data such as comments, ratings, \" +\r\n//                     \"likes and dislikes, Twitter stream, or customer service interactions.\" \r\n//             }\r\n//         }\r\n//     )\r\n//     survey[37] = createNode(\r\n//         {\r\n//             id: 37,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy include information about the D.C.P.I. you collect?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3701,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3700,\r\n//                     label: \"NO\"\r\n//                 },\r\n//                 {\r\n//                     id: 3702,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 37, optionId: 3700 }\r\n//                     ],\r\n//                     result: { questionId: 37, optionId: 3700, repo: \"some repo on question 37 No\" },\r\n//                     response: [\"Added to your list! Check out your results at the end to find suggested wording to add to your privacy policy.\"],\r\n//                     reminders: [{title: \"Todo Item 21\"}],\r\n//                     nextQuestionId: 38\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 37, optionId: 3701 }\r\n//                     ],\r\n//                     result: { questionId: 37, optionId: 3701, repo: \"some repo on question 37 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 38\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 37, optionId: 3702 }\r\n//                     ],\r\n//                     result: { questionId: 37, optionId: 3702, repo: \"some repo on question 37 No PP\" },\r\n//                     response: [\"Be sure to include this when you make your privacy policy!\"],\r\n//                     reminders: [{title: \"Todo Item 21\"}],\r\n//                     nextQuestionId: 38\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[38] = createNode(\r\n//         {\r\n//             id: 38,\r\n//             type: NodeTypes.single,\r\n//             content: \"How often do you review your antivirus software?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3800,\r\n//                     label: \"0-6 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3801,\r\n//                     label: \"6-12 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3802,\r\n//                     label: \"MORE THAN A YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 3803,\r\n//                     label: \"NEVER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 38, optionId: 3800 }\r\n//                     ],\r\n//                     result: { questionId: 38, optionId: 3800, repo: \"some repo on question 38 0-6\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 39\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 38, optionId: 3803 }\r\n//                     ],\r\n//                     result: { questionId: 38, optionId: 3803, repo: \"some repo on question 38 never\" },\r\n//                     reminders: [{title: \"Todo Item 22\"}],\r\n//                     response: [\"It’s a good idea to review your antivirus software every 6 months.\"],\r\n//                     nextQuestionId: 39\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 38, optionId: 3802, repo: \"some repo on question 38\" },\r\n//                     response: [\"Not bad, try to review once every 6 months!\"],\r\n//                     nextQuestionId: 39\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[39] = createNode(\r\n//         {\r\n//             id: 39,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you have personal information that is no longer necessary for legal or business purposes?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3900,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 39, optionId: 3900 }\r\n//                     ],\r\n//                     result: { questionId: 39, optionId: 3900, repo: \"some repo on question 39 no\" },\r\n//                     nextQuestionId: 42\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 39, optionId: 3901 }\r\n//                     ],\r\n//                     result: { questionId: 39, optionId: 3901, repo: \"some repo on question 39 yes\" },\r\n//                     nextQuestionId: 40\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[40] = createNode(\r\n//         {\r\n//             id: 40,\r\n//             type: NodeTypes.single,\r\n//             content: \"How long are you keeping this information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4000,\r\n//                     label: \"LESS THAN 1 YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 4001,\r\n//                     label: \"MORE THAN 1 YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 4002,\r\n//                     label: \"PERMANENTLY\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 40, optionId: 4002 }\r\n//                     ],\r\n//                     result: { questionId: 40, optionId: 4002, repo: \"some repo on question 40 PERMANENTLY\" },\r\n//                     response: [\"Not a good idea, let’s keep going to see what we should do with this information.\"],\r\n//                     todos: [{title: \"Todo Item 23\"}],\r\n//                     nextQuestionId: 42\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 40, optionId: 4001, repo: \"some repo on question 40\" },\r\n//                     nextQuestionId: 41\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[41] = createNode(\r\n//         {\r\n//             id: 41,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the personal information you still have being used to make a decision that would affect this individual?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4101,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4100,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 41, optionId: 4100 }\r\n//                     ],\r\n//                     result: { questionId: 41, optionId: 4100, repo: \"some repo on question 41 no\" },\r\n//                     response: [\"If the personal information has no relevance, it is time to destroy it.\"],\r\n//                     todos: [{title: \"Todo Item 24\"}],\r\n//                     nextQuestionId: 42\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 41, optionId: 4101 }\r\n//                     ],\r\n//                     result: { questionId: 41, optionId: 4101, repo: \"some repo on question 41 yes\" },\r\n//                     response: [\"Okay, keep the information for one year after making the decision.\"],\r\n//                     nextQuestionId: 42\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[42] = createNode(\r\n//         {\r\n//             id: 42,\r\n//             type: NodeTypes.single,\r\n//             content: \"How long do you keep your financial information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4200,\r\n//                     label: \"LESS THAN 7 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4201,\r\n//                     label: \"7 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4202,\r\n//                     label: \"MORE THAN 7 YEARS\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 42, optionId: 4200 }\r\n//                     ],\r\n//                     result: { questionId: 42, optionId: 4200, repo: \"some repo on question 42 4200\" },\r\n//                     response: [\"Keep financial information for 7 years.\"],\r\n//                     todos: [{title: \"Todo Item 25\"}],\r\n//                     nextQuestionId: 43\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 42, optionId: 4201 }\r\n//                     ],\r\n//                     result: { questionId: 42, optionId: 4201, repo: \"some repo on question 41 4201\" },\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 43\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 42, optionId: 4202 }\r\n//                     ],\r\n//                     result: { questionId: 42, optionId: 4202, repo: \"some repo on question 41 4202\" },\r\n//                     response: [\"Destroy financial information after 7 years.\"],\r\n//                     nextQuestionId: 43\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[43] = createNode(\r\n//         {\r\n//             id: 43,\r\n//             type: NodeTypes.single,\r\n//             content: \"How long does your organization keep relevant records?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4300,\r\n//                     label: \"LESS THAN 10 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4301,\r\n//                     label: \"10 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4302,\r\n//                     label: \"10 YEARS, LONGER IF IT IS RELEVANT\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 43, optionId: 4300 }\r\n//                     ],\r\n//                     result: { questionId: 43, optionId: 4300, repo: \"some repo on question 43 4300\" },\r\n//                     response: [\"Keep all records for at least 10 years!\"],\r\n//                     todos: [{title: \"Todo Item 26\"}],\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 43, optionId: 4301 }\r\n//                     ],\r\n//                     result: { questionId: 43, optionId: 4301, repo: \"some repo on question 43 4301\" },\r\n//                     response: [\"Good start - be sure to keep relevant records as long as they are relevant.\"],\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 43, optionId: 4302 }\r\n//                     ],\r\n//                     result: { questionId: 43, optionId: 4302, repo: \"some repo on question 43 4302\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS RELEVANT?\",\r\n//                 content: \"Please write 1-2 sentences describing what relevant records are in this context\"\r\n//             }\r\n//         }\r\n//     )\r\n\r\n\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part3() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[11] = createNode(\r\n//         {\r\n//             id: 11,\r\n//             type: NodeTypes.message,\r\n//             content: \"A privacy policy governs the organizations use of individuals’ data, \" +\r\n//                 \"while a confidentiality policy covers keeping individuals’ data private so that unauthorized people cannot access it.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 44\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[44] = createNode(\r\n//         {\r\n//             id: 44,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your organization have a separate confidentiality policy from your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4401,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4400,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 44, optionId: 4401 }\r\n//                     ],\r\n//                     result: { questionId: 44, optionId: 4401, repo: \"some repo on question 44 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 45\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 44, optionId: 4400 }\r\n//                     ],\r\n//                     result: { questionId: 44, optionId: 4400, repo: \"some repo on question 44 No\" },\r\n//                     response: [\"Added to your to-do list!\"],\r\n//                     reminders: [{title: \"Todo Item 27\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[45] = createNode(\r\n//         {\r\n//             id: 45,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your confidentiality policy outline who can access personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4501,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4500,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 45, optionId: 4501 }\r\n//                     ],\r\n//                     result: { questionId: 45, optionId: 4501, repo: \"some repo on question 45 Yes\" },\r\n//                     nextQuestionId: 46\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 45, optionId: 4500 }\r\n//                     ],\r\n//                     result: { questionId: 45, optionId: 4500, repo: \"some repo on question 45 No\" },\r\n//                     response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\r\n//                     \"Remember: the more hands on it; the more likely a breach.\"],\r\n//                     reminders: [{title: \"Todo Item 28\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[46] = createNode(\r\n//         {\r\n//             id: 46,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who has access to personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4600,\r\n//                     label: \"Everyone\"\r\n//                 },\r\n//                 {\r\n//                     id: 4601,\r\n//                     label: \"Many people\"\r\n//                 },\r\n//                 {\r\n//                     id: 4602,\r\n//                     label: \"Only one person\"\r\n//                 },\r\n//                 {\r\n//                     id: 4603,\r\n//                     label: \"A few people\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4602 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4602, repo: \"some repo on question 46 one\" },\r\n//                     response: [\"Pretty good! You could also give a couple more appropriate individuals access if this person needs support.\"],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4603 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4603, repo: \"some repo on question 46 few\" },\r\n//                     response: [\"Awesome!\"],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4600 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4600, repo: \"some repo on question 46 everyone\" },\r\n//                     response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\r\n//                             \"Remember: the more hands on it; the more likely a breach. \"],\r\n//                     reminders: [{title: \"Todo Item 29\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4601 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4601, repo: \"some repo on question 46 many\" },\r\n//                     response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\r\n//                             \"Remember: the more hands on it; the more likely a breach. \"],\r\n//                     reminders: [{title: \"Todo Item 29\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part4() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[47] = createNode(\r\n//         {\r\n//             id: 47,\r\n//             type: NodeTypes.message,\r\n//             content: \"Every organization needs to have one person who can answer questions about the collection, \" +\r\n//                 \"use and disclosure of data. This role is called the Privacy Officer.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 48\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[48] = createNode(\r\n//         {\r\n//             id: 48,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your organization have a designated privacy officer?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4801,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4800,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 48, optionId: 4801 }\r\n//                     ],\r\n//                     result: { questionId: 48, optionId: 4801, repo: \"some repo on question 48 Yes\" },\r\n//                     nextQuestionId: 49\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 48, optionId: 4800 }\r\n//                     ],\r\n//                     result: { questionId: 48, optionId: 4800, repo: \"some repo on question 48 No\" },\r\n//                     response: [\"Added to your to-do list!\"],\r\n//                     todos: [{title: \"Todo Item 30\"}],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[49] = createNode(\r\n//         {\r\n//             id: 49,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is your privacy officers contact information included in your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4900,\r\n//                     label: \"NO\"\r\n//                 },\r\n//                 {\r\n//                     id: 4902,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 49, optionId: 4901 }\r\n//                     ],\r\n//                     result: { questionId: 49, optionId: 4901, repo: \"some repo on question 49 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 49, optionId: 4900 }\r\n//                     ],\r\n//                     result: { questionId: 49, optionId: 4900, repo: \"some repo on question 49 No\" },\r\n//                     response: [\"Be sure to add this to your privacy policy!\"],\r\n//                     reminders: [{title: \"Todo Item 31\"}],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 49, optionId: 4902 }\r\n//                     ],\r\n//                     result: { questionId: 49, optionId: 4902, repo: \"some repo on question 49 No PP\" },\r\n//                     response: [\"Add this to your privacy policy once you create it!\"],\r\n//                     reminders: [{title: \"Todo Item 31\"}],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     return survey;\r\n// }\r\n// function getSurvey_part5() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[50] = createNode(\r\n//         {\r\n//             id: 50,\r\n//             type: NodeTypes.message,\r\n//             content: \"Sometimes an organization will get requests for information.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 51\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[51] = createNode(\r\n//         {\r\n//             id: 51,\r\n//             type: NodeTypes.message,\r\n//             content: \"Explain what type of P.I. must be redacted\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 52\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[52] = createNode(\r\n//         {\r\n//             id: 52,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy explain how someone could access the information you collect?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5201,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 5200,\r\n//                     label: \"NO\"\r\n//                 },\r\n//                 {\r\n//                     id: 5202,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 52, optionId: 5200 }\r\n//                     ],\r\n//                     response: [\"Check out the suggested wording in your results at the end of the module to add this to your privacy policy!\"],\r\n//                     result: {questionId: 52, optionId: 5200, repo: \"some repo to question 52 no\"},\r\n//                     reminders: [{title: \"Todo Item 32\"}],\r\n//                     nextQuestionId: 53\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 52, optionId: 5201 }\r\n//                     ],\r\n//                     result: {questionId: 52, optionId: 5201, repo: \"some repo to question 52 yes\"},\r\n//                     nextQuestionId: 53\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 52, optionId: 5202 }\r\n//                     ],\r\n//                     response: [\"Be sure to add this to your privacy policy once you create it!\"],\r\n//                     result: {questionId: 52, optionId: 5202, repo: \"some repo to question 52 no pp\"},\r\n//                     reminders: [{title: \"Todo Item 32\"}],\r\n//                     nextQuestionId: 53\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[53] = createNode(\r\n//         {\r\n//             id: 53,\r\n//             type: NodeTypes.single,\r\n//             content: \"Have you received or expect to receive requests for information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5301,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 5300,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 53, optionId: 5300 }\r\n//                     ],\r\n//                     result: {questionId: 53, optionId: 5300, repo: \"some repo to question 53 no\"},\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 53, optionId: 5301 }\r\n//                     ],\r\n//                     result: {questionId: 53, optionId: 5301, repo: \"some repo to question 53 Yes\"},\r\n//                     nextQuestionId: 54\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[54] = createNode(\r\n//         {\r\n//             id: 54,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who is asking\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5400,\r\n//                     label: \"SOMEONE LOOKING FOR THEIR INFORMATION\"\r\n//                 },\r\n//                 {\r\n//                     id: 5401,\r\n//                     label: \"SOMEONE LOOKING FOR INFORMATION ABOUT OTHERS\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 54, optionId: 5400 }\r\n//                     ],\r\n//                     result: {questionId: 54, optionId: 5400, repo: \"some repo to question 54 A\"},\r\n//                     nextQuestionId: 55,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 54, optionId: 5401 }\r\n//                     ],\r\n//                     result: {questionId: 54, optionId: 5401, repo: \"some repo to question 54 B\"},\r\n//                     nextQuestionId: 56\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[55] = createNode(\r\n//         {\r\n//             id: 55,\r\n//             type: NodeTypes.single,\r\n//             content: \"Are they requesting ..\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5500,\r\n//                     label: \"THEIR PERSONAL INFORMATION\"\r\n//                 },\r\n//                 {\r\n//                     id: 5501,\r\n//                     label: \"HOW THEIR PERSONAL INFORMATION IS BEING USED\"\r\n//                 },\r\n//                 {\r\n//                     id: 5502,\r\n//                     label: \"WHO HAS ACCESS TO THEIR PERSONAL INFORMATION\"\r\n//                 },\r\n//                 {\r\n//                     id: 5503,\r\n//                     label: \"OTHER INFORMATION\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 55, optionId: 5503 }\r\n//                     ],\r\n//                     result: {questionId: 55, optionId: 5503, repo: \"some repo to question 55 D\"},\r\n//                     nextQuestionId: 56,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: {questionId: 55, optionId: 5500, repo: \"some repo to question 55 B\"},\r\n//                     response: [\"Great, they can have this information!\"],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[56] = createNode(\r\n//         {\r\n//             id: 56,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the information ..\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5600,\r\n//                     label: \"Protected by S-C privilege?\"\r\n//                 },\r\n//                 {\r\n//                     id: 5601,\r\n//                     label: \"Likely to harm the competitive position of the organization\"\r\n//                 },\r\n//                 {\r\n//                     id: 5602,\r\n//                     label: \"Part of an investigation/appeal uncompleted\"\r\n//                 },\r\n//                 {\r\n//                     id: 5603,\r\n//                     label: \"Part of a mediation/arbitration\"\r\n//                 },\r\n//                 {\r\n//                     id: 5604,\r\n//                     label: \"None of the above\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 56, optionId: 5604 }\r\n//                     ],\r\n//                     result: {questionId: 56, optionId: 5604, repo: \"some repo to question 56 None\"},\r\n//                     nextQuestionId: 57,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: {questionId: 56, optionId: 5600, repo: \"some repo to question 56 B\"},\r\n//                     response: [\"Don’t give out this information. If you plan to deny a request for information, consult a lawyer.\"],\r\n//                     todos: [{title: \"Todo Item 33\"}],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[57] = createNode(\r\n//         {\r\n//             id: 57,\r\n//             type: NodeTypes.single,\r\n//             content: \"Would disclosing this information.. \",\r\n//             options: [\r\n//                 {\r\n//                     id: 5700,\r\n//                     label: \"Threaten the safety/harm of another person\"\r\n//                 },\r\n//                 {\r\n//                     id: 5701,\r\n//                     label: \"Cause grave harm to the requester\"\r\n//                 },\r\n//                 {\r\n//                     id: 5702,\r\n//                     label: \"Reveal personal information about another person\"\r\n//                 },\r\n//                 {\r\n//                     id: 5703,\r\n//                     label: \"None of the above\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 57, optionId: 5703 }\r\n//                     ],\r\n//                     result: {questionId: 57, optionId: 5703, repo: \"some repo to question 57 None\"},\r\n//                     response: [\"Proceed with caution. If you plan to deny a request for information, consult a lawyer.\"],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: {questionId: 56, optionId: 5600, repo: \"some repo to question 56 B\"},\r\n//                     response: [\"Don’t give out this information. If you plan to deny a request for information, consult a lawyer.\"],\r\n//                     todos: [{title: \"Todo Item 33\"}],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     return survey;\r\n// }\r\n// function getSurvey_part6() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[58] = createNode(\r\n//         {\r\n//             id: 58,\r\n//             type: NodeTypes.message,\r\n//             content: \"Canada’s Anti-Spam Law (CASL) provides regulations around sending mass messages to members and the public.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 59\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[59] = createNode(\r\n//         {\r\n//             id: 59,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you send messages to your members or the public?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 5900,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 59, optionId: 5900 }\r\n//                     ],\r\n//                     result: {questionId: 59, optionId: 5900, repo: \"some repo to question 59 No\"},\r\n//                     nextQuestionId: 65,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 59, optionId: 5901 }\r\n//                     ],\r\n//                     result: {questionId: 59, optionId: 5901, repo: \"some repo to question 59 Yes\"},\r\n//                     nextQuestionId: 60,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[60] = createNode(\r\n//         {\r\n//             id: 60,\r\n//             type: NodeTypes.single,\r\n//             content: \"Are you a registered charity?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6001,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6000,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 60, optionId: 6000 }\r\n//                     ],\r\n//                     result: {questionId: 60, optionId: 6000, repo: \"some repo to question 60 No\"},\r\n//                     nextQuestionId: 62,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 60, optionId: 6001 }\r\n//                     ],\r\n//                     result: {questionId: 60, optionId: 6001, repo: \"some repo to question 60 Yes\"},\r\n//                     nextQuestionId: 61,\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"I’M NOT SURE\",\r\n//                 content: \"A registered charity .. \"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[61] = createNode(\r\n//         {\r\n//             id: 61,\r\n//             type: NodeTypes.single,\r\n//             content: \"What is your main reason for sending mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6100,\r\n//                     label: \"FUNDRAISING\"\r\n//                 },\r\n//                 {\r\n//                     id: 6101,\r\n//                     label: \"OTHER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 61, optionId: 6100 }\r\n//                     ],\r\n//                     result: {questionId: 61, optionId: 6100, repo: \"some repo to question 61 FUNDRAISING\"},\r\n//                     nextQuestionId: 62,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 61, optionId: 6101 }\r\n//                     ],\r\n//                     result: {questionId: 61, optionId: 6101, repo: \"some repo to question 60 other\"},\r\n//                     response: [\"Heads up - charities are only allowed to send mass messages for fundraising!\"],\r\n//                     todos: [{title: \"Todo Item 34\"}],\r\n//                     nextQuestionId: 62,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[62] = createNode(\r\n//         {\r\n//             id: 62,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you get consent before sending mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6201,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6200,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 62, optionId: 6200 }\r\n//                     ],\r\n//                     result: {questionId: 62, optionId: 6200, repo: \"some repo to question 62 No\"},\r\n//                     response: [\"Make sure individuals “opt-in” to mass messages before adding them to your mailing list.\"],\r\n//                     todos: [{title: \"Todo Item 35\"}],\r\n//                     nextQuestionId: 63,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 62, optionId: 6201 }\r\n//                     ],\r\n//                     result: {questionId: 62, optionId: 6201, repo: \"some repo to question 62 yes\"},\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 63,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[63] = createNode(\r\n//         {\r\n//             id: 63,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you include contact information in your mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6301,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6300,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 63, optionId: 6300 }\r\n//                     ],\r\n//                     result: {questionId: 63, optionId: 6300, repo: \"some repo to question 63 No\"},\r\n//                     response: [\"Be sure you add this to all your mass messages!\"],\r\n//                     todos: [{title: \"Todo Item 36\"}],\r\n//                     nextQuestionId: 64,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 63, optionId: 6301 }\r\n//                     ],\r\n//                     result: {questionId: 63, optionId: 6301, repo: \"some repo to question 63 yes\"},\r\n//                     response: [\"Good job!\"],\r\n//                     nextQuestionId: 64,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[64] = createNode(\r\n//         {\r\n//             id: 64,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you include an “unsubscribe” option within your mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6401,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6400,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 64, optionId: 6400 }\r\n//                     ],\r\n//                     result: {questionId: 64, optionId: 6400, repo: \"some repo to question 64 No\"},\r\n//                     response: [\"Include this in all your mass messages!\"],\r\n//                     todos: [{title: \"Todo Item 37\"}],\r\n//                     nextQuestionId: 65,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 64, optionId: 6401 }\r\n//                     ],\r\n//                     result: {questionId: 64, optionId: 6401, repo: \"some repo to question 64 yes\"},\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 65,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[65] = createNode(\r\n//         {\r\n//             id: 65,\r\n//             type: NodeTypes.single,\r\n//             content: \"You completed module\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6500,\r\n//                     label: \"Go to the results\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.exit,\r\n//                     answers: [\r\n//                         {questionId: 65, optionId: 6500}\r\n//                     ],\r\n//                     nextQuestionId: -1\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     return survey;\r\n// }\r\n\r\n// function getModules() {\r\n//     let modules: { [key: number]: Module } = {};\r\n//     modules[1] = { name: \"Privacy Policy\", nodes: getSurvey_part1() };\r\n//     modules[2] = { name: \"Personal Info\", nodes: getSurvey_part2()};\r\n//     modules[3] = { name: \"Confidentiality\", nodes: getSurvey_part3()};\r\n//     modules[4] = { name: \"Privacy Officer\", nodes: getSurvey_part4()};\r\n//     modules[5] = { name: \"Requests\", nodes: getSurvey_part5()};\r\n//     modules[6] = { name: \"Requests\", nodes: getSurvey_part6()};\r\n//     return modules;\r\n// }\r\n\r\n\r\n// export {\r\n//     getSurvey,\r\n//     getModules\r\n// }","import {ResponseItem} from '../model/index'\r\nimport React from 'react';\r\n\r\nexport interface Item {\r\n    title: string\r\n}\r\nexport interface Result {\r\n    questionId: number,\r\n    optionId: number,\r\n    repo: string\r\n}\r\nexport interface ModuleResult {\r\n    name: string,\r\n    todos: Array<Item>,\r\n    reminders: Array<Item>,\r\n    results: Array<Result>,\r\n    path: Array<ResponseItem>\r\n}\r\n// Context: record all infomation would be used for result page\r\n// results: the repo for each answered question. \r\n//          Since every result item related to a specific option of a question,\r\n//          it should record both questionId and optionId that can be refered to.\r\n// path: should record both questionId and optionID of passed node. So make it a Answer array.\r\n//       may be can only keep the \"results\" feild?\r\n// Consider: how to split results of different sub-modules?\r\nexport interface Context {\r\n    moduleResults: { [key: number]: ModuleResult };\r\n    todos: Array<Item>;\r\n    reminders: Array<Item>;\r\n}\r\n\r\n// Context data generating functions. Only for testing\r\n// function getPath() {\r\n//     let pathList: Array<ResponseItem> = [];\r\n//     // pathList.push({ _messageId: 1, optionIds: [100] });\r\n//     // pathList.push({ _messageId: 3, optionIds: [300] });\r\n//     // pathList.push({ _messageId: 4, optionIds: [401] });\r\n//     return pathList;\r\n// }\r\n\r\n// function getTodoList() {\r\n//     let todoList: Array<Item> = [];\r\n//     todoList.push({ title: \"Create a privacy policy\" });\r\n//     todoList.push({ title: \"Review social media terms of service\" });\r\n//     todoList.push({ title: \"Outline personal info access \" });\r\n//     todoList.push({ title: \"Train employees on privacy policies\" });\r\n//     return todoList;\r\n// }\r\n\r\n// function getReminders() {\r\n//     let reminderList: Array<Item> = [];\r\n//     reminderList.push({ title: \"Only use mass messages for fundraising\" });\r\n//     reminderList.push({ title: \"Get consent before sending mass messages\" });\r\n//     reminderList.push({ title: \"Lorem ipsum dolor sit amet\" });\r\n//     return reminderList;\r\n// }\r\n\r\n// function getResultList() {\r\n//     let resultList: Array<Result> = [];\r\n//     resultList.push({ questionId: 1, optionId: 100, repo: \"result repo no 1\" });\r\n//     resultList.push({ questionId: 3, optionId: 300, repo: \"result repo no 3\" });\r\n//     resultList.push({ questionId: 4, optionId: 401, repo: \"result repo no 4\" });\r\n//     return resultList;\r\n// }\r\n\r\n// export function getContext() {\r\n//     let path = getPath();\r\n//     let todos = getTodoList();\r\n//     let reminders = getReminders();\r\n//     let results = getResultList();\r\n//     let module = { name: \"Privacy Policy\", path: path, todos: todos, reminders: reminders, results: results };\r\n//     let context: Context = {\r\n//         moduleResults: { 1: module },\r\n//         todos: [],\r\n//         reminders: []\r\n//     };\r\n//     return context;\r\n// }\r\n\r\n// default context\r\nconst defaultContext: Context = {\r\n    moduleResults: {},\r\n    todos: [],\r\n    reminders: []\r\n};\r\n\r\nexport const ResultContext = React.createContext({\r\n    context: defaultContext,\r\n    updateContext: (id: number, contextItm: any) => { }\r\n})\r\n\r\nexport class ResultContextProvider extends React.Component {\r\n\r\n\r\n    updateContext = (id: number, contextItem: any) => {\r\n        let context = this.state.context;\r\n        if (context.moduleResults[id]) { // if current module already exist in result context\r\n            if(contextItem.todo)\r\n                context.moduleResults[id].todos.push(contextItem.todo)\r\n            if(contextItem.reminder)\r\n                context.moduleResults[id].reminders.push(contextItem.reminder)\r\n            if(contextItem.result)\r\n                context.moduleResults[id].results.push(contextItem.result);\r\n            context.moduleResults[id].path.push(contextItem.path);\r\n        } else {\r\n            context.moduleResults[id] = {\r\n                name: contextItem.name,\r\n                todos: [contextItem.todos],\r\n                reminders: [contextItem.reminders],\r\n                results: [contextItem.result],\r\n                path: [contextItem.path]\r\n            }; // if module does not exist\r\n        }\r\n        if(contextItem.todo)\r\n            context.todos.push(contextItem.todo);\r\n        if(contextItem.reminder)\r\n            context.reminders.push(contextItem.reminder);\r\n        this.setState({ context: context })\r\n    }\r\n    state = {\r\n        context: defaultContext,\r\n        updateContext: this.updateContext\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ResultContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </ResultContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const ResultContextConsumer = ResultContext.Consumer\r\n\r\n// export const ResultContext = React.createContext(\r\n//     context,\r\n//     updateContext: (id: number, contextItm: any) => {}\r\n// )","import React from 'react';\r\nimport './ChatbotStyle.css';\r\nimport Header from '../../../components/Header/Header'\r\nimport HeaderLinks from \"../../../components/Header/HeaderLink\"\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport Chat from \"./Chat\";\r\nimport ToDoSection from \"./ToDoSection\";\r\nimport { getSurvey, getModules } from \"../../../data/data\";\r\nimport { ResultContext, Context } from '../../../data/context';\r\nimport { Trigger, Message, ResponsePath, AutoPlayMessage, ResponseItem } from '../../../model/index'\r\nimport history from '../../../history';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport banrdIcon from \"../../../Assets/img/botavator.svg\";\r\n\r\ninterface IState {\r\n    currentMessage: Message,\r\n    currentModuleId: any,\r\n    responsePath: ResponsePath,\r\n    displayedMessages: DisplayedMessage[],\r\n    todoList: any[],\r\n    reminderList: any[],\r\n}\r\n\r\n\r\nexport interface DisplayedMessage {\r\n    message: Message,\r\n    selectedOptionIds: number[],\r\n    showExtraInfo: boolean // becuase there can only be one\r\n    reply?: string // TODO temp temporary\r\n}\r\n\r\nexport default class ChatbotPage extends React.Component {\r\n\r\n    survey: any;\r\n    modules: any;\r\n    state: IState;\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.survey = getSurvey();\r\n        this.modules = getModules();\r\n\r\n        const responsePath: ResponsePath = new ResponsePath()\r\n        this.state = {\r\n            currentMessage: this.survey[40],\r\n            currentModuleId: 3,\r\n            responsePath: responsePath,\r\n            displayedMessages: [], //TODO  maybe we don't need messagelist or todolist.. also responsepath here because the context gets them\r\n            todoList: [],\r\n            reminderList: []\r\n        };\r\n        this.handleSingleSelectResponse = this.handleSingleSelectResponse.bind(this);\r\n        this.handleMultiSelectSubmit = this.handleMultiSelectSubmit.bind(this)\r\n        this.handleShowExtraInfo = this.handleShowExtraInfo.bind(this);\r\n        this.handleMultiSelectClick = this.handleMultiSelectClick.bind(this);\r\n        this.getNextAction = this.getNextAction.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.displayNextMessage({ moduleId: 3, messageId: 40 });\r\n    }\r\n\r\n    // TODO chnage the parameter name...\r\n    public displayNextMessage(next: any) {// have this also take a module id? \r\n        if (next == -1) {\r\n            history.push('/result')\r\n            return;\r\n        }\r\n\r\n        const nextMessage: Message = this.modules[next.moduleId].nodes[next.messageId]; // TODO create modules class.. modules.getMessage(messageId)\r\n        const message: DisplayedMessage = { message: nextMessage, selectedOptionIds: [], showExtraInfo: false };\r\n\r\n        this.setState((state: IState, props) => {\r\n            return {\r\n                currentModuleId: next.moduleId,\r\n                currentMessage: nextMessage,\r\n                displayedMessages: state.displayedMessages.concat(message)\r\n            }\r\n        }, () => {\r\n            this.scrollToBottom();\r\n        })\r\n\r\n        // do we just pass nothing in? or maybe we should do find matching trigger\r\n        if (nextMessage instanceof AutoPlayMessage) { // if next message type is general message, auto display next one\r\n            const trigger: any = nextMessage.getDefaultTrigger()\r\n            this.displayNextMessage(this.getNextAction(trigger)); // TODO ughhh this too. wtf. we just need to get the default trigger. \r\n        }// TODO check what happens when this trigger is an exit type. \r\n\r\n    }\r\n\r\n    // TODO test that a response item is added to the responsePath\r\n    private updateResponsePath(responseItem: any) {\r\n        this.setState((state: IState) => {\r\n            state.responsePath.addResponseItem(responseItem);\r\n            return {\r\n                responsePath: state.responsePath\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateState(message: any, todo: any, reminder: any) { //temporary\r\n        this.setState((state: IState, props: any) => {\r\n            let lastMessageIndex = state.displayedMessages.length - 1\r\n            if (lastMessageIndex < 0)\r\n                lastMessageIndex = 0\r\n            state.displayedMessages[lastMessageIndex].reply = message; // TODO add components instead of message strings.\r\n            if (todo)\r\n                state.todoList.push(todo)\r\n\r\n            if (reminder)\r\n                state.reminderList.push(reminder)\r\n\r\n            return {\r\n                messageList: [...state.displayedMessages],\r\n                todoList: state.todoList,\r\n                reminderList: state.reminderList,\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public handleMultiSelectClick(questionId: any, selectedOptionId: any) {\r\n        if (this.isInactiveQuestion(questionId)) {\r\n            return;\r\n        }\r\n        // add a selected option\r\n        this.markOptionIdSelected(selectedOptionId)\r\n    }\r\n\r\n    public markOptionIdSelected(optionId: any) {\r\n        this.setState((state: IState) => {\r\n            let lastMessageIndex = state.displayedMessages.length - 1\r\n            if (lastMessageIndex < 0)\r\n                lastMessageIndex = 0\r\n            if (!state.displayedMessages[lastMessageIndex].selectedOptionIds.includes(optionId))\r\n                state.displayedMessages[lastMessageIndex].selectedOptionIds.push(optionId)\r\n\r\n            return {\r\n                displayedMessages: state.displayedMessages\r\n            }\r\n        })\r\n    }\r\n\r\n    // it should\r\n    // not submit when nothing is selected\r\n    // not submit when question is inactive\r\n    public handleMultiSelectSubmit(questionId: any) {\r\n        if (this.isInactiveQuestion(questionId) || this.isEmptySelection()) { //TODO also prevent submission when there's nothing selected. \r\n            return;\r\n        }\r\n        const lastMessage = this.state.displayedMessages.length - 1\r\n        this.processSelectedOptions(questionId, this.state.displayedMessages[lastMessage].selectedOptionIds)\r\n    }\r\n\r\n    isEmptySelection() {\r\n        let lastMessageIndex = this.state.displayedMessages.length - 1\r\n        if (lastMessageIndex < 0)\r\n            lastMessageIndex = 0\r\n        if (this.state.displayedMessages[lastMessageIndex].selectedOptionIds.length <= 0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    // it should \r\n    // return when a question is inactive\r\n    // add a responseItem to the responsePath\r\n    // update the messageList with a reply \r\n    // add a result Item to the context\r\n    // get the next message\r\n    // call displayNextMessage\r\n    public handleSingleSelectResponse(questionId: any, selectedOptionId: any) {\r\n        if (this.isInactiveQuestion(questionId)) {\r\n            return;\r\n        }\r\n        this.markOptionIdSelected(selectedOptionId)\r\n        this.processSelectedOptions(questionId, selectedOptionId)\r\n\r\n    }\r\n\r\n    public async processSelectedOptions(questionId: any, selectedOptionIds: number[]) {\r\n\r\n        const responseItem: ResponseItem = new ResponseItem(this.state.currentMessage.id, selectedOptionIds)\r\n        await this.updateResponsePath(responseItem) // check if this works with async await\r\n\r\n        const trigger: any = this.state.currentMessage.findTrigger(this.state.responsePath); // the responsePath has to be updated by this point because we use it to find the trigger.\r\n\r\n        let resultItem: any = {\r\n            path: responseItem,\r\n            todo: trigger.todo ? trigger.todo : null,\r\n            reminder: trigger.reminder ? trigger.reminder : null,\r\n            resultReport: trigger.resultReport\r\n        }\r\n        this.context.updateContext(this.state.currentModuleId, resultItem);  // TODO make sure this is actually the current module. i think it is. could be a test.\r\n        await this.updateState(trigger.reply, resultItem.todo, resultItem.reminder);\r\n        // if we did update the trigger action to always contain the next module, it would be easier to make a mistake when writing the json. \r\n        // but it would be more elegant here. \r\n        let nextMessage = this.getNextAction(trigger); // TODO this shouldnt take any arguments.. maybe we should just have the trigger always include the module. hmmmmmm\r\n        this.displayNextMessage(nextMessage) // TODO if we push to history in dispaly next message.. will the rest of this function even run?   \r\n    }// maybe we can move the pushexit to diplayNextMessage... \r\n\r\n    public handleShowExtraInfo(questionId: any) {// TODO this wont inactivate previous questions. \r\n        if (this.isInactiveQuestion(questionId)) {\r\n            return;\r\n        }\r\n        this.setState((state: IState, props: any) => {\r\n            let last = this.state.displayedMessages.length - 1\r\n            if (last < 0)\r\n                last = 0\r\n\r\n            const repeatMessage = cloneDeep(state.displayedMessages[last]);\r\n            state.displayedMessages[last].showExtraInfo = true;\r\n            return {\r\n                displayedMessages: [...state.displayedMessages, repeatMessage]\r\n            }\r\n        }, () => {\r\n            this.scrollToBottom();\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // TODO this may just redirect the user to the result page.... needs to be fixed\r\n    getNextAction(trigger: any) {\r\n\r\n        // return information for next message.\r\n        // Can make it a switch statement\r\n        // or, make it a part of the handleSelectOption method rather than integrate in trigger class？\r\n        if (trigger.action.type == \"exit\") {\r\n            return -1\r\n        } else if (trigger.action.type == \"next\" || trigger.action.type == \"nextQuestion\") {\r\n            return { moduleId: this.state.currentModuleId, messageId: trigger.action.nextQuestionId };\r\n        } else if (trigger.action.type == \"nextModule\") {\r\n            return { moduleId: trigger.action.nextModuleId, messageId: trigger.action.nextQuestionId };\r\n        }\r\n    }\r\n\r\n    public scrollToBottom() {\r\n        try {\r\n            let chatbotScroller = document.getElementById('chatbot-scroller') as HTMLElement;\r\n            chatbotScroller.scrollTop = chatbotScroller.scrollHeight;\r\n        } catch (exception) {\r\n            console.log(\"scroll exception\");\r\n        }\r\n    }\r\n\r\n    public isCorrectTrigger(answer: any, currentQuestionId: any, currentOptionId: any) {\r\n        return answer.optionId === currentOptionId && answer.questionId === currentQuestionId\r\n    }\r\n\r\n    private isInactiveQuestion(questionId: number) {\r\n        return questionId !== this.state.currentMessage.id\r\n    }\r\n\r\n    render() {\r\n        // const todos = this.context.moduleResults[this.state.currentModuleId].todos\r\n        // const reminders = this.context.moduleResults[this.state.currentModuleId].reminders\r\n\r\n        return (\r\n            <div className=\"full-screen-container grey chatbot-page\">\r\n                <Header\r\n                    brand={banrdIcon}\r\n                    brandName=\"LSALT 2.0 |\"\r\n                    toolTitle=\"Non-Profit Self Assessment\"\r\n                    fixed\r\n                    color=\"white\"\r\n                    rightLinks={<HeaderLinks />}\r\n                    absolute\r\n                />\r\n                <div className=\"main-container\">\r\n                    <ProgressBar ></ProgressBar>\r\n                    <Chat\r\n                        displayedMessages={this.state.displayedMessages}\r\n                        handleMultiSelectOptions={this.handleMultiSelectClick}\r\n                        handleMultiSelectSubmit={this.handleMultiSelectSubmit}\r\n                        handleShowExtraInfo={this.handleShowExtraInfo}\r\n                        handleSelectOptions={this.handleSingleSelectResponse}></Chat>\r\n                    <ToDoSection\r\n                        todoList={this.state.todoList}\r\n                        reminderList={this.state.reminderList}></ToDoSection>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nChatbotPage.contextType = ResultContext;\r\n\r\n","import React from \"react\";\r\nimport { Tabs, Tab } from \"@material-ui/core\";\r\nimport './TabNatStyle.css';\r\n\r\nexport default function TabNav(props: any) {\r\n    const { tabList } = props;\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n    console.log(tabList);\r\n    const tabs = tabList.map((tab: any, i: any) => {\r\n        if (tab.title) {\r\n            return <Tab label={tab.title} key={i} className=\"tab\" />\r\n        }\r\n        return true; // FIXME adding this for now to quiet the compiler warnings\r\n    });\r\n    return (\r\n        <div className=\"container\">\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"fullWidth\" className=\"tab-nav\">\r\n                {tabs}\r\n            </Tabs>\r\n            {tabList.map((prop: any, key: any) => {\r\n                if (key === value) {\r\n                    return <div key={key} className=\"container\">{prop.tabContent}</div>;\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Typography, List, ListItem, ListItemSecondaryAction, Button } from \"@material-ui/core\";\r\nfunction TodoList(props: any) {\r\n    const { todoList } = props;\r\n    return (\r\n        <div className=\"list-container round\">\r\n            <List>\r\n                {todoList.map((item: any, key: any) => {\r\n                    return (<ListItem className=\"list-item\" key={key}>\r\n                       <div className=\"todo-item-bullet\"/>\r\n                        <span className= \"item-label\" >{item.title}</span>\r\n                        <ListItemSecondaryAction>\r\n                            <div className=\"btn-group\">\r\n                                <Button variant=\"outlined\">more info</Button>\r\n                                {/* <Button variant=\"contained\" color=\"primary\">create now</Button> */}\r\n                            </div>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>)\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ReminderList(props: any) {\r\n    const { reminderList } = props;\r\n    return (\r\n        <div className=\"list-container \">\r\n            <List>\r\n                {reminderList.map((item: any, key: any) => {\r\n                    return (<ListItem key={key} className=\"list-item\">\r\n                        <div className=\"reminder-item-bullet\"/>\r\n                        <span className= \"item-label\" >{item.title}</span>\r\n                         <ListItemSecondaryAction>\r\n                            <div className=\"btn-group\">\r\n                                <Button variant=\"outlined\">more info</Button>\r\n                                {/* <Button variant=\"contained\" color=\"primary\">create now</Button> */}\r\n                            </div>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>)\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default function Overview(props: any) {\r\n    const { context } = props;\r\n    return (\r\n        <div className=\"overview-container\">\r\n            <div className=\"result todo-container\">\r\n                <div className=\"title-container\">\r\n                    <Typography variant=\"h4\" component=\"h4\" className=\"title bold\">\r\n                        <span className=\"title\">DO NOW</span>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"span\">\r\n                    Take Care of the task on this list ASAP. This might put you in legal risk\r\n                    </Typography>\r\n                </div>\r\n                <TodoList todoList={context.todos}></TodoList>\r\n            </div>\r\n            <div className=\"result reminder-container\">\r\n                <div className=\"title-container\">\r\n                    <Typography variant=\"h4\" component=\"h4\" className=\"title bold\">\r\n                        <span className=\"title\">Do Later</span>\r\n                    </Typography>\r\n                </div>\r\n                <ReminderList reminderList={context.reminders}></ReminderList>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Typography, Link } from \"@material-ui/core\";\r\nimport { Result } from \"../../../../data/context\";\r\nexport default function QuestionRepo(props: any) {\r\n    const { resultList, questionList } = props;\r\n    console.log(questionList);\r\n    return (\r\n        <div className=\"repo-container\">\r\n            {resultList.map((result: Result, key: any) => {\r\n                return (\r\n                    <div className=\"repo-item\" key={key}>\r\n\r\n                        <div className=\"question-container\">\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"title\" gutterBottom>\r\n                                {questionList[result.questionId].content}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                because you answered: {questionList[result.questionId].options.find((opt: { id: number; }) => opt.id === result.optionId) ?.label}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"link\" >\r\n                                <Link>Change my answer</Link>\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"info-container\">\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"title\" gutterBottom>\r\n                                {result.repo}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"link\" >\r\n                                <Link>Learn more</Link>\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport TabNav from \"../../../../components/TabNav/TabNav\";\r\nimport Overview from \"./Overview\";\r\nimport QuestionRepo from \"./QuestionRepo\";\r\nimport {getModules} from \"../../../../data/data\";\r\nexport default function ResultDetail(props: any) {\r\n    console.log(props.context);\r\n    const survey = getModules();\r\n    // const context = getContext();\r\n    const { context } = props;\r\n    // console.log(context.modules[1]);\r\n    function getTabList() {\r\n        let tabList: any = [];\r\n        tabList.push({\r\n            title: \"OUTCOME\", tabContent: <Overview context={context}/>\r\n        })\r\n        if (context.modules) {\r\n            Object.keys(context.modules).forEach((key:any) => {\r\n                tabList.push({\r\n                    title: context.modules[key].name, tabContent: <QuestionRepo questionList={survey[key].nodes}  resultList={context.modules[key].results}/>\r\n                })\r\n            })\r\n        }\r\n        return tabList;\r\n    }\r\n    const tabList = getTabList();\r\n    return (\r\n        <div className=\"result-detail-container\">\r\n            <TabNav \r\n            tabList = {tabList}\r\n            ></TabNav>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Header from \"../../../components/Header/Header\";\r\nimport HeaderLinks from \"../../../components/Header/HeaderLink\";\r\nimport ResultDetail from \"./Detail/ResultDetail\";\r\nimport { ResultContextConsumer } from \"../../../data/context\";\r\nimport \"./ResultStyle.css\";\r\nimport banrdIcon from \"../../../Assets/img/botavator.svg\";\r\n\r\n\r\nexport default function ResultPage() {\r\n    return (\r\n        <div className=\"full-screen-container white result-page\">\r\n            <Header\r\n                brand={banrdIcon}\r\n                brandName = \"LSALT 2.0 | \"\r\n                toolTitle=\"Non-profit Self Assessment\"\r\n                fixed\r\n                color=\"white\"\r\n                rightLinks={<HeaderLinks />}\r\n                absolute\r\n\r\n            />\r\n            <div className=\"main-container\">\r\n               \r\n                <ResultContextConsumer>\r\n                    {({ context }) => (\r\n                        <ResultDetail context={context}></ResultDetail>\r\n                    )}\r\n                </ResultContextConsumer>\r\n            </div>\r\n            {/* <Footer></Footer> */}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport history from './history';\r\nimport ChatbotPage from \"./containers/Assessment/Chatbot/ChatbotPage\";\r\nimport ResultPage from \"./containers/Assessment/Result/ResultPage\";\r\nimport { ResultContextProvider } from '././data/context'\r\nimport './App.css';\r\nimport './components/common.css';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router history={history}>\r\n      <ResultContextProvider>\r\n        <Switch>\r\n          <Route path=\"/assessment\" component={ChatbotPage} />\r\n          <Route path=\"/result\" component={ResultPage} />\r\n          <Route path=\"/\" component={ChatbotPage} />\r\n        </Switch>\r\n      </ResultContextProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/botavator.308830c4.svg\";"],"sourceRoot":""}