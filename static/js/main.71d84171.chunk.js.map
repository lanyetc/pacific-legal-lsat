{"version":3,"sources":["history.tsx","components/Header/Header.tsx","components/Header/HeaderLink.tsx","containers/Assessment/Chatbot/ProgressBar.tsx","model/Message.tsx","containers/Assessment/Chatbot/ChatbotMessage.tsx","model/Option.tsx","model/ResponseItem.tsx","model/Trigger.tsx","model/SingleSelectQuestion.tsx","model/MultiSelectQuestion.tsx","model/ResponseMatcher.tsx","model/AutoPlayMessage.tsx","model/MessageFactory.tsx","model/ResponsePath.tsx","containers/Assessment/Chatbot/UserMessage.tsx","containers/Assessment/Chatbot/Chat.tsx","containers/Assessment/Chatbot/ToDoSection.tsx","data/data.tsx","data/context.tsx","containers/Assessment/Chatbot/ChatbotPage.tsx","components/TabNav/TabNav.tsx","containers/Assessment/Result/Detail/Overview.tsx","containers/Assessment/Result/Detail/QuestionRepo.tsx","containers/Assessment/Result/Detail/ResultDetail.tsx","containers/Assessment/Result/ResultPage.tsx","App.tsx","serviceWorker.ts","index.tsx","Assets/img/botavator.svg"],"names":["createHistory","Header","props","React","useState","mobileOpen","setMobileOpen","rightLinks","leftLinks","brand","toolTitle","brandName","brandComponent","className","src","alt","AppBar","Toolbar","undefined","Hidden","smDown","implementation","mdUp","IconButton","color","aria-label","onClick","defaultProp","HeaderLinks","List","ListItem","Button","ProgressBar","MessageType","ChatbotMessage","botAvator","content","Message","responseMatcher","_id","_content","_options","_triggers","_defaultTrigger","_extraInfo","responsePath","this","triggers","trigger","triggerExpectedResponses","expectedResponses","matchOptions","defaultTrigger","Option","_label","OptionFactory","optionDatas","options","forEach","data","id","label","push","ResponseItem","_messageId","_optionIds","optionId","optionIds","indexOf","item","ResponseItemFactory","responseItemData","messageId","Trigger","_expectedResponses","_action","_resultReport","_todo","_reminder","_reply","TriggerFactory","triggerDatas","action","resultReport","todo","reminder","reply","createResponseItemFromData","triggerData","SingleSelectQuestion","defualtTrigger","extraInfo","MultiSelectQuestion","MatchFullResponse","expectedResponse","findMessageResponse","getMessageOptions","findResponseOption","MatchPartialResponse","AutoPlayMessage","MessageFactory","console","log","type","createTriggersFromData","createTriggerFromData","createOptionsFromData","singleSelect","matcher","multiSelect","autoPlayMessage","Error","ResponsePath","_responseList","_responseMap","responseMap","responseItem","responseList","UserMessage","userOptionComponent","message","selectedOptionIds","showExtraInfo","questionId","extraOptionContent","optionItems","generateExtraOptionComponent","handleShowExtraInfo","title","map","option","key","includes","handleMultiSelectOptions","handleMultiSelectSubmit","handleSelectOptions","Chat","messageOptions","displayedMessages","displayedMessage","length","ToDoSection","todoList","reminderList","getModules","name","nodes","generateMessages","createMessageFromData","nextQuestionId","defaultContext","moduleResults","todos","reminders","ResultContext","createContext","context","updateContext","contextItm","ResultContextProvider","contextItem","state","result","results","path","setState","Provider","value","children","Component","ResultContextConsumer","Consumer","ChatbotPage","survey","modules","currentMessage","currentModuleId","handleSingleSelectResponse","bind","handleMultiSelectClick","getNextAction","displayNextMessage","moduleId","next","nextMessage","concat","scrollToBottom","lastMessageIndex","messageList","selectedOptionId","isInactiveQuestion","markOptionIdSelected","isEmptySelection","lastMessage","processSelectedOptions","updateResponsePath","findTrigger","resultItem","updateState","last","repeatMessage","cloneDeep","triggerAction","history","nextModuleId","chatbotScroller","document","getElementById","scrollTop","scrollHeight","exception","answer","currentQuestionId","currentOptionId","banrdIcon","fixed","absolute","contextType","TabNav","tabList","setValue","tabs","tab","i","Tab","Tabs","onChange","event","newValue","variant","prop","tabContent","TodoList","ListItemSecondaryAction","ReminderList","Overview","Typography","component","QuestionRepo","resultList","questionList","gutterBottom","find","opt","Link","repo","ResultDetail","Object","keys","getTabList","ResultPage","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wTAEeA,E,MAAAA,K,iKCaA,SAASC,EAAOC,GAAiJ,IAAD,EACzIC,IAAMC,UAAS,GAD0H,mBACtKC,EADsK,KAC1JC,EAD0J,KAKrKC,EAAuDL,EAAvDK,WAAYC,EAA2CN,EAA3CM,UAAWC,EAAgCP,EAAhCO,MAAOC,EAAyBR,EAAzBQ,UAAWC,EAAcT,EAAdS,UAE7CC,EAAiB,6BAAK,yBAAKC,UAAU,WAAWC,IAAKL,EAAOM,IAAI,eAAe,0BAAMF,UAAU,cAAcF,GAAiB,0BAAME,UAAU,YAAYH,IAC9J,OACE,kBAACM,EAAA,EAAD,CAAQH,UAAU,gBAChB,kBAACI,EAAA,EAAD,CAASJ,UAAU,qBACFK,IAAdV,EAA0B,CAAEI,kBAAmB,KAChD,yBAAKC,UAAU,aACEK,IAAdV,EACC,kBAACW,EAAA,EAAD,CAAQC,QAAM,EAACC,eAAe,OAC3Bb,GAGDI,GAGN,kBAACO,EAAA,EAAD,CAAQC,QAAM,EAACC,eAAe,OAC3Bd,GAEH,kBAACY,EAAA,EAAD,CAAQG,MAAI,GACV,kBAACC,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,cACXC,QA1BiB,WACzBpB,GAAeD,KA2BP,kBAAC,IAAD,UAwBZJ,EAAO0B,YAAc,CACnBH,MAAO,S,+BChEM,SAASI,IACtB,OACE,kBAACC,EAAA,EAAD,CAAMhB,UAAU,WAOd,kBAACiB,EAAA,EAAD,CAAUjB,UAAU,eAClB,kBAACkB,EAAA,EAAD,CAAQlB,UAAY,WAApB,aCdO,SAASmB,IACpB,OAEI,yBAAKnB,UAAU,uB,ICDXoB,E,iBCDG,SAASC,EAAehC,GACnC,OACI,yBAAKW,UAAU,kBACX,yBAAKA,UAAU,eACX,yBAAKC,IAAKqB,IAAWpB,IAAI,oBAE7B,yBAAKF,UAAU,sBAAsBX,EAAMkC,W,SDL3CH,O,+BAAAA,I,6BAAAA,I,sCAAAA,M,KAiBL,IAAMI,EAAb,WACI,WACWC,EACCC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAkB,yBANnBN,kBAMkB,KALjBC,MAKiB,KAJjBC,WAIiB,KAHjBC,WAGiB,KAFjBC,YAEiB,KADjBC,kBACiB,KAAjBC,aARhB,wDAgCuBC,GAAsC,IAAD,uBACpD,YAAoBC,KAAKC,SAAzB,+CAAmC,CAAC,IAA3BC,EAA0B,QAC3BC,EAA2BD,EAAQE,kBAEvC,GADuBJ,KAAKR,gBAAgBa,aAAaF,EAA0BJ,GAE/E,OAAOG,GALqC,kFAQpD,OAAOF,KAAKM,iBAxCpB,yBAaQ,OAAON,KAAKP,MAbpB,8BAgBQ,OAAOO,KAAKN,WAhBpB,8BAmBQ,OAAOM,KAAKL,WAnBpB,gCAsBQ,OAAOK,KAAKF,aAtBpB,+BAyBQ,OAAOE,KAAKJ,YAzBpB,qCA4BQ,OAAOI,KAAKH,oBA5BpB,KErBaU,EAAb,WACI,WAAoBd,EACRe,GAAiB,yBADTf,MACQ,KAAhBe,SAFhB,+CAMQ,OAAOR,KAAKP,MANpB,4BAUQ,OAAOO,KAAKQ,WAVpB,KAmBaC,EAAb,mHACkCC,GAC1B,IAAIC,EAAoB,GAKxB,OAJAD,EAAYE,SAAQ,SAAAC,GAAS,IACnBC,EAAaD,EAAbC,GAAIC,EAASF,EAATE,MACVJ,EAAQK,KAAK,IAAIT,EAAOO,EAAIC,OAEzBJ,MAPf,KChBaM,EAAb,WACI,WAAoBC,EACAC,GAAsB,yBADtBD,aACqB,KAArBC,aAFxB,+DAW8BC,GACtB,OAAIpB,KAAKqB,UAAUC,QAAQF,IAAa,IAZhD,sCAkB2BG,MAlB3B,gCAMQ,OAAOvB,KAAKkB,aANpB,gCASQ,OAAOlB,KAAKmB,eATpB,KA4BaK,EAAb,wHACuCC,GAAqC,IAC/DC,EAAwBD,EAAxBC,UAAWL,EAAaI,EAAbJ,UAChB,OAAO,IAAIJ,EAAaS,EAAWL,OAH3C,KC7BaM,EAAb,WACI,WACYC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAiB,yBALjBL,qBAKgB,KAJhBC,UAIgB,KAHhBC,gBAGgB,KAFhBC,QAEgB,KADhBC,YACgB,KAAhBC,SAPhB,8DAYQ,OAAOjC,KAAK4B,qBAZpB,4BAgBQ,OAAO5B,KAAKiC,SAhBpB,6BAoBQ,OAAOjC,KAAK6B,UApBpB,mCAwBQ,OAAO7B,KAAK8B,gBAxBpB,2BA4BQ,OAAO9B,KAAK+B,QA5BpB,+BAgCQ,OAAO/B,KAAKgC,cAhCpB,KA6CaE,EAAb,oHAEkCC,GAC1B,IAAIlC,EAAsB,GAM1B,OALAkC,EAAavB,SAAQ,SAAAC,GAAS,IACrBuB,EAAgDvB,EAAhDuB,OAAQC,EAAwCxB,EAAxCwB,aAAcC,EAA0BzB,EAA1ByB,KAAMC,EAAoB1B,EAApB0B,SAAUC,EAAU3B,EAAV2B,MACvCpC,EAAiCoB,EAAoBiB,2BAA2B5B,EAAKT,mBACzFH,EAASe,KAAK,IAAIW,EAAQvB,EAAmBgC,EAAQC,EAAcC,EAAMC,EAAUC,OAEhFvC,IATf,4CAYiCyC,GAA2B,IAC9CN,EAAgDM,EAAhDN,OAAQC,EAAwCK,EAAxCL,aAAcC,EAA0BI,EAA1BJ,KAAMC,EAAoBG,EAApBH,SAAUC,EAAUE,EAAVF,MACxCpC,EAAiCoB,EAAoBiB,2BAA2BC,EAAYtC,mBAChG,OAAO,IAAIuB,EAAQvB,EAAmBgC,EAAQC,EAAcC,EAAMC,EAAUC,OAfpF,KC1CaG,EAAb,YACI,WACInD,EACAsB,EACAxB,EACAqB,EACAV,EACA2C,EACAC,GAAgB,qEACNrD,EAAiBsB,EAAIxB,EAASqB,EAASV,EAAU2C,EAAgBC,IATnF,2BAA0CtD,GCA7BuD,EAAb,YACI,WACItD,EACAsB,EACAxB,EACAqB,EACAV,EACA2C,EACAC,GAAgB,qEACNrD,EAAiBsB,EAAGxB,EAASqB,EAASV,EAAU2C,EAAgBC,IATlF,2BAAyCtD,GCO5BwD,EAAb,qGACiBC,EAAgCjD,GACzC,IAAM2B,EAAYsB,EAAiBtB,UAD2C,uBAE9E,YAAqBsB,EAAiB3B,UAAtC,+CAAiD,CAAC,IAAzCD,EAAwC,QAE7C,IAD8BrB,EAAakD,oBAAoBvB,EAAWN,GAEtE,OAAO,GAL+D,6GAS7E,YAAqBrB,EAAamD,kBAAkBxB,GAApD,+CAAgE,CAAC,IAAxDN,EAAuD,QAE7D,IAD8B4B,EAAiBG,mBAAmB/B,GAE9D,OAAO,GAZ+D,kFAe9E,OAAO,MAhBf,KAoBagC,EAAb,qGACiBJ,EAAgCjD,GACxC,IAAM2B,EAAYsB,EAAiBtB,UADyC,uBAE5E,YAAqBsB,EAAiB3B,UAAtC,+CAAiD,CAAC,IAAzCD,EAAwC,QAE9C,GAD8BrB,EAAakD,oBAAoBvB,EAAWN,GAEtE,OAAO,GAL8D,kFAQ5E,OAAO,MAThB,KC3BaiC,EAAb,YACI,WACI7D,EACAsB,EACAxB,EACAqB,EACAV,EACA2C,EACAC,GAAgB,qEACNrD,EAAiBsB,EAAIxB,EAASqB,EAASV,EAAU2C,EAAgBC,IATnF,2BAAqCtD,GCExB+D,EAAb,kGAEQC,QAAQC,IAAI,QAFpB,4CAIiC3C,GAAmC,IACtDC,EAAsCD,EAAtCC,GAAI2C,EAAkC5C,EAAlC4C,KAAMnE,EAA4BuB,EAA5BvB,QAD2C,EACfuB,EAAnBgC,iBADkC,MACxB,KADwB,EAErD5C,EAAsBiC,EAAewB,uBAAuB7C,EAAKZ,UACjEK,EAAyB4B,EAAeyB,sBAAsB9C,EAAKP,gBACnEK,EAAoBF,EAAcmD,sBAAsB/C,EAAKF,SACnE,GAAI8C,GAAQtE,EAAY0E,aAAa,CACjC,IAAMC,EAA2B,IAAIV,EACrC,OAAO,IAAIT,EACPmB,EAAShD,EAAIxB,EAASqB,EAASV,EAAUK,EAAgBuC,GAG5D,GAAIY,GAAQtE,EAAY4E,YAAY,CACrC,IAAMD,EAA2B,IAAIf,EACrC,OAAO,IAAID,EACPgB,EAAShD,EAAIxB,EAASqB,EAASV,EAAUK,EAAgBuC,GAE1D,GAAIY,GAAQtE,EAAY6E,gBAAgB,CAI3C,IAAMF,EAA2B,IAAIV,EACrC,OAAO,IAAIC,EACPS,EAAShD,EAAIxB,EAASqB,EAASV,EAAUK,EAAgBuC,GAGjE,MAAM,IAAIoB,UA7BlB,KCLaC,EAAb,WAII,aAAe,yBAHPC,mBAGM,OAFNC,kBAEM,EACVpE,KAAKmE,cAAgB,GACrBnE,KAAKoE,aAAe,GAN5B,gEAiB+B1C,EAAmBN,GAG1C,SADqBpB,KAAKqE,YAAY3C,KAAc1B,KAAKqE,YAAY3C,GAAWyB,mBAAmB/B,MAnB3G,sCAuB2BkD,GACnBtE,KAAKuE,aAAavD,KAAKsD,GACvBtE,KAAKqE,YAAYC,EAAa5C,WAAa4C,IAzBnD,wCA6B6B5C,GACrB,GAAG1B,KAAKqE,YAAY3C,GAChB,OAAO1B,KAAKqE,YAAY3C,GAAWL,UAEvC,MAAM,IAAI4C,QAjClB,mCAWQ,OAAOjE,KAAKmE,gBAXpB,kCAcQ,OAAOnE,KAAKoE,iBAdpB,KCSe,SAASI,EAAYpH,GAAa,IAMzCqH,EANwC,EAC4BrH,EAAMsH,QAAtEA,EADoC,EACpCA,QAASC,EAD2B,EAC3BA,kBAAmBC,EADQ,EACRA,cAC9BjE,EAAU+D,EAAQ/D,QAClBkE,EAAaH,EAAQ5D,GACrBgE,EAAqBJ,EAAQ7B,UAC/BkC,EAAmB,GAgCvB,SAASC,IACL,OACIF,EACK,kBAAC9F,EAAA,EAAD,CAAUjB,UAAU,iBACjB,kBAACkB,EAAA,EAAD,CAAQlB,UAAW6G,EAAgB,oBAAsB,WAAYhG,QAAS,kBAAMxB,EAAM6H,oBAAoBJ,KAAcC,EAAmBI,QACpI,KAI3B,OAvCIR,aAAmB5B,GACnBiC,EAAcpE,EAAQwE,KAAI,SAACC,GACvB,OACI,kBAACpG,EAAA,EAAD,CAAUjB,UAAU,gBAAgB+C,GAAIsE,EAAOtE,GAAIuE,IAAKD,EAAOtE,IAC3D,kBAAC7B,EAAA,EAAD,CAAQlB,UAAW4G,EAAkBW,SAASF,EAAOtE,IAAM,oBAAsB,WAAYlC,QAAS,kBAAMxB,EAAMmI,yBAAyBV,EAAYO,EAAOtE,MAAMsE,EAAOrE,WAIvL0D,EAAsB,kBAAC1F,EAAA,EAAD,KACjBgG,EACAC,IACD,kBAAChG,EAAA,EAAD,CAAUjB,UAAU,iBAChB,kBAACkB,EAAA,EAAD,CAAQlB,UAAU,WAAWa,QAAS,kBAAMxB,EAAMoI,wBAAwBX,KAA1E,cAIRE,EAAcpE,EAAQwE,KAAI,SAACC,GACvB,OAAQ,kBAACpG,EAAA,EAAD,CAAUjB,UAAU,gBAAgB+C,GAAIsE,EAAOtE,GAAIuE,IAAKD,EAAOtE,IACnE,kBAAC7B,EAAA,EAAD,CAAQlB,UAAW4G,EAAkBW,SAASF,EAAOtE,IAAM,oBAAsB,WAAYlC,QAAS,kBAAMxB,EAAMqI,oBAAoBZ,EAAYO,EAAOtE,MAAMsE,EAAOrE,WAG9K0D,EACI,kBAAC1F,EAAA,EAAD,KACKgG,EACAC,KAGTzB,QAAQC,IAAIiB,IAaZ,yBAAK1G,UAAU,mBACX,yBAAKA,UAAU,gBACV0G,ICtDF,SAASiB,EAAKtI,GACzB,IAAMuI,EAAiBvI,EAAMwI,kBAAkBT,KAAI,SAACU,EAAoCR,GAAc,IAC3FX,EAAoDmB,EAApDnB,QAASE,EAA2CiB,EAA3CjB,cAAkCpC,GAASqD,EAA5BlB,kBAA4BkB,EAATrD,OAClD,OAAIkC,EAAQpF,QAEJ,yBAAK+F,IAAKA,GACN,kBAACjG,EAAD,CAAgBE,QAASoF,EAAQpF,UAChCoF,EAAQ/D,SAAW+D,EAAQ/D,QAAQmF,OAAS,GAC7C,kBAACtB,EAAD,CACIE,QAASmB,EACTZ,oBAAqB7H,EAAM6H,oBAC3BQ,oBAAqBrI,EAAMqI,oBAC3BF,yBAA0BnI,EAAMmI,yBAChCC,wBAAyBpI,EAAMoI,0BAElChD,GAAU,kBAACpD,EAAD,CAAgBE,QAASkD,IACnCoC,GAAiB,kBAACxF,EAAD,CAAgBE,QAASoF,EAAQ7B,UAAUvD,WAIlE,QAGX,OACI,yBAAKvB,UAAU,qBACX,yBAAKA,UAAU,YAAY+C,GAAG,oBACzB6E,IC7BF,SAASI,EAAY3I,GAAa,IACrC4I,EAA2B5I,EAA3B4I,SAAUC,EAAiB7I,EAAjB6I,aAClB,OACI,yBAAKlI,UAAU,kCACX,yBAAKA,UAAU,oCACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,aACX,0CAGR,yBAAKA,UAAU,mBACX,kBAACgB,EAAA,EAAD,KACKiH,EAASb,KAAI,SAAC5D,EAAW8D,GACtB,OAAQ,kBAACrG,EAAA,EAAD,CAAUqG,IAAKA,GACnB,yBAAKtH,UAAU,qBACf,0BAAMA,UAAW,cAAewD,UAMpD,yBAAKxD,UAAU,sCACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,aACX,4CAGR,yBAAKA,UAAU,mBACX,kBAACgB,EAAA,EAAD,KACKkH,EAAad,KAAI,SAAC5D,EAAW8D,GAC1B,OAAQ,kBAACrG,EAAA,EAAD,CAAUqG,IAAKA,GACpB,yBAAKtH,UAAU,yBACd,0BAAMA,UAAW,cAAewD,WChBzD,SAAS2E,KAEZ,MAAO,CAAC,CAAEC,KAAM,iBAAkBC,MADXC,OAKpB,SAASA,KAqIZ,MAAO,CApIU/C,EAAegD,sBAC5B,CACIxF,GAAI,EACJ2C,KAAMtE,EAAY0E,aAClBvE,QAAS,mDACTqB,QAAS,CACL,CACIG,GAAI,IACJC,MAAO,OAEX,CACID,GAAI,IACJC,MAAO,OAGfd,SAAU,CACN,CACIG,kBAAmB,CAACsB,UAAW,EAAGL,UAAU,CAAC,MAC7Ce,OAAQ,CACJqB,KAAM,eACN8C,eAAgB,GAEpBlE,aAAc,sCACdC,KAAM,cACNC,SAAU,oBAGlBjC,eAAgB,CACZF,kBAAmB,CAACsB,UAAW,EAAGL,UAAU,CAAC,MACzCe,OAAQ,CACJqB,KAAM,eACN8C,eAAgB,GAEpBlE,aAAc,0DACdG,MAAO,YACPF,KAAM,cACNC,SAAU,mBAElBM,UAAW,CACPqC,MAAO,4BACP5F,QAAS,oOAMJgE,EAAegD,sBAC5B,CACIxF,GAAI,EACJ2C,KAAMtE,EAAY4E,YAClBzE,QAAS,0EACTqB,QAAS,CACL,CACIG,GAAI,IACJC,MAAO,OAEX,CACID,GAAI,IACJC,MAAO,MAEX,CACID,GAAI,IACJC,MAAO,UAGfd,SAAU,CACN,CACIG,kBAAmB,CAACsB,UAAW,EAAGL,UAAU,CAAC,IAAK,MAClDe,OAAQ,CACJqB,KAAM,eACN8C,eAAgB,GAEpBlE,aAAc,+BACdC,KAAM,cACNC,SAAU,oBAGlBjC,eAAgB,CACZF,kBAAmB,CAACsB,UAAW,EAAGL,UAAU,CAAC,IAAK,MAC9Ce,OAAQ,CACJqB,KAAM,eACN8C,eAAgB,GAEpBlE,aAAc,+BACdG,MAAO,eAKNc,EAAegD,sBAC5B,CACIxF,GAAI,EACJ2C,KAAMtE,EAAY0E,aAClBvE,QAAS,mDACTqB,QAAS,CACL,CACIG,GAAI,IACJC,MAAO,OAEX,CACID,GAAI,IACJC,MAAO,OAGfd,SAAU,CACN,CACIG,kBAAmB,CAACsB,UAAW,EAAGL,UAAU,CAAC,MAC7Ce,OAAQ,CACJqB,KAAM,eACN8C,eAAgB,GAEpBlE,aAAc,sBACdC,KAAM,cACNC,SAAU,oBAGlBjC,eAAgB,CACZF,kBAAmB,CAACsB,UAAW,EAAGL,UAAU,CAAC,MACzCe,OAAQ,CACJqB,KAAM,eACN8C,eAAgB,GAEpBlE,aAAc,sBACdG,MAAO,aAEfK,UAAW,CACPqC,MAAO,4BACP5F,QAAS,qOCzEzB,IAAMkH,GAA0B,CAC5BC,cAAe,GACfC,MAAO,GACPC,UAAW,IAGFC,GAAgBvJ,IAAMwJ,cAAc,CAC7CC,QAASN,GACTO,cAAe,SAACjG,EAAYkG,OAGnBC,GAAb,2MAGIF,cAAgB,SAACjG,EAAYoG,GACzB,IAAIJ,EAAU,EAAKK,MAAML,QACrBA,EAAQL,cAAc3F,IACnBoG,EAAY5E,MACXwE,EAAQL,cAAc3F,GAAI4F,MAAM1F,KAAKkG,EAAY5E,MAClD4E,EAAY3E,UACXuE,EAAQL,cAAc3F,GAAI6F,UAAU3F,KAAKkG,EAAY3E,UACtD2E,EAAYE,QACXN,EAAQL,cAAc3F,GAAIuG,QAAQrG,KAAKkG,EAAYE,QACvDN,EAAQL,cAAc3F,GAAIwG,KAAKtG,KAAKkG,EAAYI,OAEhDR,EAAQL,cAAc3F,GAAM,CACxBqF,KAAMe,EAAYf,KAClBO,MAAO,CAACQ,EAAYR,OACpBC,UAAW,CAACO,EAAYP,WACxBU,QAAS,CAACH,EAAYE,QACtBE,KAAM,CAACJ,EAAYI,OAGxBJ,EAAY5E,MACXwE,EAAQJ,MAAM1F,KAAKkG,EAAY5E,MAChC4E,EAAY3E,UACXuE,EAAQH,UAAU3F,KAAKkG,EAAY3E,UACvC,EAAKgF,SAAS,CAAET,QAASA,KA1BjC,EA4BIK,MAAQ,CACJL,QAASN,GACTO,cAAe,EAAKA,eA9B5B,wEAkCQ,OACI,kBAACH,GAAcY,SAAf,CAAwBC,MAAOzH,KAAKmH,OAC/BnH,KAAK5C,MAAMsK,cApC5B,GAA2CrK,IAAMsK,WA0CpCC,GAAwBhB,GAAciB,S,oBCtG9BC,G,YAMjB,WAAY1K,GAAa,IAAD,uBACpB,4CAAMA,KALV2K,YAIwB,IAHxBC,aAGwB,IAFxBb,WAEwB,EAEpB,EAAKY,OFvBF1B,KEwBH,EAAK2B,QAAU9B,KACf,IAAMnG,EAA6B,IAAImE,EAJnB,OAKpB,EAAKiD,MAAQ,CACTc,eAAgB,EAAKF,OAAO,GAC5BG,gBAAiB,EACjBnI,aAAcA,EACd6F,kBAAmB,GACnBI,SAAU,GACVC,aAAc,IAElB,EAAKkC,2BAA6B,EAAKA,2BAA2BC,KAAhC,gBAClC,EAAK5C,wBAA0B,EAAKA,wBAAwB4C,KAA7B,gBAC/B,EAAKnD,oBAAsB,EAAKA,oBAAoBmD,KAAzB,gBAC3B,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBAC9B,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAjBD,E,iFAqBpBpI,KAAKuI,mBAAmB,CAACC,SAAU,EAAG9G,UAAW,M,yCAI3B+G,GAAY,IAAD,OAC3BC,EAAuB1I,KAAKgI,QAAQS,EAAKD,UAAUpC,MAAMqC,EAAK/G,WAC7DgD,EAA4B,CAACA,QAASgE,EAAa/D,kBAAmB,GAAIC,eAAe,GAEhG5E,KAAKuH,UAAS,SAACJ,EAAe/J,GAC1B,MAAO,CACH8K,gBAAiBO,EAAKD,SACtBP,eAAgBS,EAChB9C,kBAAmBuB,EAAMvB,kBAAkB+C,OAAOjE,OAEvD,WACC,EAAKkE,oBAET,IAAM1I,EAAUwI,EAAYpI,eACxBoI,aAAuBrF,GACvBrD,KAAKuI,mBAAmBvI,KAAKsI,cAAcpI,M,yCAMxBoE,GACvBtE,KAAKuH,UAAS,SAACJ,GAEX,MAAO,CACHpH,aAAcoH,EAAMpH,mB,kCAKZ2E,EAAcpC,EAAWC,GACzCvC,KAAKuH,UAAS,SAACJ,EAAe/J,GAC1B,IAAIyL,EAAmB1B,EAAMvB,kBAAkBE,OAAS,EAUxD,OATG+C,EAAmB,IAClBA,EAAmB,GACvB1B,EAAMvB,kBAAkBiD,GAAkBrG,MAAQkC,EAC/CpC,GACC6E,EAAMnB,SAAShF,KAAKsB,GAErBC,GACC4E,EAAMlB,aAAajF,KAAKuB,GAErB,CACHuG,YAAY,YAAM3B,EAAMvB,mBACxBI,SAAUmB,EAAMnB,SAChBC,aAAckB,EAAMlB,mB,6CAMFpB,EAAiBkE,GACvC/I,KAAKgJ,mBAAmBnE,IAI5B7E,KAAKiJ,qBAAqBF,K,2CAGF3H,GACxBpB,KAAKuH,UAAS,SAACJ,GACX,IAAI0B,EAAmB1B,EAAMvB,kBAAkBE,OAAS,EAMxD,OALG+C,EAAmB,IAClBA,EAAmB,GACnB1B,EAAMvB,kBAAkBiD,GAAkBlE,kBAAkBW,SAASlE,IACrE+F,EAAMvB,kBAAkBiD,GAAkBlE,kBAAkB3D,KAAKI,GAE9D,CACHwE,kBAAmBuB,EAAMvB,wB,8CAQNf,GAC3B,IAAI7E,KAAKgJ,mBAAmBnE,KAAe7E,KAAKkJ,mBAAhD,CAGA,IAAMC,EAAcnJ,KAAKmH,MAAMvB,kBAAkBE,OAAS,EAC1D9F,KAAKoJ,uBAAuBvE,EAAY7E,KAAKmH,MAAMvB,kBAAkBuD,GAAaxE,sB,yCAIlF,IAAIkE,EAAmB7I,KAAKmH,MAAMvB,kBAAkBE,OAAS,EAG7D,OAFG+C,EAAmB,IAClBA,EAAmB,GACpB7I,KAAKmH,MAAMvB,kBAAkBiD,GAAkBlE,kBAAkBmB,QAAW,I,iDAYjDjB,EAAiBkE,GAC3C/I,KAAKgJ,mBAAmBnE,KAG5B7E,KAAKiJ,qBAAqBF,GAC1B/I,KAAKoJ,uBAAuBvE,EAAYkE,M,sFAIRlE,EAAiBF,G,oFAC3CL,EAA6B,IAAIrD,EAAajB,KAAKmH,MAAMc,eAAenH,GAAI6D,G,SAC5E3E,KAAKqJ,mBAAmB/E,G,cAExBpE,EAAeF,KAAKmH,MAAMc,eAAeqB,YAAYtJ,KAAKmH,MAAMpH,cAElEwJ,EAAkB,CAClBjC,KAAMhD,EACNhC,KAAMpC,EAAQoC,KAAOpC,EAAQoC,KAAO,KACpCC,SAAUrC,EAAQqC,SAAWrC,EAAQqC,SAAW,KAChDF,aAAcnC,EAAQmC,cAE1BrC,KAAK8G,QAAQC,cAAc/G,KAAKmH,MAAMe,gBAAiBqB,G,SACjDvJ,KAAKwJ,YAAYtJ,EAAQsC,MAAO+G,EAAWjH,KAAMiH,EAAWhH,U,OAG9DmG,EAAc1I,KAAKsI,cAAcpI,EAAQkC,QAC7CpC,KAAKuI,mBAAmBG,G,oJAGD7D,GAAkB,IAAD,OACpC7E,KAAKgJ,mBAAmBnE,IAG5B7E,KAAKuH,UAAS,SAACJ,EAAe/J,GAC1B,IAAIqM,EAAO,EAAKtC,MAAMvB,kBAAkBE,OAAQ,EAC7C2D,EAAO,IACNA,EAAO,GAEX,IAAMC,EAAgBC,KAAUxC,EAAMvB,kBAAkB6D,IAExD,OADAtC,EAAMvB,kBAAkB6D,GAAM7E,eAAgB,EACvC,CACHgB,kBAAkB,GAAD,mBAAMuB,EAAMvB,mBAAZ,CAA+B8D,U,oCAQ9CE,GAIV,GAA0B,QAAtBA,EAAcnG,KACdoG,EAAQ7I,KAAK,eACV,IAA0B,gBAAtB4I,EAAcnG,KACrB,MAAO,CAAE+E,SAAUxI,KAAKmH,MAAMe,gBAAiBxG,UAAWkI,EAAcrD,gBACrE,GAA0B,cAAtBqD,EAAcnG,KACrB,MAAO,CAAE+E,SAAUoB,EAAcE,aAAcpI,UAAWkI,EAAcrD,mB,uCAK5E,IACA,IAAIwD,EAAkBC,SAASC,eAAe,oBAC9CF,EAAgBG,UAAYH,EAAgBI,aAC3C,MAAMC,GACH7G,QAAQC,IAAI,uB,uCAII6G,EAAaC,EAAwBC,GACzD,OAAOF,EAAOjJ,WAAamJ,GAAmBF,EAAOxF,aAAeyF,I,yCAG7CzF,GACvB,OAAOA,IAAe7E,KAAKmH,MAAMc,eAAenH,K,+BAOhD,OACI,yBAAK/C,UAAU,2CACX,kBAACZ,EAAD,CACIQ,MAAO6M,IACP3M,UAAU,cACVD,UAAU,6BACV6M,OAAK,EACL/L,MAAM,QACNjB,WAAY,kBAACqB,EAAD,MACZ4L,UAAQ,IAEZ,yBAAK3M,UAAU,kBACX,kBAACmB,EAAD,MACA,kBAACwG,EAAD,CACIE,kBAAmB5F,KAAKmH,MAAMvB,kBAC9BL,yBAA4BvF,KAAKqI,uBACjC7C,wBAA2BxF,KAAKwF,wBAChCP,oBAAqBjF,KAAKiF,oBAC1BQ,oBAAqBzF,KAAKmI,6BAC9B,kBAACpC,EAAD,CACIC,SAAUhG,KAAKmH,MAAMnB,SACrBC,aAAcjG,KAAKmH,MAAMlB,qB,GA3OR5I,IAAMsK,WAoP/CG,GAAY6C,YAAc/D,G,+BC/QX,SAASgE,GAAOxN,GAAa,IAChCyN,EAAYzN,EAAZyN,QAD+B,EAEbxN,IAAMC,SAAS,GAFF,mBAEhCmK,EAFgC,KAEzBqD,EAFyB,KAMvCvH,QAAQC,IAAIqH,GACZ,IAAME,EAAOF,EAAQ1F,KAAI,SAAC6F,EAAUC,GAChC,OAAID,EAAI9F,OACG,kBAACgG,GAAA,EAAD,CAAKnK,MAAOiK,EAAI9F,MAAOG,IAAK4F,EAAGlN,UAAU,WAIxD,OACI,yBAAKA,UAAU,aACX,kBAACoN,GAAA,EAAD,CAAM1D,MAAOA,EAAO2D,SAZP,SAACC,EAA8BC,GAChDR,EAASQ,IAWuC3M,aAAW,sBAAsB4M,QAAQ,YAAYxN,UAAU,WACtGgN,GAEJF,EAAQ1F,KAAI,SAACqG,EAAWnG,GACrB,OAAIA,IAAQoC,EACD,yBAAKpC,IAAKA,EAAKtH,UAAU,aAAayN,EAAKC,YAE/C,S,wBCxBvB,SAASC,GAAStO,GAAa,IACnB4I,EAAa5I,EAAb4I,SACR,OACI,yBAAKjI,UAAU,wBACX,kBAACgB,EAAA,EAAD,KACKiH,EAASb,KAAI,SAAC5D,EAAW8D,GACtB,OAAQ,kBAACrG,EAAA,EAAD,CAAUjB,UAAU,YAAYsH,IAAKA,GAC1C,yBAAKtH,UAAU,qBACd,0BAAMA,UAAW,cAAewD,EAAK2D,OACrC,kBAACyG,GAAA,EAAD,KACI,yBAAK5N,UAAU,aACX,kBAACkB,EAAA,EAAD,CAAQsM,QAAQ,YAAhB,qBAWhC,SAASK,GAAaxO,GAAa,IACvB6I,EAAiB7I,EAAjB6I,aACR,OACI,yBAAKlI,UAAU,mBACX,kBAACgB,EAAA,EAAD,KACKkH,EAAad,KAAI,SAAC5D,EAAW8D,GAC1B,OAAQ,kBAACrG,EAAA,EAAD,CAAUqG,IAAKA,EAAKtH,UAAU,aAClC,yBAAKA,UAAU,yBACf,0BAAMA,UAAW,cAAewD,EAAK2D,OACpC,kBAACyG,GAAA,EAAD,KACG,yBAAK5N,UAAU,aACX,kBAACkB,EAAA,EAAD,CAAQsM,QAAQ,YAAhB,qBAYjB,SAASM,GAASzO,GAAa,IAClC0J,EAAY1J,EAAZ0J,QACR,OACI,yBAAK/I,UAAU,sBACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,mBACX,kBAAC+N,GAAA,EAAD,CAAYP,QAAQ,KAAKQ,UAAU,KAAKhO,UAAU,cAC9C,0BAAMA,UAAU,SAAhB,WAEJ,kBAAC+N,GAAA,EAAD,CAAYP,QAAQ,QAAQQ,UAAU,QAAtC,8EAIJ,kBAACL,GAAD,CAAU1F,SAAUc,EAAQJ,SAEhC,yBAAK3I,UAAU,6BACX,yBAAKA,UAAU,mBACX,kBAAC+N,GAAA,EAAD,CAAYP,QAAQ,KAAKQ,UAAU,KAAKhO,UAAU,cAC9C,0BAAMA,UAAU,SAAhB,cAGR,kBAAC6N,GAAD,CAAc3F,aAAca,EAAQH,c,cCjErC,SAASqF,GAAa5O,GAAa,IACtC6O,EAA6B7O,EAA7B6O,WAAYC,EAAiB9O,EAAjB8O,aAEpB,OADA3I,QAAQC,IAAI0I,GAER,yBAAKnO,UAAU,kBACVkO,EAAW9G,KAAI,SAACiC,EAAgB/B,GAAc,IAAD,EAC1C,OACI,yBAAKtH,UAAU,YAAYsH,IAAKA,GAE5B,yBAAKtH,UAAU,sBACX,kBAAC+N,GAAA,EAAD,CAAYP,QAAQ,QAAQQ,UAAU,IAAIhO,UAAU,QAAQoO,cAAY,GACnED,EAAa9E,EAAOvC,YAAYvF,SAErC,kBAACwM,GAAA,EAAD,CAAYP,QAAQ,QAAQQ,UAAU,KAAtC,mCAC2BG,EAAa9E,EAAOvC,YAAYlE,QAAQyL,MAAK,SAACC,GAAD,OAA0BA,EAAIvL,KAAOsG,EAAOhG,mBADpH,aAC2B,EAAqGL,OAEhI,kBAAC+K,GAAA,EAAD,CAAYP,QAAQ,QAAQQ,UAAU,IAAIhO,UAAU,QAChD,kBAACuO,GAAA,EAAD,2BAGR,yBAAKvO,UAAU,kBACX,kBAAC+N,GAAA,EAAD,CAAYP,QAAQ,QAAQQ,UAAU,IAAIhO,UAAU,QAAQoO,cAAY,GACnE/E,EAAOmF,MAEZ,kBAACT,GAAA,EAAD,CAAYP,QAAQ,QAAQQ,UAAU,IAAIhO,UAAU,QAChD,kBAACuO,GAAA,EAAD,0BCvBjB,SAASE,GAAapP,GACjCmG,QAAQC,IAAIpG,EAAM0J,SAClB,IAAMiB,EAAS7B,KAEPY,EAAY1J,EAAZ0J,QACRvD,QAAQC,IAAIsD,EAAQkB,QAAQ,IAe5B,IAAM6C,EAdN,WACI,IAAIA,EAAe,GAWnB,OAVAA,EAAQ7J,KAAK,CACTkE,MAAO,UAAWuG,WAAY,kBAACI,GAAD,CAAU/E,QAASA,MAEjDA,EAAQkB,SACRyE,OAAOC,KAAK5F,EAAQkB,SAASpH,SAAQ,SAACyE,GAClCwF,EAAQ7J,KAAK,CACTkE,MAAO4B,EAAQkB,QAAQ3C,GAAKc,KAAMsF,WAAY,kBAACO,GAAD,CAAcE,aAAcnE,EAAO1C,GAAO4G,WAAYnF,EAAQkB,QAAQ3C,GAAKgC,eAI9HwD,EAEK8B,GAChB,OACI,yBAAK5O,UAAU,2BACX,kBAAC6M,GAAD,CACAC,QAAWA,K,OCpBR,SAAS+B,KACpB,OACI,yBAAK7O,UAAU,2CACX,kBAACZ,EAAD,CACIQ,MAAO6M,IACP3M,UAAY,eACZD,UAAU,6BACV6M,OAAK,EACL/L,MAAM,QACNjB,WAAY,kBAACqB,EAAD,MACZ4L,UAAQ,IAGZ,yBAAK3M,UAAU,kBAEX,kBAAC6J,GAAD,MACK,gBAAGd,EAAH,EAAGA,QAAH,OACG,kBAAC0F,GAAD,CAAc1F,QAASA,S,WCDhC+F,GAfH,WACV,OACE,kBAAC,IAAD,CAAQhD,QAASA,GACf,kBAAC,GAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOvC,KAAK,cAAcyE,UAAWjE,KACrC,kBAAC,IAAD,CAAOR,KAAK,UAAUyE,UAAWa,KACjC,kBAAC,IAAD,CAAOtF,KAAK,IAAIyE,UAAWjE,SCLjBgF,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,GAAD,MAASpD,SAASC,eAAe,SDqI3C,kBAAmBoD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBE7InBC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.71d84171.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory';\r\n\r\nexport default createHistory();","import React from \"react\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// @material-ui/core components\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n// @material-ui/icons\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport './HeaderStyle.css'\r\nimport '../common.css'\r\n\r\n\r\nexport default function Header(props: { color: any; rightLinks: any; leftLinks: any; brand: string; brandName:string; toolTitle: string; fixed: boolean; absolute: boolean; }) {\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const { rightLinks, leftLinks, brand, toolTitle, brandName } = props;\r\n\r\nconst brandComponent = <div><img className=\"navBrand\" src={brand} alt=\"brand icon\" /><span className=\"brandTitle\">{brandName}</span><span className=\"navTitle\">{toolTitle}</span></div>;\r\n  return (\r\n    <AppBar className=\"appBar white\">\r\n      <Toolbar className=\"navContainer\">\r\n        {leftLinks !== undefined ? { brandComponent } : null}\r\n        <div className=\"flex\">\r\n          {leftLinks !== undefined ? (\r\n            <Hidden smDown implementation=\"css\">\r\n              {leftLinks}\r\n            </Hidden>\r\n          ) : (\r\n              brandComponent\r\n            )}\r\n        </div>\r\n        <Hidden smDown implementation=\"css\">\r\n          {rightLinks}\r\n        </Hidden>\r\n        <Hidden mdUp>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerToggle}\r\n          >\r\n            <Menu />\r\n          </IconButton>\r\n        </Hidden>\r\n      </Toolbar>\r\n      {/* <Hidden mdUp implementation=\"js\">\r\n        <Drawer\r\n          variant=\"temporary\"\r\n          anchor={\"right\"}\r\n          open={mobileOpen}\r\n          classes={{\r\n            paper: classes.drawerPaper\r\n          }}\r\n          onClose={handleDrawerToggle}\r\n        >\r\n          <div className={classes.appResponsive}>\r\n            {leftLinks}\r\n            {rightLinks}\r\n          </div>\r\n        </Drawer>\r\n      </Hidden> */}\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nHeader.defaultProp = {\r\n  color: \"white\"\r\n};\r\n\r\nHeader.propTypes = {\r\n  color: PropTypes.oneOf([\r\n    \"primary\",\r\n    \"info\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"transparent\",\r\n    \"white\",\r\n    \"rose\",\r\n    \"dark\"\r\n  ]),\r\n  rightLinks: PropTypes.node,\r\n  leftLinks: PropTypes.node,\r\n  brand: PropTypes.string,\r\n  toolTitle: PropTypes.string,\r\n  fixed: PropTypes.bool,\r\n  absolute: PropTypes.bool,\r\n  // this will cause the sidebar to change the color from\r\n  // props.color (see above) to changeColorOnScroll.color\r\n  // when the window.pageYOffset is heigher or equal to\r\n  // changeColorOnScroll.height and then when it is smaller than\r\n  // changeColorOnScroll.height change it back to\r\n  // props.color (see above)\r\n  changeColorOnScroll: PropTypes.shape({\r\n    height: PropTypes.number.isRequired,\r\n    color: PropTypes.oneOf([\r\n      \"primary\",\r\n      \"info\",\r\n      \"success\",\r\n      \"warning\",\r\n      \"danger\",\r\n      \"transparent\",\r\n      \"white\",\r\n      \"rose\",\r\n      \"dark\"\r\n    ]).isRequired\r\n  })\r\n};\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from '@material-ui/core/Button';\r\nimport \"./HeaderStyle.css\";\r\n\r\nexport default function HeaderLinks() {\r\n  return (\r\n    <List className=\"navList\">\r\n      {/* <ListItem className=\"navListItem\">\r\n        <Button className = \"navLink\">Help</Button>\r\n      </ListItem>\r\n      <ListItem className=\"navListItem\">\r\n        <Button className = \"navLink\">Login</Button>\r\n      </ListItem> */}\r\n      <ListItem className=\"navListItem\">\r\n        <Button className = \"navLink\">Contact</Button>\r\n      </ListItem>\r\n    </List>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ProgressBar() {\r\n    return (\r\n\r\n        <div className=\"progress-container\">\r\n        </div>\r\n    );\r\n}\r\n","import {Option, Trigger, ResponseMatcher, SingleSelectQuestion, MultiSelectQuestion, AutoPlayMessage} from './index'\r\nimport {TriggerData} from './Trigger'\r\nimport { ResponsePath } from './ResponsePath';\r\n\r\nexport enum MessageType {\r\n    singleSelect,\r\n    multiSelect,\r\n    autoPlayMessage\r\n}\r\n\r\nexport interface MessageData {\r\n    type: MessageType\r\n    id: number\r\n    content: string\r\n    options: any[] // TODO CHANGE THIS BACK to OptionsData[]\r\n    triggers: TriggerData[],\r\n    defaultTrigger: TriggerData,\r\n    extraInfo?: any\r\n}\r\n\r\n// TODO: we need to figure out which ones are optional \r\nexport class Message {\r\n    constructor(\r\n        public responseMatcher: ResponseMatcher,\r\n        private _id: number,\r\n        private _content: string, \r\n        private _options: Option[], \r\n        private _triggers: Trigger[], \r\n        private _defaultTrigger: Trigger,\r\n        private _extraInfo?: any){\r\n    }\r\n\r\n    // getters/setters\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get content() {\r\n        return this._content;\r\n    }\r\n    get options() {\r\n        return this._options;\r\n    }\r\n    get extraInfo() {\r\n        return this._extraInfo;\r\n    }\r\n    get triggers() {\r\n        return this._triggers;\r\n    }\r\n    get defaultTrigger() {\r\n        return this._defaultTrigger;\r\n    }\r\n    \r\n\r\n    public findTrigger(responsePath: ResponsePath): Trigger {\r\n        for (let trigger of this.triggers) {\r\n            let triggerExpectedResponses = trigger.expectedResponses;\r\n            let isMatch: boolean = this.responseMatcher.matchOptions(triggerExpectedResponses, responsePath);\r\n            if(isMatch){\r\n                return trigger // this is a matching trigger.\r\n            }\r\n        } \r\n        return this.defaultTrigger;\r\n    }\r\n}","import React from \"react\";\r\nimport botAvator from \"../../../Assets/img/botavator.svg\"\r\n\r\nexport default function ChatbotMessage(props: any) {\r\n    return (\r\n        <div className=\"chat-block bot\">\r\n            <div className=\"chat-avatar\">\r\n                <img src={botAvator} alt=\"chatbot avator\" />\r\n            </div>\r\n            <div className=\"bubble white round\">{props.content}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","export class Option {\r\n    constructor(private _id: number,\r\n        private _label: string) {\r\n    }\r\n\r\n    get id(){\r\n        return this._id\r\n    }\r\n\r\n    get label(){\r\n        return this._label\r\n    }\r\n}\r\n\r\nexport interface OptionData {\r\n    id: number\r\n    label: string;\r\n}\r\n\r\nexport class OptionFactory {\r\n    static createOptionsFromData (optionDatas: OptionData[]) {\r\n        let options: Option[] = [];\r\n        optionDatas.forEach(data => {\r\n            let { id, label} = data;\r\n            options.push(new Option(id, label));\r\n        });\r\n        return options;\r\n    }\r\n}\r\n\r\n","import { Interface } from \"readline\";\r\n\r\n// ResponseItem: single item in responsePath\r\nexport class ResponseItem {\r\n    constructor(private _messageId: number, \r\n                private _optionIds: number[]){ // store all selected option ids of a message\r\n                }\r\n    // getters/setters\r\n    get messageId() {\r\n        return this._messageId;\r\n    }\r\n    get optionIds() {\r\n        return this._optionIds;\r\n    }\r\n    public findResponseOption(optionId: number):boolean {\r\n        if (this.optionIds.indexOf(optionId) >= 0) {\r\n            return true; // find matched optionid\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public addResponseItem(item: any){\r\n\r\n    }\r\n}\r\n\r\nexport interface ResponseItemData {\r\n    messageId: number;\r\n    optionIds: number[]\r\n}\r\n\r\nexport class ResponseItemFactory {\r\n    static createResponseItemFromData (responseItemData: ResponseItemData) {\r\n        let {messageId, optionIds} = responseItemData;\r\n        return new ResponseItem(messageId, optionIds);\r\n    }\r\n}","import { ResponseItem, ResponseItemData, ResponseItemFactory } from \"./ResponseItem\";\r\n\r\nexport class Trigger{ \r\n    constructor(\r\n        private _expectedResponses: ResponseItem, // NOTE: to extend question group, may need change this to an array\r\n        private _action: any,\r\n        private _resultReport: string,\r\n        private _todo?: any[],\r\n        private _reminder?: any[],\r\n        private _reply?: string){\r\n        }\r\n\r\n    // getters/setters\r\n    get expectedResponses() {\r\n        return this._expectedResponses;\r\n    }\r\n\r\n    get reply() {\r\n        return this._reply;\r\n    }\r\n\r\n    get action() {\r\n        return this._action;\r\n    }\r\n\r\n    get resultReport() {\r\n        return this._resultReport;\r\n    }\r\n\r\n    get todo() {\r\n        return this._todo;\r\n    }\r\n\r\n    get reminder() {\r\n        return this._reminder;\r\n    }\r\n}\r\n\r\nexport interface TriggerData {\r\n    expectedResponses: ResponseItemData,\r\n    action: any,\r\n    resultReport: string,\r\n    todo?: any,\r\n    reminder?: any,\r\n    reply?: string\r\n}\r\n\r\nexport class TriggerFactory{\r\n    // create an array of triggers\r\n    static createTriggersFromData(triggerDatas: TriggerData[]){\r\n        let triggers: Trigger[] = [];\r\n        triggerDatas.forEach(data => {\r\n            let {action, resultReport, todo, reminder, reply } = data;\r\n            let expectedResponses:ResponseItem = ResponseItemFactory.createResponseItemFromData(data.expectedResponses);\r\n            triggers.push(new Trigger(expectedResponses, action, resultReport, todo, reminder, reply));\r\n        });\r\n        return triggers;\r\n    }\r\n    // create a single default trigger\r\n    static createTriggerFromData(triggerData: TriggerData) {\r\n        let { action, resultReport, todo, reminder, reply } = triggerData;\r\n        let expectedResponses:ResponseItem = ResponseItemFactory.createResponseItemFromData(triggerData.expectedResponses);\r\n        return new Trigger(expectedResponses, action, resultReport, todo, reminder, reply);\r\n    }\r\n}\r\n","import {Message} from './Message'\r\nimport { ResponseMatcher } from './ResponseMatcher'\r\nimport {Option} from './Option'\r\nimport {Trigger} from './Trigger'\r\n\r\nexport class SingleSelectQuestion extends Message{\r\n    constructor(\r\n        responseMatcher: ResponseMatcher,\r\n        id: number,\r\n        content: string, \r\n        options: Option[], \r\n        triggers: Trigger[], \r\n        defualtTrigger: Trigger,\r\n        extraInfo: any){\r\n            super(responseMatcher, id, content, options, triggers, defualtTrigger, extraInfo)\r\n    }\r\n}","import {Option} from './Option'\r\nimport {Trigger} from './Trigger'\r\nimport {Message} from './Message'\r\nimport { ResponseMatcher } from './ResponseMatcher'\r\n\r\nexport class MultiSelectQuestion extends Message {\r\n    constructor(\r\n        responseMatcher: ResponseMatcher,\r\n        id: number,\r\n        content: string, \r\n        options: Option[], \r\n        triggers: Trigger[], \r\n        defualtTrigger: Trigger,\r\n        extraInfo: any){\r\n            super(responseMatcher, id,content, options, triggers, defualtTrigger, extraInfo)\r\n    }\r\n}","import { ResponsePath } from \"./ResponsePath\";\r\nimport { ResponseItem } from \"./ResponseItem\";\r\n\r\nexport interface ResponseMatcher {\r\n    /*\r\n        matches the condition with the selectedOptions \r\n        trigger if one exists\r\n        * what do we do when one doesnt exist?\r\n    */\r\n    matchOptions(expectedResponse: ResponseItem, responsePath: ResponsePath): boolean;\r\n}\r\n\r\nexport class MatchFullResponse implements ResponseMatcher {\r\n    matchOptions(expectedResponse: ResponseItem, responsePath: ResponsePath): boolean {\r\n        const messageId = expectedResponse.messageId;\r\n        for (let optionId of expectedResponse.optionIds) {\r\n            let ifFoundResponse:boolean = responsePath.findMessageResponse(messageId, optionId);\r\n            if (!ifFoundResponse) { // return false if one response can't be found\r\n                return false;\r\n            }\r\n         }\r\n         // also loop through options in responsePath to make sure exact match\r\n         for (let optionId of responsePath.getMessageOptions(messageId)) {\r\n            let ifFoundResponse:boolean = expectedResponse.findResponseOption(optionId);\r\n            if (!ifFoundResponse) {\r\n                return false;\r\n            }\r\n         }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class MatchPartialResponse implements ResponseMatcher {\r\n    matchOptions(expectedResponse: ResponseItem, responsePath: ResponsePath): boolean{\r\n         const messageId = expectedResponse.messageId;\r\n         for (let optionId of expectedResponse.optionIds) {\r\n            let ifFoundResponse:boolean = responsePath.findMessageResponse(messageId, optionId);\r\n            if (ifFoundResponse) { // find at leat one expected response\r\n                return true;\r\n            }\r\n         }\r\n         return false; // failed to find any expected response\r\n    }\r\n}","import {Option} from './Option'\r\nimport {Trigger} from './Trigger'\r\nimport {Message} from './Message'\r\nimport {ResponseMatcher} from './ResponseMatcher'\r\n\r\nexport class AutoPlayMessage extends Message{\r\n    constructor(\r\n        responseMatcher: ResponseMatcher,\r\n        id: number,\r\n        content: string, \r\n        options: Option[], \r\n        triggers: Trigger[],\r\n        defualtTrigger: Trigger,\r\n        extraInfo: any){\r\n            super(responseMatcher, id, content, options, triggers, defualtTrigger, extraInfo)\r\n    }\r\n}","\r\nimport {Option, SingleSelectQuestion, MultiSelectQuestion, AutoPlayMessage, MessageType, Message, Trigger, MatchFullResponse, MatchPartialResponse} from './index'\r\nimport {MessageData} from './Message'\r\nimport {TriggerFactory} from './Trigger'\r\nimport {OptionFactory} from './Option'\r\nimport { ResponseMatcher } from './ResponseMatcher';\r\n\r\nexport class MessageFactory {\r\n    static ok(){\r\n        console.log(\"ok\");\r\n    }\r\n    static createMessageFromData(data: MessageData): Message|never {\r\n        let { id, type, content, extraInfo=null } = data \r\n        const triggers: Trigger[] = TriggerFactory.createTriggersFromData(data.triggers);\r\n        const defaultTrigger:Trigger = TriggerFactory.createTriggerFromData(data.defaultTrigger);\r\n        const options: Option[] = OptionFactory.createOptionsFromData(data.options)\r\n        if (type == MessageType.singleSelect){\r\n            const matcher: ResponseMatcher = new MatchPartialResponse();\r\n            return new SingleSelectQuestion(\r\n                matcher, id, content, options, triggers, defaultTrigger, extraInfo\r\n            )\r\n        }\r\n        else if (type == MessageType.multiSelect){\r\n            const matcher: ResponseMatcher = new MatchFullResponse();\r\n            return new MultiSelectQuestion(\r\n                matcher, id, content, options, triggers, defaultTrigger, extraInfo\r\n            )\r\n        } else if (type == MessageType.autoPlayMessage){\r\n            // Question: do we need new matcher type for auto-play message?\r\n            // since its triggers should be empty can directly return the defaultTrigger\r\n            // THINK: how to automatically display next message of an auto-display message?\r\n            const matcher: ResponseMatcher = new MatchPartialResponse();\r\n            return new AutoPlayMessage(\r\n                matcher, id, content, options, triggers, defaultTrigger, extraInfo\r\n            )\r\n        }\r\n        throw new Error();       \r\n    }\r\n}\r\n","import { ResponseItem } from \"./ResponseItem\";\r\n\r\nexport class ResponsePath {\r\n    private _responseList: ResponseItem[]\r\n    private _responseMap: { [key: number]: ResponseItem } // key is messageId\r\n\r\n    constructor() {\r\n        this._responseList = []\r\n        this._responseMap = {}\r\n    }\r\n\r\n    // getters/setters\r\n    get responseList() {\r\n        return this._responseList;\r\n    }\r\n    get responseMap() {\r\n        return this._responseMap;\r\n    }\r\n\r\n    public findMessageResponse(messageId: number, optionId: number) {\r\n        // TODO: implement this\r\n        let isFind:boolean = this.responseMap[messageId] && this.responseMap[messageId].findResponseOption(optionId) ? true : false;\r\n        return isFind;\r\n    }\r\n\r\n    public addResponseItem(responseItem: ResponseItem) {\r\n        this.responseList.push(responseItem);\r\n        this.responseMap[responseItem.messageId] = responseItem;\r\n    }\r\n\r\n    // get the optionIds of a certain massage\r\n    public getMessageOptions(messageId: number): number[]|never {\r\n        if(this.responseMap[messageId]) {\r\n            return this.responseMap[messageId].optionIds;\r\n        }\r\n        throw new Error();\r\n    }\r\n}","import React from \"react\";\r\n\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { MessageType, MultiSelectQuestion } from \"../../../model\";\r\nimport { DisplayedMessage } from './ChatbotPage'\r\n\r\n\r\n\r\nexport default function UserMessage(props: any) {\r\n    const { message, selectedOptionIds, showExtraInfo }: DisplayedMessage = props.message;\r\n    const options = message.options;\r\n    const questionId = message.id;\r\n    const extraOptionContent = message.extraInfo;\r\n    let optionItems: any = [];\r\n    let userOptionComponent: any;\r\n    if (message instanceof MultiSelectQuestion) {\r\n        optionItems = options.map((option: any) => {\r\n            return (\r\n                <ListItem className=\"nav-list-item\" id={option.id} key={option.id}>\r\n                    <Button className={selectedOptionIds.includes(option.id) ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleMultiSelectOptions(questionId, option.id)}>{option.label}</Button>\r\n                </ListItem>)\r\n        }\r\n        );\r\n        userOptionComponent = <List>\r\n            {optionItems}\r\n            {generateExtraOptionComponent()}\r\n            <ListItem className=\"nav-list-item\">\r\n                <Button className=\"nav-link\" onClick={() => props.handleMultiSelectSubmit(questionId)}>SUBMIT</Button>\r\n            </ListItem>\r\n        </List>\r\n    } else { // single select\r\n        optionItems = options.map((option: any) => {\r\n            return (<ListItem className=\"nav-list-item\" id={option.id} key={option.id}>\r\n                <Button className={selectedOptionIds.includes(option.id) ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleSelectOptions(questionId, option.id)}>{option.label}</Button>\r\n            </ListItem>)\r\n        })\r\n        userOptionComponent = (\r\n            <List>\r\n                {optionItems}\r\n                {generateExtraOptionComponent()}\r\n            </List>\r\n        )\r\n        console.log(userOptionComponent);\r\n    }\r\n\r\n    function generateExtraOptionComponent() {\r\n        return (\r\n            extraOptionContent ?\r\n                (<ListItem className=\"nav-list-item\">\r\n                    <Button className={showExtraInfo ? \"nav-link selected\" : \"nav-link\"} onClick={() => props.handleShowExtraInfo(questionId)}>{extraOptionContent.title}</Button>\r\n                </ListItem>) : null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"chat-block user\">\r\n            <div className=\"bubble round\">\r\n                {userOptionComponent}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport ChatbotMessage from './ChatbotMessage'\r\nimport UserMessage from \"./UserMessage\";\r\nimport { DisplayedMessage } from \"./ChatbotPage\";\r\n\r\nexport default function Chat(props: any) {\r\n    const messageOptions = props.displayedMessages.map((displayedMessage: DisplayedMessage, key: any) => {\r\n        const {message, showExtraInfo, selectedOptionIds, reply} = displayedMessage\r\n        if (message.content) {\r\n            return (\r\n                <div key={key}>\r\n                    <ChatbotMessage content={message.content}></ChatbotMessage>\r\n                    {message.options && message.options.length > 0 && \r\n                    <UserMessage \r\n                        message={displayedMessage} \r\n                        handleShowExtraInfo={props.handleShowExtraInfo} \r\n                        handleSelectOptions={props.handleSelectOptions}\r\n                        handleMultiSelectOptions={props.handleMultiSelectOptions}\r\n                        handleMultiSelectSubmit={props.handleMultiSelectSubmit}\r\n                        ></UserMessage>}\r\n                    {reply && (<ChatbotMessage content={reply}></ChatbotMessage>)}\r\n                    {showExtraInfo && <ChatbotMessage content={message.extraInfo.content}></ChatbotMessage>}\r\n                </div>\r\n            )\r\n        }\r\n        return null;\r\n    });\r\n\r\n    return (\r\n        <div className=\"content-container\">\r\n            <div className=\"chat-area\" id=\"chatbot-scroller\">\r\n                {messageOptions}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@material-ui/core\";\r\n\r\nexport default function ToDoSection(props: any) {\r\n    const { todoList, reminderList } = props;\r\n    return (\r\n        <div className=\"chat todo-container round grey\">\r\n            <div className=\"chat donow-container round white\">\r\n                <div className=\"donow-titile-box\">\r\n                    <div className=\"container\">\r\n                        <span>DO NOW</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-container \">\r\n                    <List>\r\n                        {todoList.map((item: any, key: any) => {\r\n                            return (<ListItem key={key}>\r\n                                <div className=\"todo-item-bullet\"/>\r\n                                <span className= \"item-label\" >{item}</span>\r\n                            </ListItem>)\r\n                        })} \r\n                    </List>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat dolater-container round white\">\r\n                <div className=\"dolater-titile-box\">\r\n                    <div className=\"container\">\r\n                        <span>DO LATER</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-container \">\r\n                    <List>\r\n                        {reminderList.map((item: any, key: any) => {\r\n                            return (<ListItem key={key}>\r\n                               <div className=\"reminder-item-bullet\"/>\r\n                                <span className= \"item-label\" >{item}</span>\r\n                            </ListItem>)\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { Item, Result } from './context';\r\nimport {Message, MessageFactory, MessageType} from '../model/index'\r\n\r\nexport interface SurveyDialogue {\r\n    [key: number]: Message\r\n}\r\n\r\nexport interface Module {\r\n    name: string,\r\n    modules?: { [key: number]: Module },\r\n    nodes?: SurveyDialogue\r\n}\r\n\r\n// COMMENTED OUT SURVEY UNTIL WE UPDATE IT\r\n\r\nexport function getSurvey(){\r\n    return generateMessages()\r\n}\r\n\r\nexport function getModules(){\r\n    const surveyDialogue = generateMessages();\r\n    return [{ name: \"Privacy Policy\", nodes: surveyDialogue }]\r\n}\r\n\r\n\r\nexport function generateMessages() {\r\n    const message0 = MessageFactory.createMessageFromData(\r\n        {\r\n            id: 0,\r\n            type: MessageType.singleSelect,\r\n            content: \"Question 0: Does your org have a privacy policy?\",\r\n            options: [\r\n                {\r\n                    id: 101,\r\n                    label: \"Yes\"\r\n                },\r\n                {\r\n                    id: 100,\r\n                    label: \"No\"\r\n                }\r\n            ],\r\n            triggers: [\r\n                {\r\n                    expectedResponses: {messageId: 0, optionIds:[100]},\r\n                    action: { // fix this\r\n                        type: \"nextQuestion\",\r\n                        nextQuestionId: 1\r\n                    },\r\n                    resultReport: \"this trigger runs when you press no\",\r\n                    todo: \"todo item 1\",\r\n                    reminder: \"reminder item 1\"\r\n                },\r\n            ],\r\n            defaultTrigger: {\r\n                expectedResponses: {messageId: 0, optionIds:[101]},\r\n                    action: { // fix this\r\n                        type: \"nextQuestion\",\r\n                        nextQuestionId: 1\r\n                    },\r\n                    resultReport: \"this is the default trigger. it runs when you click yes\",\r\n                    reply: \"good job!\",\r\n                    todo: \"todo item 1\",\r\n                    reminder: \"reminder item 1\"\r\n            },\r\n            extraInfo: {\r\n                title: \"What is a privacy policy?\",\r\n                content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\r\n                    \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\r\n            }\r\n        }\r\n    );\r\n\r\n    const message1 = MessageFactory.createMessageFromData(\r\n        {\r\n            id: 1,\r\n            type: MessageType.multiSelect,\r\n            content: \"Question 1: Does your org have a privacy policy? Selesct all that apply\",\r\n            options: [\r\n                {\r\n                    id: 101,\r\n                    label: \"Yes\"\r\n                },\r\n                {\r\n                    id: 100,\r\n                    label: \"No\"\r\n                },\r\n                {\r\n                    id: 102,\r\n                    label: \"maybe\"\r\n                }\r\n            ],\r\n            triggers: [\r\n                {\r\n                    expectedResponses: {messageId: 1, optionIds:[100, 100]},\r\n                    action: { // fix this\r\n                        type: \"nextQuestion\",\r\n                        nextQuestionId: 0\r\n                    },\r\n                    resultReport: \"multiselect that goes to q 0\",\r\n                    todo: \"todo item 1\",\r\n                    reminder: \"reminder item 1\"\r\n                },\r\n            ],\r\n            defaultTrigger: {\r\n                expectedResponses: {messageId: 1, optionIds:[101, 102]},\r\n                    action: { // fix this\r\n                        type: \"nextQuestion\",\r\n                        nextQuestionId: 2\r\n                    },\r\n                    resultReport: \"multiselect that goes to q2.\",\r\n                    reply: \"good job!\"\r\n            },\r\n        }\r\n    );\r\n\r\n    const message2 = MessageFactory.createMessageFromData(\r\n        {\r\n            id: 2,\r\n            type: MessageType.singleSelect,\r\n            content: \"Question 2: Does your org have a privacy policy?\",\r\n            options: [\r\n                {\r\n                    id: 101,\r\n                    label: \"Yes\"\r\n                },\r\n                {\r\n                    id: 100,\r\n                    label: \"No\"\r\n                }\r\n            ],\r\n            triggers: [\r\n                {\r\n                    expectedResponses: {messageId: 2, optionIds:[100]},\r\n                    action: { // fix this\r\n                        type: \"nextQuestion\",\r\n                        nextQuestionId: 1\r\n                    },\r\n                    resultReport: \"some result report.\",\r\n                    todo: \"todo item 1\",\r\n                    reminder: \"reminder item 1\"\r\n                },\r\n            ],\r\n            defaultTrigger: {\r\n                expectedResponses: {messageId: 2, optionIds:[101]},\r\n                    action: { // fix this\r\n                        type: \"nextQuestion\",\r\n                        nextQuestionId: 0\r\n                    },\r\n                    resultReport: \"some result report.\",\r\n                    reply: \"good job!\"\r\n            },\r\n            extraInfo: {\r\n                title: \"What is a privacy policy?\",\r\n                content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\r\n                    \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\r\n            }\r\n        }\r\n    );\r\n    return [message0, message1, message2]\r\n\r\n}\r\n\r\n// function getSurvey() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[1] = MessageFactory.createMessageFromData(\r\n//         {\r\n//             id: 1,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your org have a privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 101,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 100,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 101 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 101, repo: \"some repo on quetion 1 Yes\" },\r\n//                     nextQuestionId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 100 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 100, repo: \"some repo on quetion 1 No\" },\r\n//                     todos: [{ title: \"Todo Item 1\" }],\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"What is a privacy policy?\",\r\n//                 content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\r\n//                     \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     // questionId = 2 belongs to another submodule, so it's not included in here\r\n//     survey[3] = createNode(\r\n//         {\r\n//             id: 3,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who is covered in your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 300,\r\n//                     label: \"All\"\r\n//                 },\r\n//                 {\r\n//                     id: 301,\r\n//                     label: \"Not All\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 300 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 3, optionId: 300, repo: \"some repo on quetion 3 No\" },\r\n//                     nextQuestionId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 301 }\r\n//                     ],\r\n//                     result: { questionId: 3, optionId: 301, repo: \"some repo on quetion 3 Yes\" },\r\n//                     todos: [{ title: \"Todo Item 2\" }],\r\n//                     nextQuestionId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[4] = createNode(\r\n//         {\r\n//             id: 4,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org operates website?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 401 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 401, repo: \"some repo on quetion 4 Yes\" },\r\n//                     nextQuestionId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 400 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 400, repo: \"some repo on quetion 4 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[5] = createNode(\r\n//         {\r\n//             id: 5,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org uses social media?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 501 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 501, repo: \"some repo on quetion 5 Yes\" },\r\n//                     nextQuestionId: 8\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 500 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 500, repo: \"some repo on quetion 5 No\" },\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[6] = createNode(\r\n//         {\r\n//             id: 6,\r\n//             type: NodeTypes.single,\r\n//             content: \"Collect data for analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 601,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 600,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 601 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 601, repo: \"some repo on quetion 6 Yes\" },\r\n//                     nextQuestionId: 9\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 600 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 600, repo: \"some repo on quetion 6 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT ARE DATA ANALYTICS?\",\r\n//                 content: \"Data analytics refers to tracking website usage for reporting and evaluating purposes. \" +\r\n//                     \"Google Analytics is a common example of a data analytics service.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[7] = createNode(\r\n//         {\r\n//             id: 7,\r\n//             type: NodeTypes.single,\r\n//             content: \"List of people trained on privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 700,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 701 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 7, optionId: 701, repo: \"some repo on quetion 7 Yes\" },\r\n//                     nextQuestionId: 2\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 700 }\r\n//                     ],\r\n//                     result: { questionId: 7, optionId: 700, repo: \"some repo on quetion 7 No\" },\r\n//                     todos: [{ title: \"Todo Item 5\" }],\r\n//                     nextQuestionId: 2\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[8] = createNode(\r\n//         {\r\n//             id: 8,\r\n//             type: NodeTypes.single,\r\n//             content: \"Reviewed social media terms?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 801,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 800,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 801 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 8, optionId: 801, repo: \"some repo on quetion 8 Yes\" },\r\n//                     nextQuestionId: 7\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 800 }\r\n//                     ],\r\n//                     result: { questionId: 8, optionId: 800, repo: \"some repo on quetion 8 No\" },\r\n//                     todos: [{ title: \"Todo Item 4\" }],\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS THIS?\",\r\n//                 content: \"Terms and conditions are the agreement between a service and the service user. \" +\r\n//                     \"This is the legal text that we agree to before using a service and it can often be \" +\r\n//                     \"accessed by a link on the bottom of a website or within the settings.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[9] = createNode(\r\n//         {\r\n//             id: 9,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy describe the collection of analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 901,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 900,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 901 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 9, optionId: 901, repo: \"some repo on quetion 9 Yes\" },\r\n//                     nextQuestionId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 900 }\r\n//                     ],\r\n//                     result: { questionId: 9, optionId: 900, repo: \"some repo on quetion 9 No\" },\r\n//                     todos: [{ title: \"Todo Item 3\" }],\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n\r\n\r\n\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part1() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[1] = createNode(\r\n//         {\r\n//             id: 1,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your org have a privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 101,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 100,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 101 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 101, repo: \"some repo on quetion 1 Yes\" },\r\n//                     nextQuestionId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 1, optionId: 100 }\r\n//                     ],\r\n//                     result: { questionId: 1, optionId: 100, repo: \"some repo on quetion 1 No\" },\r\n//                     todos: [{ title: \"Todo Item 1\" }],\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"What is a privacy policy?\",\r\n//                 content: \"A privacy policy is a document which describes whose personal information we are collecting: \" +\r\n//                     \"why we are collecting it, what we use it for, how and when we have to disclose it, and how a person can review what we are doing.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     // questionId = 2 belongs to another submodule, so it's not included in here\r\n//     survey[3] = createNode(\r\n//         {\r\n//             id: 3,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who is covered in your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 300,\r\n//                     label: \"All\"\r\n//                 },\r\n//                 {\r\n//                     id: 301,\r\n//                     label: \"Not All\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 300 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 3, optionId: 300, repo: \"some repo on quetion 3 No\" },\r\n//                     nextQuestionId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 3, optionId: 301 }\r\n//                     ],\r\n//                     result: { questionId: 3, optionId: 301, repo: \"some repo on quetion 3 Yes\" },\r\n//                     reminders: [{ title: \"Todo Item 2\" }],\r\n//                     nextQuestionId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[4] = createNode(\r\n//         {\r\n//             id: 4,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org operates website?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 401 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 401, repo: \"some repo on quetion 4 Yes\" },\r\n//                     nextQuestionId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 4, optionId: 400 }\r\n//                     ],\r\n//                     result: { questionId: 4, optionId: 400, repo: \"some repo on quetion 4 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[5] = createNode(\r\n//         {\r\n//             id: 5,\r\n//             type: NodeTypes.single,\r\n//             content: \"Org uses social media?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 501 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 501, repo: \"some repo on quetion 5 Yes\" },\r\n//                     nextQuestionId: 8\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 5, optionId: 500 }\r\n//                     ],\r\n//                     result: { questionId: 5, optionId: 500, repo: \"some repo on quetion 5 No\" },\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[6] = createNode(\r\n//         {\r\n//             id: 6,\r\n//             type: NodeTypes.single,\r\n//             content: \"Collect data for analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 601,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 600,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 601 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 601, repo: \"some repo on quetion 6 Yes\" },\r\n//                     nextQuestionId: 9\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 6, optionId: 600 }\r\n//                     ],\r\n//                     result: { questionId: 6, optionId: 600, repo: \"some repo on quetion 6 No\" },\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT ARE DATA ANALYTICS?\",\r\n//                 content: \"Data analytics refers to tracking website usage for reporting and evaluating purposes. \" +\r\n//                     \"Google Analytics is a common example of a data analytics service.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[7] = createNode(\r\n//         {\r\n//             id: 7,\r\n//             type: NodeTypes.single,\r\n//             content: \"List of people trained on privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 700,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 701 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 7, optionId: 701, repo: \"some repo on quetion 7 Yes\" },\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 7, optionId: 700 }\r\n//                     ],\r\n//                     result: { questionId: 7, optionId: 700, repo: \"some repo on quetion 7 No\" },\r\n//                     reminders: [{ title: \"Todo Item 5\" }],\r\n//                     nextQuestionId: 2,\r\n//                     nextModuleId: 2\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[8] = createNode(\r\n//         {\r\n//             id: 8,\r\n//             type: NodeTypes.single,\r\n//             content: \"Reviewed social media terms?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 801,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 800,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 801 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 8, optionId: 801, repo: \"some repo on quetion 8 Yes\" },\r\n//                     nextQuestionId: 7\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 8, optionId: 800 }\r\n//                     ],\r\n//                     result: { questionId: 8, optionId: 800, repo: \"some repo on quetion 8 No\" },\r\n//                     reminders: [{ title: \"Todo Item 4\" }],\r\n//                     nextQuestionId: 7\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS THIS?\",\r\n//                 content: \"Terms and conditions are the agreement between a service and the service user. \" +\r\n//                     \"This is the legal text that we agree to before using a service and it can often be \" +\r\n//                     \"accessed by a link on the bottom of a website or within the settings.\"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[9] = createNode(\r\n//         {\r\n//             id: 9,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy describe the collection of analytics?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 901,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 900,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 901 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 9, optionId: 901, repo: \"some repo on quetion 9 Yes\" },\r\n//                     nextQuestionId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 9, optionId: 900 }\r\n//                     ],\r\n//                     result: { questionId: 9, optionId: 900, repo: \"some repo on quetion 9 No\" },\r\n//                     reminders: [{ title: \"Todo Item 3\" }],\r\n//                     nextQuestionId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n\r\n\r\n\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part2() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[2] = createNode(\r\n//         {\r\n//             id: 2,\r\n//             type: NodeTypes.message,\r\n//             content: \"Explain what is personal info and what isn’t\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 10\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[10] = createNode(\r\n//         {\r\n//             id: 10,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your org collect personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1001,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1000,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 10, optionId: 1001 }\r\n//                     ],\r\n//                     result: { questionId: 10, optionId: 1001, repo: \"some repo on question 10 Yes\" },\r\n//                     nextQuestionId: 12\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 10, optionId: 1000 }\r\n//                     ],\r\n//                     result: { questionId: 10, optionId: 1000, repo: \"some repo on question 10 No\" },\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[12] = createNode(\r\n//         {\r\n//             id: 12,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you explain what the P.I. will be used for?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1201,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1200,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 12, optionId: 1201 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 12, optionId: 1201, repo: \"some repo on question 12 Yes\" },\r\n//                     nextQuestionId: 13\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 12, optionId: 1200 }\r\n//                     ],\r\n//                     todos: [{ title: \"Todo Item 6\" }],\r\n//                     result: { questionId: 12, optionId: 1200, repo: \"some repo on question 12 No\" },\r\n//                     nextQuestionId: 13\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[13] = createNode(\r\n//         {\r\n//             id: 13,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you obtain consent from the person?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1301,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1300,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 13, optionId: 1301 }\r\n//                     ],\r\n//                     result: { questionId: 13, optionId: 1301, repo: \"some repo on question 13 Yes\" },\r\n//                     nextQuestionId: 15\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 13, optionId: 1300 }\r\n//                     ],\r\n//                     result: { questionId: 13, optionId: 1300, repo: \"some repo on question 13 No\" },\r\n//                     nextQuestionId: 14\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[14] = createNode(\r\n//         {\r\n//             id: 14,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Our information is collected .. Select all that apply.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 14, optionId: 1401 }\r\n//                     ],\r\n//                     result: { questionId: 14, optionId: 1401, repo: \"some repo on question 14 Yes\" },\r\n//                     nextQuestionId: 17\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 14, optionId: 1400 }\r\n//                     ],\r\n//                     result: { questionId: 14, optionId: 1400, repo: \"some repo on question 14 No\" },\r\n//                     nextQuestionId: 16\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[15] = createNode(\r\n//         {\r\n//             id: 15,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Do you use a consent form?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 15, optionId: 1501 }\r\n//                     ],\r\n//                     response: [\"Good Job.\"],\r\n//                     result: { questionId: 15, optionId: 1501, repo: \"some repo on question 15 Yes\" },\r\n//                     nextQuestionId: 14\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 15, optionId: 1500 }\r\n//                     ],\r\n//                     reminders: [{ title: \"Todo Item 7\" }],\r\n//                     result: { questionId: 15, optionId: 1500, repo: \"some repo on question 15 No\" },\r\n//                     nextQuestionId: 16\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[16] = createNode(\r\n//         {\r\n//             id: 16,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the person an employee of the org?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1601,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1600,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 16, optionId: 1601 }\r\n//                     ],\r\n//                     result: { questionId: 16, optionId: 1601, repo: \"some repo on question 16 Yes\" },\r\n//                     nextQuestionId: 18\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 16, optionId: 1600 }\r\n//                     ],\r\n//                     result: { questionId: 16, optionId: 1600, repo: \"some repo on question 16 No\" },\r\n//                     todos: [{ title: \"Todo Item 8\" }],\r\n//                     nextQuestionId: 17\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[17] = createNode(\r\n//         {\r\n//             id: 17,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does the P.I you collect help fufill the orgs mission/purpose?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1700,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 17, optionId: 1701 }\r\n//                     ],\r\n//                     result: { questionId: 17, optionId: 1701, repo: \"some repo on question 17 Yes\" },\r\n//                     nextQuestionId: 20\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 17, optionId: 1700 }\r\n//                     ],\r\n//                     result: { questionId: 17, optionId: 1700, repo: \"some repo on question 17 No\" },\r\n//                     nextQuestionId: 20\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"I NEED MORE INFORMATION\",\r\n//                 content: \"Information collected should be related to the society’s purpose/goals. \" +\r\n//                     \"For example, “we are a theatre company and collect information from our subscribers to sell tickets.”\"\r\n//             },\r\n//         }\r\n//     )\r\n//     survey[18] = createNode(\r\n//         {\r\n//             id: 18,\r\n//             type: NodeTypes.single,\r\n//             content: \"Select reasons for collecting employee information. Select one.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1800,\r\n//                     label: \"Establish employment\"\r\n//                 },\r\n//                 {\r\n//                     id: 1801,\r\n//                     label: \"Manage employment\"\r\n//                 },\r\n//                 {\r\n//                     id: 1802,\r\n//                     label: \"Terminate employment\"\r\n//                 },\r\n//                 {\r\n//                     id: 1803,\r\n//                     label: \"Other reasons\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 18, optionId: 1803 }\r\n//                     ],\r\n//                     result: { questionId: 18, optionId: 1803, repo: \"some repo on question 18 other reasons\" },\r\n//                     todos: [{ title: \"Todo Item 8\" }],\r\n//                     nextQuestionId: 17\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 18, optionId: 1800, repo: \"some repo on question 18\" },\r\n//                     nextQuestionId: 19\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[19] = createNode(\r\n//         {\r\n//             id: 19,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you let these employees know ahead of time?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 1901,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 1900,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 19, optionId: 1900 }\r\n//                     ],\r\n//                     result: { questionId: 19, optionId: 1900, repo: \"some repo on question 19 N0\" },\r\n//                     todos: [{ title: \"Todo Item 9\" }],\r\n//                     nextQuestionId: 17\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 19, optionId: 1901 }\r\n//                     ],\r\n//                     response: [\"Good Job\"],\r\n//                     result: { questionId: 18, optionId: 1800, repo: \"some repo on question 19 Yes\" },\r\n//                     nextQuestionId: 17\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[20] = createNode(\r\n//         {\r\n//             id: 20,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Select the reasons you collect personal information. Select all that apply.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2000,\r\n//                     label: \"To communicate with members\"\r\n//                 },\r\n//                 {\r\n//                     id: 2001,\r\n//                     label: \"To send newsletters and invitations\"\r\n//                 },\r\n//                 {\r\n//                     id: 2002,\r\n//                     label: \"For service phone calls and emails\"\r\n//                 },\r\n//                 {\r\n//                     id: 2003,\r\n//                     label: \"For audit purposes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2004,\r\n//                     label: \"To solicit donations\"\r\n//                 },\r\n//                 {\r\n//                     id: 2005,\r\n//                     label: \"To issue tax receipts\"\r\n//                 },\r\n//                 {\r\n//                     id: 2006,\r\n//                     label: \"Other reasons\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 20, optionId: 2006 }\r\n//                     ],\r\n//                     result: { questionId: 20, optionId: 2006, repo: \"some repo on question 20 Other reasons\" },\r\n//                     response: [\"Your use of personal information could be problematic. Check the “Permissions for Personal Information” at the end of the assessment to learn more.\"],\r\n//                     todos: [{title: \"Todo Item 10\"}],\r\n//                     nextQuestionId: 21\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     response: [\"Great - these are all permissible uses of personal information!\"],\r\n//                     result: { questionId: 20, optionId: 2000, repo: \"some repo on question 20\" },\r\n//                     nextQuestionId: 21\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[21] = createNode(\r\n//         {\r\n//             id: 21,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your organization give out personal information either within or outside the organization?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2101,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2100,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 21, optionId: 2100 }\r\n//                     ],\r\n//                     result: { questionId: 21, optionId: 2100, repo: \"some repo on question 21 No\" },\r\n//                     nextQuestionId: 28\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 21, optionId: 2101 }\r\n//                     ],\r\n//                     result: { questionId: 21, optionId: 2101, repo: \"some repo on question 21 Yes\" },\r\n//                     nextQuestionId: 22\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[22] = createNode(\r\n//         {\r\n//             id: 22,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you get explicit consent from people before giving out their personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2201,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2200,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 22, optionId: 2200 }\r\n//                     ],\r\n//                     result: { questionId: 22, optionId: 2200, repo: \"some repo on question 22 No\" },\r\n//                     nextQuestionId: 23\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 22, optionId: 2201 }\r\n//                     ],\r\n//                     response: [\"Great!\"],\r\n//                     result: { questionId: 22, optionId: 2201, repo: \"some repo on question 22 Yes\" },\r\n//                     nextQuestionId: 24\r\n//                 }\r\n//             ],\r\n//             extraInfo: {title: \"WHAT IS EXPLICIT CONSENT?\", content: \"For example, this could include...\"}\r\n//         }\r\n//     )\r\n//     survey[23] = createNode(\r\n//         {\r\n//             id: 23,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the purpose for collecting personal information obvious?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2301,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2300,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 23, optionId: 2300 }\r\n//                     ],\r\n//                     result: { questionId: 23, optionId: 2300, repo: \"some repo on question 23 No\" },\r\n//                     todos: [{title: \"Todo Item 11\"}],\r\n//                     nextQuestionId: 25\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 23, optionId: 2301 }\r\n//                     ],\r\n//                     result: { questionId: 23, optionId: 2301, repo: \"some repo on question 23 Yes\" },\r\n//                     nextQuestionId: 25\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[24] = createNode(\r\n//         {\r\n//             id: 24,\r\n//             type: NodeTypes.single,\r\n//             content: \"Have you been required to provide personal information due to a court order or subpoena?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2401,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2400,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 24, optionId: 2400 }\r\n//                     ],\r\n//                     result: { questionId: 24, optionId: 2400, repo: \"some repo on question 24 No\" },\r\n//                     nextQuestionId: 26\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 24, optionId: 2401 }\r\n//                     ],\r\n//                     result: { questionId: 24, optionId: 2401, repo: \"some repo on question 24 Yes\" },\r\n//                     nextQuestionId: 27\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[25] = createNode(\r\n//         {\r\n//             id: 25,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do these people voluntarily provide their personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2501,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2500,\r\n//                     label: \"No\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 25, optionId: 2500 }\r\n//                     ],\r\n//                     result: { questionId: 25, optionId: 2500, repo: \"some repo on question 25 No\" },\r\n//                     todos: [{title: \"Todo Item 12\"}],\r\n//                     nextQuestionId: 24\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 25, optionId: 2501 }\r\n//                     ],\r\n//                     response: [\"Good job!\"],\r\n//                     result: { questionId: 25, optionId: 2501, repo: \"some repo on question 25 Yes\" },\r\n//                     nextQuestionId: 24\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[26] = createNode(\r\n//         {\r\n//             id: 26,\r\n//             type: NodeTypes.multi,\r\n//             content: \"Select all the reasons you disclose personal information internally, including information from a Members Register. (Multiple choice, select all that apply).\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2600,\r\n//                     label: \"To register/call a general meeting\"\r\n//                 },\r\n//                 {\r\n//                     id: 2601,\r\n//                     label: \"To submit a member proposal\"\r\n//                 },\r\n//                 {\r\n//                     id: 2602,\r\n//                     label: \"To influence the voting of members\"\r\n//                 },\r\n//                 {\r\n//                     id: 2603,\r\n//                     label: \"Other reasons\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 26, optionId: 2603 }\r\n//                     ],\r\n//                     result: { questionId: 26, optionId: 2603, repo: \"some repo on question 27 Other reasons\" },\r\n//                     todos: [{title: \"Todo Item 14\"}],\r\n//                     nextQuestionId: 28\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     response: [\"Great!\"],\r\n//                     result: { questionId: 26, optionId: 2601, repo: \"some repo on question 26\" },\r\n//                     nextQuestionId: 28\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[27] = createNode(\r\n//         {\r\n//             id: 27,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy explain that you may disclose personal information for legal reasons?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2701,\r\n//                     label: \"Yes\"\r\n//                 },\r\n//                 {\r\n//                     id: 2700,\r\n//                     label: \"No\"\r\n//                 },\r\n//                 {\r\n//                     id: 2702,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 27, optionId: 2700 }\r\n//                     ],\r\n//                     result: { questionId: 27, optionId: 2700, repo: \"some repo on question 27 No\" },\r\n//                     response: [\"Got it, adding this to your to-do list!\"],\r\n//                     reminders: [{title: \"Todo Item 13\"}],\r\n//                     nextQuestionId: 26\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 27, optionId: 2701 }\r\n//                     ],\r\n//                     result: { questionId: 27, optionId: 2701, repo: \"some repo on question 27 Yes\" },\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 26\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 27, optionId: 2702 }\r\n//                     ],\r\n//                     response: [\"Okay, be sure to add this information to your privacy policy once you create it!\"],\r\n//                     reminders: [{title: \"Todo Item 13\"}],\r\n//                     result: { questionId: 27, optionId: 2702, repo: \"some repo on question 27 No PP\" },\r\n//                     nextQuestionId: 26\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[28] = createNode(\r\n//         {\r\n//             id: 28,\r\n//             type: NodeTypes.single,\r\n//             content: \"Let’s talk about storing personal information! Select everyone who can access personal information.\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2800,\r\n//                     label: \"All employees\"\r\n//                 },\r\n//                 {\r\n//                     id: 2801,\r\n//                     label: \"All employees and volunteers\"\r\n//                 },\r\n//                 {\r\n//                     id: 2802,\r\n//                     label: \"A small number of authorized individuals\"\r\n//                 },\r\n//                 {\r\n//                     id: 2803,\r\n//                     label: \"No one\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2800 }\r\n//                     ],\r\n//                     result: { questionId: 28, optionId: 2800, repo: \"some repo on question 28 All\" },\r\n//                     response: [\"Okay for small organizations. If you are a larger organization, you will want to reduce access to only a few individuals.\"],\r\n//                     nextQuestionId: 29\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2801 }\r\n//                     ],\r\n//                     result: { questionId: 28, optionId: 2801, repo: \"some repo on question 28 small\" },\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 29\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2802 }\r\n//                     ],\r\n//                     response: [\"Let’s change the access to a few designated individuals!\"],\r\n//                     todos: [{title: \"Todo Item 15\"}],\r\n//                     result: { questionId: 28, optionId: 2802, repo: \"some repo on question 28 volunteers\" },\r\n//                     nextQuestionId: 29\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 28, optionId: 2803 }\r\n//                     ],\r\n//                     response: [\"Let’s change the access to a few designated individuals!\"],\r\n//                     todos: [{title: \"Todo Item 15\"}],\r\n//                     result: { questionId: 28, optionId: 2803, repo: \"some repo on question 28 no one\" },\r\n//                     nextQuestionId: 29\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[29] = createNode(\r\n//         {\r\n//             id: 29,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you have policies and procedures to keep personal information secure?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 2901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 2900,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 29, optionId: 2900 }\r\n//                     ],\r\n//                     result: { questionId: 29, optionId: 2900, repo: \"some repo on question 29 No\" },\r\n//                     reminders: [{title: \"Todo Item 16\"}],\r\n//                     response: [\"Be sure to keep personal information secure! Check your results at the end of the module to find more tips on securing personal information.\"],\r\n//                     nextQuestionId: 30\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 29, optionId: 2901 }\r\n//                     ],\r\n//                     result: { questionId: 29, optionId: 2901, repo: \"some repo on question 29 Yes\" },\r\n//                     response: [\"Good for you!\"],\r\n//                     nextQuestionId: 30\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[30] = createNode(\r\n//         {\r\n//             id: 30,\r\n//             type: NodeTypes.single,\r\n//             content: \"Where do you store personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3000,\r\n//                     label: \"ON PAPER\"\r\n//                 },\r\n//                 {\r\n//                     id: 3001,\r\n//                     label: \"ON THE COMPUTER\"\r\n//                 },\r\n//                 {\r\n//                     id: 3002,\r\n//                     label: \"ON THE COMPUTER AND ON PAPER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 30, optionId: 3000 }\r\n//                     ],\r\n//                     result: { questionId: 30, optionId: 3000, repo: \"some repo on question 30 paper\" },\r\n//                     nextQuestionId: 33\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 30, optionId: 3001 }\r\n//                     ],\r\n//                     result: { questionId: 30, optionId: 3001, repo: \"some repo on question 30 paper/digital\" },\r\n//                     nextQuestionId: 31\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 30, optionId: 3002 }\r\n//                     ],\r\n//                     result: { questionId: 30, optionId: 3002, repo: \"some repo on question 30 digital\" },\r\n//                     nextQuestionId: 32\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[31] = createNode(\r\n//         {\r\n//             id: 31,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you keep your sensitive data encrypted?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3101,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3100,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 31, optionId: 3100 }\r\n//                     ],\r\n//                     result: { questionId: 31, optionId: 3100, repo: \"some repo on question 31 No\" },\r\n//                     response: [\"This is a great way to keep data secure, added to your list\"],\r\n//                     reminders: [{title: \"Todo Item 18\"}],\r\n//                     nextQuestionId: 34\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 31, optionId: 3101 }\r\n//                     ],\r\n//                     result: { questionId: 31, optionId: 3101, repo: \"some repo on question 31 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 34\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[32] = createNode(\r\n//         {\r\n//             id: 32,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you keep your paper documents in a locked cabinet?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3201,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3200,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 32, optionId: 3200 }\r\n//                     ],\r\n//                     result: { questionId: 32, optionId: 3200, repo: \"some repo on question 32 No\" },\r\n//                     response: [\"Lock those documents up!\"],\r\n//                     todos: [{title: \"Todo Item 17\"}],\r\n//                     nextQuestionId: 31\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 32, optionId: 3201 }\r\n//                     ],\r\n//                     result: { questionId: 32, optionId: 3201, repo: \"some repo on question 32 Yes\" },\r\n//                     response: [\"Good job!\"],\r\n//                     nextQuestionId: 31\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[33] = createNode(\r\n//         {\r\n//             id: 33,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you keep your paper documents in a locked cabinet?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3301,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3300,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 33, optionId: 3300 }\r\n//                     ],\r\n//                     result: { questionId: 33, optionId: 3300, repo: \"some repo on question 33 No\" },\r\n//                     response: [\"Lock those documents up!\"],\r\n//                     todos: [{title: \"Todo Item 17\"}],\r\n//                     nextQuestionId: 39\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 33, optionId: 3301 }\r\n//                     ],\r\n//                     result: { questionId: 33, optionId: 3301, repo: \"some repo on question 33 Yes\" },\r\n//                     response: [\"Good job!\"],\r\n//                     nextQuestionId: 39\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[34] = createNode(\r\n//         {\r\n//             id: 34,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is your digital content password protected?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3401,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3400,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 34, optionId: 3400 }\r\n//                     ],\r\n//                     result: { questionId: 34, optionId: 3400, repo: \"some repo on question 34 No\" },\r\n//                     response: [\"Always use passwords to keep your digital content secure.\"],\r\n//                     todos: [{title: \"Todo Item 19\"}],\r\n//                     nextQuestionId: 36\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 34, optionId: 3401 }\r\n//                     ],\r\n//                     result: { questionId: 34, optionId: 3401, repo: \"some repo on question 34 Yes\" },\r\n//                     nextQuestionId: 35\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[35] = createNode(\r\n//         {\r\n//             id: 35,\r\n//             type: NodeTypes.single,\r\n//             content: \"How often do you change your passwords?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3500,\r\n//                     label: \"0-6 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3501,\r\n//                     label: \"6-12 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3502,\r\n//                     label: \"OVER A YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 3503,\r\n//                     label: \"NEVER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 35, optionId: 3500 }\r\n//                     ],\r\n//                     result: { questionId: 35, optionId: 3500, repo: \"some repo on question 35 0-6\" },\r\n//                     response: [\"Awesome, keep it up!\"],\r\n//                     nextQuestionId: 36\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 35, optionId: 3501 }\r\n//                     ],\r\n//                     result: { questionId: 35, optionId: 3501, repo: \"some repo on question 35 6-12\" },\r\n//                     response: [\"Pretty good, try changing your passwords every 6 months.\"],\r\n//                     nextQuestionId: 36\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 35, optionId: 3502, repo: \"some repo on question 35 over 1 year\" },\r\n//                     response: [\"Change passwords every 6 months to keep your digital content secure.\"],\r\n//                     reminders: [{title: \"Todo Item 20\"}],\r\n//                     nextQuestionId: 36\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[36] = createNode(\r\n//         {\r\n//             id: 36,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you collect Digitally Created Personal Information (D.C.P.I.), such as information from website traffic?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3601,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3600,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 36, optionId: 3600 }\r\n//                     ],\r\n//                     result: { questionId: 36, optionId: 3600, repo: \"some repo on question 36 No\" },\r\n//                     nextQuestionId: 38\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 36, optionId: 3601 }\r\n//                     ],\r\n//                     result: { questionId: 36, optionId: 3601, repo: \"some repo on question 36 Yes\" },\r\n//                     nextQuestionId: 37\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS D.C.P.I.?\",\r\n//                 content: \" Digitally created personal information includes location information, \" + \r\n//                     \"including GPS data; device identifiers such as IP and MAC addresses; click stream data, \" +\r\n//                     \"browser history, bookmarks; user generated social network data such as comments, ratings, \" +\r\n//                     \"likes and dislikes, Twitter stream, or customer service interactions.\" \r\n//             }\r\n//         }\r\n//     )\r\n//     survey[37] = createNode(\r\n//         {\r\n//             id: 37,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy include information about the D.C.P.I. you collect?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3701,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3700,\r\n//                     label: \"NO\"\r\n//                 },\r\n//                 {\r\n//                     id: 3702,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 37, optionId: 3700 }\r\n//                     ],\r\n//                     result: { questionId: 37, optionId: 3700, repo: \"some repo on question 37 No\" },\r\n//                     response: [\"Added to your list! Check out your results at the end to find suggested wording to add to your privacy policy.\"],\r\n//                     reminders: [{title: \"Todo Item 21\"}],\r\n//                     nextQuestionId: 38\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 37, optionId: 3701 }\r\n//                     ],\r\n//                     result: { questionId: 37, optionId: 3701, repo: \"some repo on question 37 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 38\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 37, optionId: 3702 }\r\n//                     ],\r\n//                     result: { questionId: 37, optionId: 3702, repo: \"some repo on question 37 No PP\" },\r\n//                     response: [\"Be sure to include this when you make your privacy policy!\"],\r\n//                     reminders: [{title: \"Todo Item 21\"}],\r\n//                     nextQuestionId: 38\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[38] = createNode(\r\n//         {\r\n//             id: 38,\r\n//             type: NodeTypes.single,\r\n//             content: \"How often do you review your antivirus software?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3800,\r\n//                     label: \"0-6 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3801,\r\n//                     label: \"6-12 MONTHS\"\r\n//                 },\r\n//                 {\r\n//                     id: 3802,\r\n//                     label: \"MORE THAN A YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 3803,\r\n//                     label: \"NEVER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 38, optionId: 3800 }\r\n//                     ],\r\n//                     result: { questionId: 38, optionId: 3800, repo: \"some repo on question 38 0-6\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 39\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 38, optionId: 3803 }\r\n//                     ],\r\n//                     result: { questionId: 38, optionId: 3803, repo: \"some repo on question 38 never\" },\r\n//                     reminders: [{title: \"Todo Item 22\"}],\r\n//                     response: [\"It’s a good idea to review your antivirus software every 6 months.\"],\r\n//                     nextQuestionId: 39\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 38, optionId: 3802, repo: \"some repo on question 38\" },\r\n//                     response: [\"Not bad, try to review once every 6 months!\"],\r\n//                     nextQuestionId: 39\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[39] = createNode(\r\n//         {\r\n//             id: 39,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you have personal information that is no longer necessary for legal or business purposes?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 3901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 3900,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 39, optionId: 3900 }\r\n//                     ],\r\n//                     result: { questionId: 39, optionId: 3900, repo: \"some repo on question 39 no\" },\r\n//                     nextQuestionId: 42\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 39, optionId: 3901 }\r\n//                     ],\r\n//                     result: { questionId: 39, optionId: 3901, repo: \"some repo on question 39 yes\" },\r\n//                     nextQuestionId: 40\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[40] = createNode(\r\n//         {\r\n//             id: 40,\r\n//             type: NodeTypes.single,\r\n//             content: \"How long are you keeping this information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4000,\r\n//                     label: \"LESS THAN 1 YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 4001,\r\n//                     label: \"MORE THAN 1 YEAR\"\r\n//                 },\r\n//                 {\r\n//                     id: 4002,\r\n//                     label: \"PERMANENTLY\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 40, optionId: 4002 }\r\n//                     ],\r\n//                     result: { questionId: 40, optionId: 4002, repo: \"some repo on question 40 PERMANENTLY\" },\r\n//                     response: [\"Not a good idea, let’s keep going to see what we should do with this information.\"],\r\n//                     todos: [{title: \"Todo Item 23\"}],\r\n//                     nextQuestionId: 42\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: { questionId: 40, optionId: 4001, repo: \"some repo on question 40\" },\r\n//                     nextQuestionId: 41\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[41] = createNode(\r\n//         {\r\n//             id: 41,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the personal information you still have being used to make a decision that would affect this individual?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4101,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4100,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 41, optionId: 4100 }\r\n//                     ],\r\n//                     result: { questionId: 41, optionId: 4100, repo: \"some repo on question 41 no\" },\r\n//                     response: [\"If the personal information has no relevance, it is time to destroy it.\"],\r\n//                     todos: [{title: \"Todo Item 24\"}],\r\n//                     nextQuestionId: 42\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 41, optionId: 4101 }\r\n//                     ],\r\n//                     result: { questionId: 41, optionId: 4101, repo: \"some repo on question 41 yes\" },\r\n//                     response: [\"Okay, keep the information for one year after making the decision.\"],\r\n//                     nextQuestionId: 42\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[42] = createNode(\r\n//         {\r\n//             id: 42,\r\n//             type: NodeTypes.single,\r\n//             content: \"How long do you keep your financial information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4200,\r\n//                     label: \"LESS THAN 7 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4201,\r\n//                     label: \"7 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4202,\r\n//                     label: \"MORE THAN 7 YEARS\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 42, optionId: 4200 }\r\n//                     ],\r\n//                     result: { questionId: 42, optionId: 4200, repo: \"some repo on question 42 4200\" },\r\n//                     response: [\"Keep financial information for 7 years.\"],\r\n//                     todos: [{title: \"Todo Item 25\"}],\r\n//                     nextQuestionId: 43\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 42, optionId: 4201 }\r\n//                     ],\r\n//                     result: { questionId: 42, optionId: 4201, repo: \"some repo on question 41 4201\" },\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 43\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 42, optionId: 4202 }\r\n//                     ],\r\n//                     result: { questionId: 42, optionId: 4202, repo: \"some repo on question 41 4202\" },\r\n//                     response: [\"Destroy financial information after 7 years.\"],\r\n//                     nextQuestionId: 43\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[43] = createNode(\r\n//         {\r\n//             id: 43,\r\n//             type: NodeTypes.single,\r\n//             content: \"How long does your organization keep relevant records?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4300,\r\n//                     label: \"LESS THAN 10 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4301,\r\n//                     label: \"10 YEARS\"\r\n//                 },\r\n//                 {\r\n//                     id: 4302,\r\n//                     label: \"10 YEARS, LONGER IF IT IS RELEVANT\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 43, optionId: 4300 }\r\n//                     ],\r\n//                     result: { questionId: 43, optionId: 4300, repo: \"some repo on question 43 4300\" },\r\n//                     response: [\"Keep all records for at least 10 years!\"],\r\n//                     todos: [{title: \"Todo Item 26\"}],\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 43, optionId: 4301 }\r\n//                     ],\r\n//                     result: { questionId: 43, optionId: 4301, repo: \"some repo on question 43 4301\" },\r\n//                     response: [\"Good start - be sure to keep relevant records as long as they are relevant.\"],\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 43, optionId: 4302 }\r\n//                     ],\r\n//                     result: { questionId: 43, optionId: 4302, repo: \"some repo on question 43 4302\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 11,\r\n//                     nextModuleId: 3\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"WHAT IS RELEVANT?\",\r\n//                 content: \"Please write 1-2 sentences describing what relevant records are in this context\"\r\n//             }\r\n//         }\r\n//     )\r\n\r\n\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part3() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[11] = createNode(\r\n//         {\r\n//             id: 11,\r\n//             type: NodeTypes.message,\r\n//             content: \"A privacy policy governs the organizations use of individuals’ data, \" +\r\n//                 \"while a confidentiality policy covers keeping individuals’ data private so that unauthorized people cannot access it.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 44\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[44] = createNode(\r\n//         {\r\n//             id: 44,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your organization have a separate confidentiality policy from your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4401,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4400,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 44, optionId: 4401 }\r\n//                     ],\r\n//                     result: { questionId: 44, optionId: 4401, repo: \"some repo on question 44 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 45\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 44, optionId: 4400 }\r\n//                     ],\r\n//                     result: { questionId: 44, optionId: 4400, repo: \"some repo on question 44 No\" },\r\n//                     response: [\"Added to your to-do list!\"],\r\n//                     reminders: [{title: \"Todo Item 27\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[45] = createNode(\r\n//         {\r\n//             id: 45,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your confidentiality policy outline who can access personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4501,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4500,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 45, optionId: 4501 }\r\n//                     ],\r\n//                     result: { questionId: 45, optionId: 4501, repo: \"some repo on question 45 Yes\" },\r\n//                     nextQuestionId: 46\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 45, optionId: 4500 }\r\n//                     ],\r\n//                     result: { questionId: 45, optionId: 4500, repo: \"some repo on question 45 No\" },\r\n//                     response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\r\n//                     \"Remember: the more hands on it; the more likely a breach.\"],\r\n//                     reminders: [{title: \"Todo Item 28\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[46] = createNode(\r\n//         {\r\n//             id: 46,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who has access to personal information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4600,\r\n//                     label: \"Everyone\"\r\n//                 },\r\n//                 {\r\n//                     id: 4601,\r\n//                     label: \"Many people\"\r\n//                 },\r\n//                 {\r\n//                     id: 4602,\r\n//                     label: \"Only one person\"\r\n//                 },\r\n//                 {\r\n//                     id: 4603,\r\n//                     label: \"A few people\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4602 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4602, repo: \"some repo on question 46 one\" },\r\n//                     response: [\"Pretty good! You could also give a couple more appropriate individuals access if this person needs support.\"],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4603 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4603, repo: \"some repo on question 46 few\" },\r\n//                     response: [\"Awesome!\"],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4600 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4600, repo: \"some repo on question 46 everyone\" },\r\n//                     response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\r\n//                             \"Remember: the more hands on it; the more likely a breach. \"],\r\n//                     reminders: [{title: \"Todo Item 29\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 46, optionId: 4601 }\r\n//                     ],\r\n//                     result: { questionId: 46, optionId: 4601, repo: \"some repo on question 46 many\" },\r\n//                     response: [\"Be sure to clearly state who can access personal information in your confidentiality policy. \" +\r\n//                             \"Remember: the more hands on it; the more likely a breach. \"],\r\n//                     reminders: [{title: \"Todo Item 29\"}],\r\n//                     nextQuestionId: 47,\r\n//                     nextModuleId: 4\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     return survey;\r\n// }\r\n\r\n// function getSurvey_part4() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[47] = createNode(\r\n//         {\r\n//             id: 47,\r\n//             type: NodeTypes.message,\r\n//             content: \"Every organization needs to have one person who can answer questions about the collection, \" +\r\n//                 \"use and disclosure of data. This role is called the Privacy Officer.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 48\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[48] = createNode(\r\n//         {\r\n//             id: 48,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your organization have a designated privacy officer?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4801,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4800,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 48, optionId: 4801 }\r\n//                     ],\r\n//                     result: { questionId: 48, optionId: 4801, repo: \"some repo on question 48 Yes\" },\r\n//                     nextQuestionId: 49\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 48, optionId: 4800 }\r\n//                     ],\r\n//                     result: { questionId: 48, optionId: 4800, repo: \"some repo on question 48 No\" },\r\n//                     response: [\"Added to your to-do list!\"],\r\n//                     todos: [{title: \"Todo Item 30\"}],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     survey[49] = createNode(\r\n//         {\r\n//             id: 49,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is your privacy officers contact information included in your privacy policy?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 4901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 4900,\r\n//                     label: \"NO\"\r\n//                 },\r\n//                 {\r\n//                     id: 4902,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 49, optionId: 4901 }\r\n//                     ],\r\n//                     result: { questionId: 49, optionId: 4901, repo: \"some repo on question 49 Yes\" },\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 49, optionId: 4900 }\r\n//                     ],\r\n//                     result: { questionId: 49, optionId: 4900, repo: \"some repo on question 49 No\" },\r\n//                     response: [\"Be sure to add this to your privacy policy!\"],\r\n//                     reminders: [{title: \"Todo Item 31\"}],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 49, optionId: 4902 }\r\n//                     ],\r\n//                     result: { questionId: 49, optionId: 4902, repo: \"some repo on question 49 No PP\" },\r\n//                     response: [\"Add this to your privacy policy once you create it!\"],\r\n//                     reminders: [{title: \"Todo Item 31\"}],\r\n//                     nextQuestionId: 50,\r\n//                     nextModuleId: 5\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     return survey;\r\n// }\r\n// function getSurvey_part5() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[50] = createNode(\r\n//         {\r\n//             id: 50,\r\n//             type: NodeTypes.message,\r\n//             content: \"Sometimes an organization will get requests for information.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 51\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[51] = createNode(\r\n//         {\r\n//             id: 51,\r\n//             type: NodeTypes.message,\r\n//             content: \"Explain what type of P.I. must be redacted\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 52\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[52] = createNode(\r\n//         {\r\n//             id: 52,\r\n//             type: NodeTypes.single,\r\n//             content: \"Does your privacy policy explain how someone could access the information you collect?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5201,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 5200,\r\n//                     label: \"NO\"\r\n//                 },\r\n//                 {\r\n//                     id: 5202,\r\n//                     label: \"NO PRIVACY POLICY YET\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 52, optionId: 5200 }\r\n//                     ],\r\n//                     response: [\"Check out the suggested wording in your results at the end of the module to add this to your privacy policy!\"],\r\n//                     result: {questionId: 52, optionId: 5200, repo: \"some repo to question 52 no\"},\r\n//                     reminders: [{title: \"Todo Item 32\"}],\r\n//                     nextQuestionId: 53\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 52, optionId: 5201 }\r\n//                     ],\r\n//                     result: {questionId: 52, optionId: 5201, repo: \"some repo to question 52 yes\"},\r\n//                     nextQuestionId: 53\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 52, optionId: 5202 }\r\n//                     ],\r\n//                     response: [\"Be sure to add this to your privacy policy once you create it!\"],\r\n//                     result: {questionId: 52, optionId: 5202, repo: \"some repo to question 52 no pp\"},\r\n//                     reminders: [{title: \"Todo Item 32\"}],\r\n//                     nextQuestionId: 53\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[53] = createNode(\r\n//         {\r\n//             id: 53,\r\n//             type: NodeTypes.single,\r\n//             content: \"Have you received or expect to receive requests for information?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5301,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 5300,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 53, optionId: 5300 }\r\n//                     ],\r\n//                     result: {questionId: 53, optionId: 5300, repo: \"some repo to question 53 no\"},\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 53, optionId: 5301 }\r\n//                     ],\r\n//                     result: {questionId: 53, optionId: 5301, repo: \"some repo to question 53 Yes\"},\r\n//                     nextQuestionId: 54\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[54] = createNode(\r\n//         {\r\n//             id: 54,\r\n//             type: NodeTypes.single,\r\n//             content: \"Who is asking\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5400,\r\n//                     label: \"SOMEONE LOOKING FOR THEIR INFORMATION\"\r\n//                 },\r\n//                 {\r\n//                     id: 5401,\r\n//                     label: \"SOMEONE LOOKING FOR INFORMATION ABOUT OTHERS\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 54, optionId: 5400 }\r\n//                     ],\r\n//                     result: {questionId: 54, optionId: 5400, repo: \"some repo to question 54 A\"},\r\n//                     nextQuestionId: 55,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 54, optionId: 5401 }\r\n//                     ],\r\n//                     result: {questionId: 54, optionId: 5401, repo: \"some repo to question 54 B\"},\r\n//                     nextQuestionId: 56\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[55] = createNode(\r\n//         {\r\n//             id: 55,\r\n//             type: NodeTypes.single,\r\n//             content: \"Are they requesting ..\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5500,\r\n//                     label: \"THEIR PERSONAL INFORMATION\"\r\n//                 },\r\n//                 {\r\n//                     id: 5501,\r\n//                     label: \"HOW THEIR PERSONAL INFORMATION IS BEING USED\"\r\n//                 },\r\n//                 {\r\n//                     id: 5502,\r\n//                     label: \"WHO HAS ACCESS TO THEIR PERSONAL INFORMATION\"\r\n//                 },\r\n//                 {\r\n//                     id: 5503,\r\n//                     label: \"OTHER INFORMATION\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 55, optionId: 5503 }\r\n//                     ],\r\n//                     result: {questionId: 55, optionId: 5503, repo: \"some repo to question 55 D\"},\r\n//                     nextQuestionId: 56,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: {questionId: 55, optionId: 5500, repo: \"some repo to question 55 B\"},\r\n//                     response: [\"Great, they can have this information!\"],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[56] = createNode(\r\n//         {\r\n//             id: 56,\r\n//             type: NodeTypes.single,\r\n//             content: \"Is the information ..\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5600,\r\n//                     label: \"Protected by S-C privilege?\"\r\n//                 },\r\n//                 {\r\n//                     id: 5601,\r\n//                     label: \"Likely to harm the competitive position of the organization\"\r\n//                 },\r\n//                 {\r\n//                     id: 5602,\r\n//                     label: \"Part of an investigation/appeal uncompleted\"\r\n//                 },\r\n//                 {\r\n//                     id: 5603,\r\n//                     label: \"Part of a mediation/arbitration\"\r\n//                 },\r\n//                 {\r\n//                     id: 5604,\r\n//                     label: \"None of the above\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 56, optionId: 5604 }\r\n//                     ],\r\n//                     result: {questionId: 56, optionId: 5604, repo: \"some repo to question 56 None\"},\r\n//                     nextQuestionId: 57,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: {questionId: 56, optionId: 5600, repo: \"some repo to question 56 B\"},\r\n//                     response: [\"Don’t give out this information. If you plan to deny a request for information, consult a lawyer.\"],\r\n//                     todos: [{title: \"Todo Item 33\"}],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[57] = createNode(\r\n//         {\r\n//             id: 57,\r\n//             type: NodeTypes.single,\r\n//             content: \"Would disclosing this information.. \",\r\n//             options: [\r\n//                 {\r\n//                     id: 5700,\r\n//                     label: \"Threaten the safety/harm of another person\"\r\n//                 },\r\n//                 {\r\n//                     id: 5701,\r\n//                     label: \"Cause grave harm to the requester\"\r\n//                 },\r\n//                 {\r\n//                     id: 5702,\r\n//                     label: \"Reveal personal information about another person\"\r\n//                 },\r\n//                 {\r\n//                     id: 5703,\r\n//                     label: \"None of the above\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.skip,\r\n//                     answers: [\r\n//                         { questionId: 57, optionId: 5703 }\r\n//                     ],\r\n//                     result: {questionId: 57, optionId: 5703, repo: \"some repo to question 57 None\"},\r\n//                     response: [\"Proceed with caution. If you plan to deny a request for information, consult a lawyer.\"],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.default,\r\n//                     answers: [],\r\n//                     result: {questionId: 56, optionId: 5600, repo: \"some repo to question 56 B\"},\r\n//                     response: [\"Don’t give out this information. If you plan to deny a request for information, consult a lawyer.\"],\r\n//                     todos: [{title: \"Todo Item 33\"}],\r\n//                     nextQuestionId: 58,\r\n//                     nextModuleId: 6\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     return survey;\r\n// }\r\n// function getSurvey_part6() {\r\n//     let survey: SurveyDialogue = {};\r\n//     survey[58] = createNode(\r\n//         {\r\n//             id: 58,\r\n//             type: NodeTypes.message,\r\n//             content: \"Canada’s Anti-Spam Law (CASL) provides regulations around sending mass messages to members and the public.\",\r\n//             options: [],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [],\r\n//                     nextQuestionId: 59\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[59] = createNode(\r\n//         {\r\n//             id: 59,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you send messages to your members or the public?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 5901,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 5900,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 59, optionId: 5900 }\r\n//                     ],\r\n//                     result: {questionId: 59, optionId: 5900, repo: \"some repo to question 59 No\"},\r\n//                     nextQuestionId: 65,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 59, optionId: 5901 }\r\n//                     ],\r\n//                     result: {questionId: 59, optionId: 5901, repo: \"some repo to question 59 Yes\"},\r\n//                     nextQuestionId: 60,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[60] = createNode(\r\n//         {\r\n//             id: 60,\r\n//             type: NodeTypes.single,\r\n//             content: \"Are you a registered charity?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6001,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6000,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 60, optionId: 6000 }\r\n//                     ],\r\n//                     result: {questionId: 60, optionId: 6000, repo: \"some repo to question 60 No\"},\r\n//                     nextQuestionId: 62,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 60, optionId: 6001 }\r\n//                     ],\r\n//                     result: {questionId: 60, optionId: 6001, repo: \"some repo to question 60 Yes\"},\r\n//                     nextQuestionId: 61,\r\n//                 }\r\n//             ],\r\n//             extraInfo: {\r\n//                 title: \"I’M NOT SURE\",\r\n//                 content: \"A registered charity .. \"\r\n//             }\r\n//         }\r\n//     );\r\n//     survey[61] = createNode(\r\n//         {\r\n//             id: 61,\r\n//             type: NodeTypes.single,\r\n//             content: \"What is your main reason for sending mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6100,\r\n//                     label: \"FUNDRAISING\"\r\n//                 },\r\n//                 {\r\n//                     id: 6101,\r\n//                     label: \"OTHER\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 61, optionId: 6100 }\r\n//                     ],\r\n//                     result: {questionId: 61, optionId: 6100, repo: \"some repo to question 61 FUNDRAISING\"},\r\n//                     nextQuestionId: 62,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 61, optionId: 6101 }\r\n//                     ],\r\n//                     result: {questionId: 61, optionId: 6101, repo: \"some repo to question 60 other\"},\r\n//                     response: [\"Heads up - charities are only allowed to send mass messages for fundraising!\"],\r\n//                     todos: [{title: \"Todo Item 34\"}],\r\n//                     nextQuestionId: 62,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[62] = createNode(\r\n//         {\r\n//             id: 62,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you get consent before sending mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6201,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6200,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 62, optionId: 6200 }\r\n//                     ],\r\n//                     result: {questionId: 62, optionId: 6200, repo: \"some repo to question 62 No\"},\r\n//                     response: [\"Make sure individuals “opt-in” to mass messages before adding them to your mailing list.\"],\r\n//                     todos: [{title: \"Todo Item 35\"}],\r\n//                     nextQuestionId: 63,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 62, optionId: 6201 }\r\n//                     ],\r\n//                     result: {questionId: 62, optionId: 6201, repo: \"some repo to question 62 yes\"},\r\n//                     response: [\"Great!\"],\r\n//                     nextQuestionId: 63,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[63] = createNode(\r\n//         {\r\n//             id: 63,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you include contact information in your mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6301,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6300,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 63, optionId: 6300 }\r\n//                     ],\r\n//                     result: {questionId: 63, optionId: 6300, repo: \"some repo to question 63 No\"},\r\n//                     response: [\"Be sure you add this to all your mass messages!\"],\r\n//                     todos: [{title: \"Todo Item 36\"}],\r\n//                     nextQuestionId: 64,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 63, optionId: 6301 }\r\n//                     ],\r\n//                     result: {questionId: 63, optionId: 6301, repo: \"some repo to question 63 yes\"},\r\n//                     response: [\"Good job!\"],\r\n//                     nextQuestionId: 64,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[64] = createNode(\r\n//         {\r\n//             id: 64,\r\n//             type: NodeTypes.single,\r\n//             content: \"Do you include an “unsubscribe” option within your mass messages?\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6401,\r\n//                     label: \"YES\"\r\n//                 },\r\n//                 {\r\n//                     id: 6400,\r\n//                     label: \"NO\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 64, optionId: 6400 }\r\n//                     ],\r\n//                     result: {questionId: 64, optionId: 6400, repo: \"some repo to question 64 No\"},\r\n//                     response: [\"Include this in all your mass messages!\"],\r\n//                     todos: [{title: \"Todo Item 37\"}],\r\n//                     nextQuestionId: 65,\r\n//                 },\r\n//                 {\r\n//                     type: TriggerType.next,\r\n//                     answers: [\r\n//                         { questionId: 64, optionId: 6401 }\r\n//                     ],\r\n//                     result: {questionId: 64, optionId: 6401, repo: \"some repo to question 64 yes\"},\r\n//                     response: [\"Perfect!\"],\r\n//                     nextQuestionId: 65,\r\n//                 }\r\n//             ]\r\n//         }\r\n//     );\r\n//     survey[65] = createNode(\r\n//         {\r\n//             id: 65,\r\n//             type: NodeTypes.single,\r\n//             content: \"You completed module\",\r\n//             options: [\r\n//                 {\r\n//                     id: 6500,\r\n//                     label: \"Go to the results\"\r\n//                 }\r\n//             ],\r\n//             triggers: [\r\n//                 {\r\n//                     type: TriggerType.exit,\r\n//                     answers: [\r\n//                         {questionId: 65, optionId: 6500}\r\n//                     ],\r\n//                     nextQuestionId: -1\r\n//                 }\r\n//             ]\r\n//         }\r\n//     )\r\n//     return survey;\r\n// }\r\n\r\n// function getModules() {\r\n//     let modules: { [key: number]: Module } = {};\r\n//     modules[1] = { name: \"Privacy Policy\", nodes: getSurvey_part1() };\r\n//     modules[2] = { name: \"Personal Info\", nodes: getSurvey_part2()};\r\n//     modules[3] = { name: \"Confidentiality\", nodes: getSurvey_part3()};\r\n//     modules[4] = { name: \"Privacy Officer\", nodes: getSurvey_part4()};\r\n//     modules[5] = { name: \"Requests\", nodes: getSurvey_part5()};\r\n//     modules[6] = { name: \"Requests\", nodes: getSurvey_part6()};\r\n//     return modules;\r\n// }\r\n\r\n\r\n// export {\r\n//     getSurvey,\r\n//     getModules\r\n// }","import {ResponseItem} from '../model/index'\r\nimport React from 'react';\r\n\r\nexport interface Item {\r\n    title: string\r\n}\r\nexport interface Result {\r\n    questionId: number,\r\n    optionId: number,\r\n    repo: string\r\n}\r\nexport interface ModuleResult {\r\n    name: string,\r\n    todos: Array<Item>,\r\n    reminders: Array<Item>,\r\n    results: Array<Result>,\r\n    path: Array<ResponseItem>\r\n}\r\n// Context: record all infomation would be used for result page\r\n// results: the repo for each answered question. \r\n//          Since every result item related to a specific option of a question,\r\n//          it should record both questionId and optionId that can be refered to.\r\n// path: should record both questionId and optionID of passed node. So make it a Answer array.\r\n//       may be can only keep the \"results\" feild?\r\n// Consider: how to split results of different sub-modules?\r\nexport interface Context {\r\n    moduleResults: { [key: number]: ModuleResult };\r\n    todos: Array<Item>;\r\n    reminders: Array<Item>;\r\n}\r\n\r\n// Context data generating functions. Only for testing\r\n// function getPath() {\r\n//     let pathList: Array<ResponseItem> = [];\r\n//     // pathList.push({ _messageId: 1, optionIds: [100] });\r\n//     // pathList.push({ _messageId: 3, optionIds: [300] });\r\n//     // pathList.push({ _messageId: 4, optionIds: [401] });\r\n//     return pathList;\r\n// }\r\n\r\n// function getTodoList() {\r\n//     let todoList: Array<Item> = [];\r\n//     todoList.push({ title: \"Create a privacy policy\" });\r\n//     todoList.push({ title: \"Review social media terms of service\" });\r\n//     todoList.push({ title: \"Outline personal info access \" });\r\n//     todoList.push({ title: \"Train employees on privacy policies\" });\r\n//     return todoList;\r\n// }\r\n\r\n// function getReminders() {\r\n//     let reminderList: Array<Item> = [];\r\n//     reminderList.push({ title: \"Only use mass messages for fundraising\" });\r\n//     reminderList.push({ title: \"Get consent before sending mass messages\" });\r\n//     reminderList.push({ title: \"Lorem ipsum dolor sit amet\" });\r\n//     return reminderList;\r\n// }\r\n\r\n// function getResultList() {\r\n//     let resultList: Array<Result> = [];\r\n//     resultList.push({ questionId: 1, optionId: 100, repo: \"result repo no 1\" });\r\n//     resultList.push({ questionId: 3, optionId: 300, repo: \"result repo no 3\" });\r\n//     resultList.push({ questionId: 4, optionId: 401, repo: \"result repo no 4\" });\r\n//     return resultList;\r\n// }\r\n\r\n// export function getContext() {\r\n//     let path = getPath();\r\n//     let todos = getTodoList();\r\n//     let reminders = getReminders();\r\n//     let results = getResultList();\r\n//     let module = { name: \"Privacy Policy\", path: path, todos: todos, reminders: reminders, results: results };\r\n//     let context: Context = {\r\n//         moduleResults: { 1: module },\r\n//         todos: [],\r\n//         reminders: []\r\n//     };\r\n//     return context;\r\n// }\r\n\r\n// default context\r\nconst defaultContext: Context = {\r\n    moduleResults: {},\r\n    todos: [],\r\n    reminders: []\r\n};\r\n\r\nexport const ResultContext = React.createContext({\r\n    context: defaultContext,\r\n    updateContext: (id: number, contextItm: any) => { }\r\n})\r\n\r\nexport class ResultContextProvider extends React.Component {\r\n\r\n\r\n    updateContext = (id: number, contextItem: any) => {\r\n        let context = this.state.context;\r\n        if (context.moduleResults[id]) { // if current module already exist in result context\r\n            if(contextItem.todo)\r\n                context.moduleResults[id].todos.push(contextItem.todo)\r\n            if(contextItem.reminder)\r\n                context.moduleResults[id].reminders.push(contextItem.reminder)\r\n            if(contextItem.result)\r\n                context.moduleResults[id].results.push(contextItem.result);\r\n            context.moduleResults[id].path.push(contextItem.path);\r\n        } else {\r\n            context.moduleResults[id] = {\r\n                name: contextItem.name,\r\n                todos: [contextItem.todos],\r\n                reminders: [contextItem.reminders],\r\n                results: [contextItem.result],\r\n                path: [contextItem.path]\r\n            }; // if module does not exist\r\n        }\r\n        if(contextItem.todo)\r\n            context.todos.push(contextItem.todo);\r\n        if(contextItem.reminder)\r\n            context.reminders.push(contextItem.reminder);\r\n        this.setState({ context: context })\r\n    }\r\n    state = {\r\n        context: defaultContext,\r\n        updateContext: this.updateContext\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ResultContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </ResultContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const ResultContextConsumer = ResultContext.Consumer\r\n\r\n// export const ResultContext = React.createContext(\r\n//     context,\r\n//     updateContext: (id: number, contextItm: any) => {}\r\n// )","import React from 'react';\r\nimport './ChatbotStyle.css';\r\nimport Header from '../../../components/Header/Header'\r\nimport HeaderLinks from \"../../../components/Header/HeaderLink\"\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport Chat from \"./Chat\";\r\nimport ToDoSection from \"./ToDoSection\";\r\nimport { getSurvey, getModules } from \"../../../data/data\";\r\nimport { ResultContext, Context } from '../../../data/context';\r\nimport { Trigger, Message, ResponsePath, AutoPlayMessage, ResponseItem } from '../../../model/index'\r\nimport history from '../../../history';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport banrdIcon from \"../../../Assets/img/botavator.svg\";\r\n\r\ninterface IState {\r\n    currentMessage: Message,\r\n    currentModuleId: any,\r\n    responsePath: ResponsePath,\r\n    displayedMessages: DisplayedMessage[],\r\n    todoList: any[],\r\n    reminderList: any[],\r\n}\r\n\r\n\r\nexport interface DisplayedMessage {\r\n    message: Message,\r\n    selectedOptionIds: number[],\r\n    showExtraInfo: boolean // becuase there can only be one\r\n    reply?: string // TODO temp temporary\r\n}\r\n\r\nexport default class ChatbotPage extends React.Component {\r\n\r\n    survey: any;\r\n    modules: any;\r\n    state: IState;\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.survey = getSurvey();\r\n        this.modules = getModules();\r\n        const responsePath: ResponsePath = new ResponsePath()\r\n        this.state = {\r\n            currentMessage: this.survey[0],\r\n            currentModuleId: 0,\r\n            responsePath: responsePath,\r\n            displayedMessages: [], //TODO  maybe we don't need messagelist or todolist.. also responsepath here because the context gets them\r\n            todoList: [],\r\n            reminderList: []\r\n        };\r\n        this.handleSingleSelectResponse = this.handleSingleSelectResponse.bind(this);\r\n        this.handleMultiSelectSubmit = this.handleMultiSelectSubmit.bind(this)\r\n        this.handleShowExtraInfo = this.handleShowExtraInfo.bind(this);\r\n        this.handleMultiSelectClick = this.handleMultiSelectClick.bind(this);\r\n        this.getNextAction = this.getNextAction.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.displayNextMessage({moduleId: 0, messageId: 0});\r\n    }\r\n\r\n    // TODO chnage the parameter name...\r\n    public displayNextMessage(next: any) {// have this also take a module id? \r\n        const nextMessage: Message = this.modules[next.moduleId].nodes[next.messageId]; // TODO create modules class.. modules.getMessage(messageId)\r\n         const message: DisplayedMessage = {message: nextMessage, selectedOptionIds: [], showExtraInfo: false };\r\n\r\n        this.setState((state: IState, props) => {\r\n            return {\r\n                currentModuleId: next.moduleId,\r\n                currentMessage: nextMessage,\r\n                displayedMessages: state.displayedMessages.concat(message)\r\n            }\r\n        }, () => {\r\n            this.scrollToBottom();\r\n        })\r\n        const trigger = nextMessage.defaultTrigger // do we just pass nothing in? or maybe we should do find matching trigger\r\n        if (nextMessage instanceof AutoPlayMessage) { // if next message type is general message, auto display next one\r\n            this.displayNextMessage(this.getNextAction(trigger)); // TODO ughhh this too. wtf. we just need to get the default trigger. \r\n        }// TODO check what happens when this trigger is an exit type. \r\n\r\n    }\r\n\r\n    // TODO test that a response item is added to the responsePath\r\n    private updateResponsePath(responseItem: any) {\r\n        this.setState((state: IState) => {\r\n            // state.responsePath.addResponseItem(responseItem);  TODO fix this.\r\n            return {\r\n                responsePath: state.responsePath\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateState(message: any, todo: any, reminder: any) { //temporary\r\n        this.setState((state: IState, props: any) => {\r\n            let lastMessageIndex = state.displayedMessages.length - 1\r\n            if(lastMessageIndex < 0) \r\n                lastMessageIndex = 0\r\n            state.displayedMessages[lastMessageIndex].reply = message; // TODO add components instead of message strings.\r\n            if(todo)\r\n                state.todoList.push(todo)\r\n            \r\n            if(reminder)\r\n                state.reminderList.push(reminder)\r\n\r\n            return {\r\n                messageList: [... state.displayedMessages],\r\n                todoList: state.todoList,\r\n                reminderList: state.reminderList,\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public handleMultiSelectClick(questionId: any, selectedOptionId: any){\r\n        if (this.isInactiveQuestion(questionId)) {\r\n            return;\r\n        }\r\n        // add a selected option\r\n        this.markOptionIdSelected(selectedOptionId)\r\n    }\r\n\r\n    public markOptionIdSelected(optionId: any){\r\n        this.setState((state: IState) => {\r\n            let lastMessageIndex = state.displayedMessages.length - 1\r\n            if(lastMessageIndex < 0) \r\n                lastMessageIndex = 0\r\n            if(!state.displayedMessages[lastMessageIndex].selectedOptionIds.includes(optionId))\r\n                state.displayedMessages[lastMessageIndex].selectedOptionIds.push(optionId)\r\n\r\n            return {\r\n                displayedMessages: state.displayedMessages\r\n            }\r\n        })\r\n    }\r\n\r\n    // it should\r\n    // not submit when nothing is selected\r\n    // not submit when question is inactive\r\n    public handleMultiSelectSubmit(questionId: any){\r\n        if (this.isInactiveQuestion(questionId) || this.isEmptySelection()) { //TODO also prevent submission when there's nothing selected. \r\n            return;\r\n        }\r\n        const lastMessage = this.state.displayedMessages.length - 1\r\n        this.processSelectedOptions(questionId, this.state.displayedMessages[lastMessage].selectedOptionIds)\r\n    }\r\n\r\n    isEmptySelection(){\r\n        let lastMessageIndex = this.state.displayedMessages.length - 1\r\n        if(lastMessageIndex < 0) \r\n            lastMessageIndex = 0\r\n        if(this.state.displayedMessages[lastMessageIndex].selectedOptionIds.length <=  0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    // it should \r\n    // return when a question is inactive\r\n    // add a responseItem to the responsePath\r\n    // update the messageList with a reply \r\n    // add a result Item to the context\r\n    // get the next message\r\n    // call displayNextMessage\r\n    public handleSingleSelectResponse(questionId: any, selectedOptionId: any) { \r\n        if (this.isInactiveQuestion(questionId)) {\r\n            return;\r\n        }\r\n        this.markOptionIdSelected(selectedOptionId)\r\n        this.processSelectedOptions(questionId, selectedOptionId)\r\n\r\n    }\r\n\r\n    public async processSelectedOptions(questionId: any, selectedOptionIds: any){\r\n        const responseItem: ResponseItem = new ResponseItem(this.state.currentMessage.id, selectedOptionIds)\r\n        await this.updateResponsePath(responseItem) // check if this works with async await\r\n\r\n        const trigger: any = this.state.currentMessage.findTrigger(this.state.responsePath); // the responsePath has to be updated by this point because we use it to find the trigger.\r\n\r\n        let resultItem: any = {\r\n            path: responseItem,\r\n            todo: trigger.todo ? trigger.todo : null,\r\n            reminder: trigger.reminder ? trigger.reminder : null,\r\n            resultReport: trigger.resultReport\r\n        }\r\n        this.context.updateContext(this.state.currentModuleId, resultItem);  // TODO make sure this is actually the current module. i think it is. could be a test.\r\n        await this.updateState(trigger.reply, resultItem.todo, resultItem.reminder);\r\n        // if we did update the trigger action to always contain the next module, it would be easier to make a mistake when writing the json. \r\n        // but it would be more elegant here. \r\n        let nextMessage = this.getNextAction(trigger.action); // TODO this shouldnt take any arguments.. maybe we should just have the trigger always include the module. hmmmmmm\r\n        this.displayNextMessage(nextMessage) // TODO if we push to history in dispaly next message.. will the rest of this function even run?   \r\n    }// maybe we can move the pushexit to diplayNextMessage... \r\n\r\n    public handleShowExtraInfo(questionId: any) {// TODO this wont inactivate previous questions. \r\n        if (this.isInactiveQuestion(questionId)) {\r\n            return;\r\n        }\r\n        this.setState((state: IState, props: any) => {\r\n            let last = this.state.displayedMessages.length -1\r\n            if(last < 0) \r\n                last = 0\r\n            \r\n            const repeatMessage = cloneDeep(state.displayedMessages[last]);\r\n            state.displayedMessages[last].showExtraInfo = true;\r\n            return {\r\n                displayedMessages: [...state.displayedMessages, repeatMessage]\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // TODO this may just redirect the user to the result page.... needs to be fixed\r\n    getNextAction(triggerAction: any) {\r\n        // return information for next message.\r\n        // Can make it a switch statement\r\n        // or, make it a part of the handleSelectOption method rather than integrate in trigger class？\r\n        if (triggerAction.type == \"exit\") {\r\n            history.push('/result')\r\n        } else if (triggerAction.type == \"nextQuestion\") {\r\n            return { moduleId: this.state.currentModuleId, messageId: triggerAction.nextQuestionId };\r\n        } else if (triggerAction.type == \"nextModule\") {\r\n            return { moduleId: triggerAction.nextModuleId, messageId: triggerAction.nextQuestionId };\r\n        }\r\n    }\r\n\r\n    public scrollToBottom() {\r\n        try{\r\n        let chatbotScroller = document.getElementById('chatbot-scroller') as HTMLElement;\r\n        chatbotScroller.scrollTop = chatbotScroller.scrollHeight;\r\n        }catch(exception){\r\n            console.log(\"scroll exception\");\r\n        }\r\n    }\r\n\r\n    public isCorrectTrigger(answer: any, currentQuestionId: any, currentOptionId: any) {\r\n        return answer.optionId === currentOptionId && answer.questionId === currentQuestionId\r\n    }\r\n\r\n    private isInactiveQuestion(questionId: number) {\r\n        return questionId !== this.state.currentMessage.id\r\n    }\r\n\r\n    render() {\r\n        // const todos = this.context.moduleResults[this.state.currentModuleId].todos\r\n        // const reminders = this.context.moduleResults[this.state.currentModuleId].reminders\r\n\r\n        return (\r\n            <div className=\"full-screen-container grey chatbot-page\">\r\n                <Header\r\n                    brand={banrdIcon}\r\n                    brandName=\"LSALT 2.0 |\"\r\n                    toolTitle=\"Non-Profit Self Assessment\"\r\n                    fixed\r\n                    color=\"white\"\r\n                    rightLinks={<HeaderLinks />}\r\n                    absolute\r\n                />\r\n                <div className=\"main-container\">\r\n                    <ProgressBar ></ProgressBar>\r\n                    <Chat\r\n                        displayedMessages={this.state.displayedMessages}\r\n                        handleMultiSelectOptions = {this.handleMultiSelectClick}\r\n                        handleMultiSelectSubmit = {this.handleMultiSelectSubmit}\r\n                        handleShowExtraInfo={this.handleShowExtraInfo}\r\n                        handleSelectOptions={this.handleSingleSelectResponse}></Chat>\r\n                    <ToDoSection\r\n                        todoList={this.state.todoList}\r\n                        reminderList={this.state.reminderList}></ToDoSection>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nChatbotPage.contextType = ResultContext;\r\n\r\n","import React from \"react\";\r\nimport { Tabs, Tab } from \"@material-ui/core\";\r\nimport './TabNatStyle.css';\r\n\r\nexport default function TabNav(props: any) {\r\n    const { tabList } = props;\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n    console.log(tabList);\r\n    const tabs = tabList.map((tab: any, i: any) => {\r\n        if (tab.title) {\r\n            return <Tab label={tab.title} key={i} className=\"tab\" />\r\n        }\r\n        return true; // FIXME adding this for now to quiet the compiler warnings\r\n    });\r\n    return (\r\n        <div className=\"container\">\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"fullWidth\" className=\"tab-nav\">\r\n                {tabs}\r\n            </Tabs>\r\n            {tabList.map((prop: any, key: any) => {\r\n                if (key === value) {\r\n                    return <div key={key} className=\"container\">{prop.tabContent}</div>;\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Typography, List, ListItem, ListItemSecondaryAction, Button } from \"@material-ui/core\";\r\nfunction TodoList(props: any) {\r\n    const { todoList } = props;\r\n    return (\r\n        <div className=\"list-container round\">\r\n            <List>\r\n                {todoList.map((item: any, key: any) => {\r\n                    return (<ListItem className=\"list-item\" key={key}>\r\n                       <div className=\"todo-item-bullet\"/>\r\n                        <span className= \"item-label\" >{item.title}</span>\r\n                        <ListItemSecondaryAction>\r\n                            <div className=\"btn-group\">\r\n                                <Button variant=\"outlined\">more info</Button>\r\n                                {/* <Button variant=\"contained\" color=\"primary\">create now</Button> */}\r\n                            </div>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>)\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ReminderList(props: any) {\r\n    const { reminderList } = props;\r\n    return (\r\n        <div className=\"list-container \">\r\n            <List>\r\n                {reminderList.map((item: any, key: any) => {\r\n                    return (<ListItem key={key} className=\"list-item\">\r\n                        <div className=\"reminder-item-bullet\"/>\r\n                        <span className= \"item-label\" >{item.title}</span>\r\n                         <ListItemSecondaryAction>\r\n                            <div className=\"btn-group\">\r\n                                <Button variant=\"outlined\">more info</Button>\r\n                                {/* <Button variant=\"contained\" color=\"primary\">create now</Button> */}\r\n                            </div>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>)\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default function Overview(props: any) {\r\n    const { context } = props;\r\n    return (\r\n        <div className=\"overview-container\">\r\n            <div className=\"result todo-container\">\r\n                <div className=\"title-container\">\r\n                    <Typography variant=\"h4\" component=\"h4\" className=\"title bold\">\r\n                        <span className=\"title\">DO NOW</span>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"span\">\r\n                    Take Care of the task on this list ASAP. This might put you in legal risk\r\n                    </Typography>\r\n                </div>\r\n                <TodoList todoList={context.todos}></TodoList>\r\n            </div>\r\n            <div className=\"result reminder-container\">\r\n                <div className=\"title-container\">\r\n                    <Typography variant=\"h4\" component=\"h4\" className=\"title bold\">\r\n                        <span className=\"title\">Do Later</span>\r\n                    </Typography>\r\n                </div>\r\n                <ReminderList reminderList={context.reminders}></ReminderList>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Typography, Link } from \"@material-ui/core\";\r\nimport { Result } from \"../../../../data/context\";\r\nexport default function QuestionRepo(props: any) {\r\n    const { resultList, questionList } = props;\r\n    console.log(questionList);\r\n    return (\r\n        <div className=\"repo-container\">\r\n            {resultList.map((result: Result, key: any) => {\r\n                return (\r\n                    <div className=\"repo-item\" key={key}>\r\n\r\n                        <div className=\"question-container\">\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"title\" gutterBottom>\r\n                                {questionList[result.questionId].content}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                because you answered: {questionList[result.questionId].options.find((opt: { id: number; }) => opt.id === result.optionId) ?.label}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"link\" >\r\n                                <Link>Change my answer</Link>\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"info-container\">\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"title\" gutterBottom>\r\n                                {result.repo}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\" className=\"link\" >\r\n                                <Link>Learn more</Link>\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport TabNav from \"../../../../components/TabNav/TabNav\";\r\nimport Overview from \"./Overview\";\r\nimport QuestionRepo from \"./QuestionRepo\";\r\nimport {getModules} from \"../../../../data/data\";\r\nexport default function ResultDetail(props: any) {\r\n    console.log(props.context);\r\n    const survey = getModules();\r\n    // const context = getContext();\r\n    const { context } = props;\r\n    console.log(context.modules[1]);\r\n    function getTabList() {\r\n        let tabList: any = [];\r\n        tabList.push({\r\n            title: \"OUTCOME\", tabContent: <Overview context={context}/>\r\n        })\r\n        if (context.modules) {\r\n            Object.keys(context.modules).forEach((key:any) => {\r\n                tabList.push({\r\n                    title: context.modules[key].name, tabContent: <QuestionRepo questionList={survey[key]}  resultList={context.modules[key].results}/>\r\n                })\r\n            })\r\n        }\r\n        return tabList;\r\n    }\r\n    const tabList = getTabList();\r\n    return (\r\n        <div className=\"result-detail-container\">\r\n            <TabNav \r\n            tabList = {tabList}\r\n            ></TabNav>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Header from \"../../../components/Header/Header\";\r\nimport HeaderLinks from \"../../../components/Header/HeaderLink\";\r\nimport ResultDetail from \"./Detail/ResultDetail\";\r\nimport { ResultContextConsumer } from \"../../../data/context\";\r\nimport \"./ResultStyle.css\";\r\nimport banrdIcon from \"../../../Assets/img/botavator.svg\";\r\n\r\n\r\nexport default function ResultPage() {\r\n    return (\r\n        <div className=\"full-screen-container white result-page\">\r\n            <Header\r\n                brand={banrdIcon}\r\n                brandName = \"LSALT 2.0 | \"\r\n                toolTitle=\"Non-profit Self Assessment\"\r\n                fixed\r\n                color=\"white\"\r\n                rightLinks={<HeaderLinks />}\r\n                absolute\r\n\r\n            />\r\n            <div className=\"main-container\">\r\n               \r\n                <ResultContextConsumer>\r\n                    {({ context }) => (\r\n                        <ResultDetail context={context}></ResultDetail>\r\n                    )}\r\n                </ResultContextConsumer>\r\n            </div>\r\n            {/* <Footer></Footer> */}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport history from './history';\r\nimport ChatbotPage from \"./containers/Assessment/Chatbot/ChatbotPage\";\r\nimport ResultPage from \"./containers/Assessment/Result/ResultPage\";\r\nimport { ResultContextProvider } from '././data/context'\r\nimport './App.css';\r\nimport './components/common.css';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router history={history}>\r\n      <ResultContextProvider>\r\n        <Switch>\r\n          <Route path=\"/assessment\" component={ChatbotPage} />\r\n          <Route path=\"/result\" component={ResultPage} />\r\n          <Route path=\"/\" component={ChatbotPage} />\r\n        </Switch>\r\n      </ResultContextProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/botavator.308830c4.svg\";"],"sourceRoot":""}